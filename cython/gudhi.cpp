/* Generated by Cython 0.29 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/cython/include/Cubical_complex_interface.h",
            "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/cython/include/Off_reader_interface.h",
            "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/cython/include/Persistent_cohomology_interface.h",
            "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/cython/include/Reader_utils_interface.h",
            "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/cython/include/Rips_complex_interface.h",
            "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/cython/include/Simplex_tree_interface.h",
            "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/cython/include/Strong_witness_complex_interface.h",
            "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/cython/include/Witness_complex_interface.h"
        ],
        "extra_compile_args": [
            "-DBOOST_RESULT_OF_USE_DECLTYPE",
            "-DBOOST_ALL_NO_LIB",
            "-DBOOST_SYSTEM_NO_DEPRECATED",
            "-std=c++11",
            "-frounding-math"
        ],
        "include_dirs": [
            "/usr/include",
            "/usr/include",
            "/usr/include",
            "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/include",
            "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/cython/include"
        ],
        "language": "c++",
        "name": "gudhi",
        "sources": [
            "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/build/cython/gudhi.pyx"
        ]
    },
    "module_name": "gudhi"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29"
#define CYTHON_HEX_VERSION 0x001D00F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_USE_DICT_VERSIONS
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
        static PY_UINT64_T __pyx_dict_version = 0;\
        static PyObject *__pyx_dict_cached_value = NULL;\
        if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
            (VAR) = __pyx_dict_cached_value;\
        } else {\
            (VAR) = __pyx_dict_cached_value = (LOOKUP);\
            __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
        }\
    }
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__gudhi
#define __PYX_HAVE_API__gudhi
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <string>
#include "Off_reader_interface.h"
#include <utility>
#include "Simplex_tree_interface.h"
#include "Persistent_cohomology_interface.h"
#include "Rips_complex_interface.h"
#include "Cubical_complex_interface.h"
#include <map>
#include "Reader_utils_interface.h"
#include "Witness_complex_interface.h"
#include "Strong_witness_complex_interface.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "persistence_graphical_tools.py",
  "stringsource",
  "off_reader.pyx",
  "simplex_tree.pyx",
  "rips_complex.pyx",
  "cubical_complex.pyx",
  "periodic_cubical_complex.pyx",
  "reader_utils.pyx",
  "witness_complex.pyx",
  "strong_witness_complex.pyx",
  "gudhi.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_5gudhi_SimplexTree;
struct __pyx_obj_5gudhi_RipsComplex;
struct __pyx_obj_5gudhi_CubicalComplex;
struct __pyx_obj_5gudhi_PeriodicCubicalComplex;
struct __pyx_obj_5gudhi_WitnessComplex;
struct __pyx_obj_5gudhi_StrongWitnessComplex;
struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode;
struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr;
struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram;
struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr;

/* "../../cython/cython/simplex_tree.pyx":71
 * 
 * # SimplexTree python interface
 * cdef class SimplexTree:             # <<<<<<<<<<<<<<
 *     """The simplex tree is an efficient and flexible data structure for
 *     representing general (filtered) simplicial complexes. The data structure
 */
struct __pyx_obj_5gudhi_SimplexTree {
  PyObject_HEAD
  Gudhi::Simplex_tree_interface<Gudhi::Simplex_tree_options_full_featured> *thisptr;
  Gudhi::Persistent_cohomology_interface<Gudhi::Simplex_tree<Gudhi::Simplex_tree_options_full_featured>> *pcohptr;
};


/* "../../cython/cython/rips_complex.pyx":40
 * 
 * # RipsComplex python interface
 * cdef class RipsComplex:             # <<<<<<<<<<<<<<
 *     """The data structure is a one skeleton graph, or Rips graph, containing
 *     edges when the edge length is less or equal to a given threshold. Edge
 */
struct __pyx_obj_5gudhi_RipsComplex {
  PyObject_HEAD
  Gudhi::rips_complex::Rips_complex_interface *thisptr;
};


/* "../../cython/cython/cubical_complex.pyx":50
 * 
 * # CubicalComplex python interface
 * cdef class CubicalComplex:             # <<<<<<<<<<<<<<
 *     """The CubicalComplex is an example of a structured complex useful in
 *     computational mathematics (specially rigorous numerics) and image
 */
struct __pyx_obj_5gudhi_CubicalComplex {
  PyObject_HEAD
  Gudhi::Cubical_complex::Cubical_complex_interface<> *thisptr;
  Gudhi::Persistent_cohomology_interface<Gudhi::Cubical_complex::Cubical_complex_interface<>> *pcohptr;
};


/* "../../cython/cython/periodic_cubical_complex.pyx":50
 * 
 * # PeriodicCubicalComplex python interface
 * cdef class PeriodicCubicalComplex:             # <<<<<<<<<<<<<<
 *     """The PeriodicCubicalComplex is an example of a structured complex useful
 *     in computational mathematics (specially rigorous numerics) and image
 */
struct __pyx_obj_5gudhi_PeriodicCubicalComplex {
  PyObject_HEAD
  Gudhi::Cubical_complex::Cubical_complex_interface<Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base<double>> *thisptr;
  Gudhi::Persistent_cohomology_interface<Gudhi::Cubical_complex::Cubical_complex_interface<Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base<double>>> *pcohptr;
};


/* "../../cython/cython/witness_complex.pyx":39
 * 
 * # WitnessComplex python interface
 * cdef class WitnessComplex:             # <<<<<<<<<<<<<<
 *     """Constructs (weak) witness complex for a given table of nearest landmarks
 *     with respect to witnesses.
 */
struct __pyx_obj_5gudhi_WitnessComplex {
  PyObject_HEAD
  Gudhi::witness_complex::Witness_complex_interface *thisptr;
};


/* "../../cython/cython/strong_witness_complex.pyx":39
 * 
 * # StrongWitnessComplex python interface
 * cdef class StrongWitnessComplex:             # <<<<<<<<<<<<<<
 *     """Constructs (strong) witness complex for a given table of nearest
 *     landmarks with respect to witnesses.
 */
struct __pyx_obj_5gudhi_StrongWitnessComplex {
  PyObject_HEAD
  Gudhi::witness_complex::Strong_witness_complex_interface *thisptr;
};


/* "../../cython/cython/persistence_graphical_tools.py":64
 *                '#008888']
 * 
 *     def plot_persistence_barcode(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             max_barcodes=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence bar code from persistence values list
 */
struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode {
  PyObject_HEAD
  PyObject *__pyx_v_persistence;
};


/* "../../cython/cython/persistence_graphical_tools.py":128
 * 
 *         if legend:
 *             dimensions = list(set(item[0] for item in persistence))             # <<<<<<<<<<<<<<
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim],
 *                                                label=str(dim)) for dim in dimensions],
 */
struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *__pyx_outer_scope;
  PyObject *__pyx_v_item;
};


/* "../../cython/cython/persistence_graphical_tools.py":137
 *         return plt
 * 
 *     def plot_persistence_diagram(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             band=0., max_plots=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence diagram from persistence values list
 */
struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram {
  PyObject_HEAD
  PyObject *__pyx_v_persistence;
};


/* "../../cython/cython/persistence_graphical_tools.py":208
 * 
 *         if legend:
 *             dimensions = list(set(item[0] for item in persistence))             # <<<<<<<<<<<<<<
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim], label=str(dim)) for dim in dimensions])
 * 
 */
struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *__pyx_outer_scope;
  PyObject *__pyx_v_item;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = PyFrame_Type.tp_basicsize - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* object_ord.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Ord(c)\
    (likely(PyUnicode_Check(c)) ? (long)__Pyx_PyUnicode_AsPy_UCS4(c) : __Pyx__PyObject_Ord(c))
#else
#define __Pyx_PyObject_Ord(c) __Pyx__PyObject_Ord(c)
#endif
static long __Pyx__PyObject_Ord(PyObject* c);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cython' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'gudhi' */
static PyTypeObject *__pyx_ptype_5gudhi_SimplexTree = 0;
static PyTypeObject *__pyx_ptype_5gudhi_RipsComplex = 0;
static PyTypeObject *__pyx_ptype_5gudhi_CubicalComplex = 0;
static PyTypeObject *__pyx_ptype_5gudhi_PeriodicCubicalComplex = 0;
static PyTypeObject *__pyx_ptype_5gudhi_WitnessComplex = 0;
static PyTypeObject *__pyx_ptype_5gudhi_StrongWitnessComplex = 0;
static PyTypeObject *__pyx_ptype_5gudhi___pyx_scope_struct__plot_persistence_barcode = 0;
static PyTypeObject *__pyx_ptype_5gudhi___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_5gudhi___pyx_scope_struct_2_plot_persistence_diagram = 0;
static PyTypeObject *__pyx_ptype_5gudhi___pyx_scope_struct_3_genexpr = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(const std::vector<std::vector<double> >  &); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static PyObject *__pyx_convert_pair_to_py_double____double(std::pair<double,double>  const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_int____std_3a__3a_pair_3c_double_2c_double_3e___(std::pair<int,std::pair<double,double> >  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(const std::vector<std::pair<int,std::pair<double,double> > >  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(const std::vector<std::pair<double,double> >  &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c_int_3e_______std_3a__3a_vector_3c_int_3e___(std::pair<std::vector<int> ,std::vector<int> >  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_vector_3c_int_3e____2c_std_3a__3a_vector_3c_int_3e____3e___(const std::vector<std::pair<std::vector<int> ,std::vector<int> > >  &); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static std::vector<std::vector<double> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(PyObject *); /*proto*/
static std::vector<unsigned int>  __pyx_convert_vector_from_py_unsigned_int(PyObject *); /*proto*/
static std::vector<bool>  __pyx_convert_vector_from_py_bool(PyObject *); /*proto*/
static PyObject *__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(std::map<int,std::vector<std::pair<double,double> > >  const &); /*proto*/
static std::pair<size_t,double>  __pyx_convert_pair_from_py_size_t__and_double(PyObject *); /*proto*/
static std::vector<std::pair<size_t,double> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c_size_t_2c_double_3e___(PyObject *); /*proto*/
static std::vector<std::vector<std::pair<size_t,double> > >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_size_t_2c_double_3e____3e___(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "gudhi"
extern int __pyx_module_is_main_gudhi;
int __pyx_module_is_main_gudhi = 0;

/* Implementation of 'gudhi' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_reversed;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_[] = "";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_os[] = "os";
static const char __pyx_k__14[] = ";";
static const char __pyx_k__21[] = "*";
static const char __pyx_k_dim[] = "dim";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_ind[] = "ind";
static const char __pyx_k_inf[] = "inf";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_loc[] = "loc";
static const char __pyx_k_plt[] = "plt";
static const char __pyx_k_red[] = "red";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_band[] = "band";
static const char __pyx_k_barh[] = "barh";
static const char __pyx_k_diag[] = "diag";
static const char __pyx_k_file[] = "file ";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_left[] = "left";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_plot[] = "plot";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_2_3_0[] = "2.3.0";
static const char __pyx_k_Birth[] = "Birth";
static const char __pyx_k_Death[] = "Death";
static const char __pyx_k_Patch[] = "Patch";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_color[] = "color";
static const char __pyx_k_delta[] = "delta";
static const char __pyx_k_gudhi[] = "gudhi";
static const char __pyx_k_infty[] = "$\\infty$";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_title[] = "title";
static const char __pyx_k_000000[] = "#000000";
static const char __pyx_k_000088[] = "#000088";
static const char __pyx_k_0000ff[] = "#0000ff";
static const char __pyx_k_008800[] = "#008800";
static const char __pyx_k_008888[] = "#008888";
static const char __pyx_k_00ff00[] = "#00ff00";
static const char __pyx_k_00ffff[] = "#00ffff";
static const char __pyx_k_880000[] = "#880000";
static const char __pyx_k_880088[] = "#880088";
static const char __pyx_k_888800[] = "#888800";
static const char __pyx_k_GPL_v3[] = "GPL v3";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_author[] = "__author__";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_ff0000[] = "#ff0000";
static const char __pyx_k_ff00ff[] = "#ff00ff";
static const char __pyx_k_ffff00[] = "#ffff00";
static const char __pyx_k_file_2[] = "file";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_isfile[] = "isfile";
static const char __pyx_k_legend[] = "legend";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_xlabel[] = "xlabel";
static const char __pyx_k_ylabel[] = "ylabel";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_handles[] = "handles";
static const char __pyx_k_license[] = "__license__";
static const char __pyx_k_palette[] = "palette";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_scatter[] = "scatter";
static const char __pyx_k_simplex[] = "simplex";
static const char __pyx_k_version[] = "__version__";
static const char __pyx_k_csv_file[] = "csv_file";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_infinity[] = "infinity";
static const char __pyx_k_interval[] = "interval";
static const char __pyx_k_linspace[] = "linspace";
static const char __pyx_k_mpatches[] = "mpatches";
static const char __pyx_k_off_file[] = "off_file";
static const char __pyx_k_read_off[] = "read_off";
static const char __pyx_k_reversed[] = "reversed";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_to_value[] = "to_value";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_copyright[] = "__copyright__";
static const char __pyx_k_facecolor[] = "facecolor";
static const char __pyx_k_inf_delta[] = "inf_delta";
static const char __pyx_k_linewidth[] = "linewidth";
static const char __pyx_k_max_death[] = "max_death";
static const char __pyx_k_max_plots[] = "max_plots";
static const char __pyx_k_min_birth[] = "min_birth";
static const char __pyx_k_not_found[] = " not found.";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_separator[] = "separator";
static const char __pyx_k_axis_start[] = "axis_start";
static const char __pyx_k_debug_info[] = "__debug_info__";
static const char __pyx_k_dimensions[] = "dimensions";
static const char __pyx_k_filtration[] = "filtration";
static const char __pyx_k_from_value[] = "from_value";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_RipsComplex[] = "RipsComplex";
static const char __pyx_k_SimplexTree[] = "SimplexTree";
static const char __pyx_k_codimension[] = "codimension";
static const char __pyx_k_lower_right[] = "lower right";
static const char __pyx_k_persistence[] = "persistence";
static const char __pyx_k_fill_between[] = "fill_between";
static const char __pyx_k_max_barcodes[] = "max_barcodes";
static const char __pyx_k_perseus_file[] = "perseus_file";
static const char __pyx_k_max_dimension[] = "max_dimension";
static const char __pyx_k_only_this_dim[] = "only_this_dim";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_CubicalComplex[] = "CubicalComplex";
static const char __pyx_k_WitnessComplex[] = "WitnessComplex";
static const char __pyx_k_distance_matrix[] = "distance_matrix";
static const char __pyx_k_limit_dimension[] = "limit_dimension";
static const char __pyx_k_max_edge_length[] = "max_edge_length";
static const char __pyx_k_min_persistence[] = "min_persistence";
static const char __pyx_k_root_source_dir[] = "__root_source_dir__";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_Vincent_Rouvreau[] = "Vincent Rouvreau";
static const char __pyx_k_max_alpha_square[] = "max_alpha_square";
static const char __pyx_k_persistence_file[] = "persistence_file";
static const char __pyx_k_matplotlib_pyplot[] = "matplotlib.pyplot";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_matplotlib_patches[] = "matplotlib.patches";
static const char __pyx_k_Persistence_barcode[] = "Persistence barcode";
static const char __pyx_k_Persistence_diagram[] = "Persistence diagram";
static const char __pyx_k_min_birth_max_death[] = "__min_birth_max_death";
static const char __pyx_k_periodic_dimensions[] = "periodic_dimensions";
static const char __pyx_k_persistence_dim_max[] = "persistence_dim_max";
static const char __pyx_k_StrongWitnessComplex[] = "StrongWitnessComplex";
static const char __pyx_k_homology_coeff_field[] = "homology_coeff_field";
static const char __pyx_k_not_set_or_not_found[] = " not set or not found.";
static const char __pyx_k_persistence_interval[] = "persistence_interval";
static const char __pyx_k_top_dimensional_cells[] = "top_dimensional_cells";
static const char __pyx_k_Copyright_C_2016_Inria[] = "Copyright (C) 2016  Inria";
static const char __pyx_k_Copyright_C_2017_Inria[] = "Copyright (C) 2017 Inria";
static const char __pyx_k_PeriodicCubicalComplex[] = "PeriodicCubicalComplex";
static const char __pyx_k_nearest_landmark_table[] = "nearest_landmark_table";
static const char __pyx_k_Copyright_C_2016_Inria_2[] = "Copyright (C) 2016 Inria";
static const char __pyx_k_plot_persistence_barcode[] = "plot_persistence_barcode";
static const char __pyx_k_plot_persistence_diagram[] = "plot_persistence_diagram";
static const char __pyx_k_betti_numbers_function_requires[] = "betti_numbers function requires persistence function to be launched first.";
static const char __pyx_k_homes_rhu_Documents_phd_project[] = "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0";
static const char __pyx_k_plot_persistence_barcode_locals[] = "plot_persistence_barcode.<locals>.genexpr";
static const char __pyx_k_plot_persistence_diagram_locals[] = "plot_persistence_diagram.<locals>.genexpr";
static const char __pyx_k_CubicalComplex_can_be_constructe[] = "CubicalComplex can be constructed from dimensions and top_dimensional_cells or from a Perseus-style file name.";
static const char __pyx_k_Python_version_3_6_6_Cython_vers[] = "Python version 3.6.6\nCython version 0.29\nMatplotlib version 3.0.0\nNumpy version 1.15.3\nInstalled modules are: off_reader;simplex_tree;rips_complex;cubical_complex;periodic_cubical_complex;persistence_graphical_tools;reader_utils;witness_complex;strong_witness_complex;persistence_graphical_tools;\nMissing modules are: bottleneck_distance;nerve_gic;subsampling;tangential_complex;alpha_complex;euclidean_witness_complex;euclidean_strong_witness_complex;\n";
static const char __pyx_k_This_file_is_part_of_the_Gudhi_L[] = "This file is part of the Gudhi Library. The Gudhi library\n   (Geometric Understanding in Higher Dimensions) is a generic C++\n   library for computational topology.\n\n   Author(s):       Vincent Rouvreau\n\n   Copyright (C) 2016  Inria\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n";
static const char __pyx_k_Vincent_Rouvreau_Bertrand_Michel[] = "Vincent Rouvreau, Bertrand Michel";
static const char __pyx_k_intervals_in_dim_function_requir[] = "intervals_in_dim function requires persistence function to be launched first.";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_persistence_file_must_be_specifi[] = "persistence_file must be specified";
static const char __pyx_k_persistence_pairs_function_requi[] = "persistence_pairs function requires persistence function to be launched first.";
static const char __pyx_k_persistent_betti_numbers_functio[] = "persistent_betti_numbers function requires persistence function to be launched first.";
static const char __pyx_k_read_lower_triangular_matrix_fro[] = "read_lower_triangular_matrix_from_csv_file";
static const char __pyx_k_read_persistence_intervals_group[] = "read_persistence_intervals_grouped_by_dimension";
static const char __pyx_k_read_persistence_intervals_in_di[] = "read_persistence_intervals_in_dimension";
static const char __pyx_k_homes_rhu_Documents_phd_project_2[] = "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/cython/cython/off_reader.pyx";
static const char __pyx_k_homes_rhu_Documents_phd_project_3[] = "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/cython/cython/persistence_graphical_tools.py";
static const char __pyx_k_homes_rhu_Documents_phd_project_4[] = "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0/cython/cython/reader_utils.pyx";
static const char __pyx_k_plot_persistence_barcode_locals_2[] = "plot_persistence_barcode.<locals>.<lambda>";
static const char __pyx_k_plot_persistence_diagram_locals_2[] = "plot_persistence_diagram.<locals>.<lambda>";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_kp_s_000000;
static PyObject *__pyx_kp_s_000088;
static PyObject *__pyx_kp_s_0000ff;
static PyObject *__pyx_kp_s_008800;
static PyObject *__pyx_kp_s_008888;
static PyObject *__pyx_kp_s_00ff00;
static PyObject *__pyx_kp_s_00ffff;
static PyObject *__pyx_kp_s_2_3_0;
static PyObject *__pyx_kp_s_880000;
static PyObject *__pyx_kp_s_880088;
static PyObject *__pyx_kp_s_888800;
static PyObject *__pyx_n_s_Birth;
static PyObject *__pyx_kp_s_Copyright_C_2016_Inria;
static PyObject *__pyx_kp_s_Copyright_C_2016_Inria_2;
static PyObject *__pyx_kp_s_Copyright_C_2017_Inria;
static PyObject *__pyx_n_s_CubicalComplex;
static PyObject *__pyx_kp_s_CubicalComplex_can_be_constructe;
static PyObject *__pyx_n_s_Death;
static PyObject *__pyx_kp_s_GPL_v3;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_Patch;
static PyObject *__pyx_n_s_PeriodicCubicalComplex;
static PyObject *__pyx_kp_s_Persistence_barcode;
static PyObject *__pyx_kp_s_Persistence_diagram;
static PyObject *__pyx_kp_s_Python_version_3_6_6_Cython_vers;
static PyObject *__pyx_n_s_RipsComplex;
static PyObject *__pyx_n_s_SimplexTree;
static PyObject *__pyx_n_s_StrongWitnessComplex;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Vincent_Rouvreau;
static PyObject *__pyx_kp_s_Vincent_Rouvreau_Bertrand_Michel;
static PyObject *__pyx_n_s_WitnessComplex;
static PyObject *__pyx_kp_s__14;
static PyObject *__pyx_n_s__21;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_author;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_axis_start;
static PyObject *__pyx_n_s_band;
static PyObject *__pyx_n_s_barh;
static PyObject *__pyx_kp_s_betti_numbers_function_requires;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_codimension;
static PyObject *__pyx_n_s_color;
static PyObject *__pyx_n_s_copyright;
static PyObject *__pyx_n_s_csv_file;
static PyObject *__pyx_n_s_debug_info;
static PyObject *__pyx_n_s_delta;
static PyObject *__pyx_n_s_diag;
static PyObject *__pyx_n_s_dim;
static PyObject *__pyx_n_s_dimensions;
static PyObject *__pyx_n_s_distance_matrix;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_facecolor;
static PyObject *__pyx_kp_s_ff0000;
static PyObject *__pyx_kp_s_ff00ff;
static PyObject *__pyx_kp_s_ffff00;
static PyObject *__pyx_kp_s_file;
static PyObject *__pyx_n_s_file_2;
static PyObject *__pyx_n_s_fill_between;
static PyObject *__pyx_n_s_filtration;
static PyObject *__pyx_n_s_from_value;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gudhi;
static PyObject *__pyx_n_s_handles;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_kp_s_homes_rhu_Documents_phd_project;
static PyObject *__pyx_kp_s_homes_rhu_Documents_phd_project_2;
static PyObject *__pyx_kp_s_homes_rhu_Documents_phd_project_3;
static PyObject *__pyx_kp_s_homes_rhu_Documents_phd_project_4;
static PyObject *__pyx_n_s_homology_coeff_field;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_ind;
static PyObject *__pyx_n_s_inf;
static PyObject *__pyx_n_s_inf_delta;
static PyObject *__pyx_n_s_infinity;
static PyObject *__pyx_kp_s_infty;
static PyObject *__pyx_n_s_interval;
static PyObject *__pyx_kp_s_intervals_in_dim_function_requir;
static PyObject *__pyx_n_s_isfile;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_left;
static PyObject *__pyx_n_s_legend;
static PyObject *__pyx_n_s_license;
static PyObject *__pyx_n_s_limit_dimension;
static PyObject *__pyx_n_s_linewidth;
static PyObject *__pyx_n_s_linspace;
static PyObject *__pyx_n_s_loc;
static PyObject *__pyx_kp_s_lower_right;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matplotlib_patches;
static PyObject *__pyx_n_s_matplotlib_pyplot;
static PyObject *__pyx_n_s_max_alpha_square;
static PyObject *__pyx_n_s_max_barcodes;
static PyObject *__pyx_n_s_max_death;
static PyObject *__pyx_n_s_max_dimension;
static PyObject *__pyx_n_s_max_edge_length;
static PyObject *__pyx_n_s_max_plots;
static PyObject *__pyx_n_s_min_birth;
static PyObject *__pyx_n_s_min_birth_max_death;
static PyObject *__pyx_n_s_min_persistence;
static PyObject *__pyx_n_s_mpatches;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nearest_landmark_table;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_kp_s_not_found;
static PyObject *__pyx_kp_s_not_set_or_not_found;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_off_file;
static PyObject *__pyx_n_s_only_this_dim;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_palette;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_periodic_dimensions;
static PyObject *__pyx_n_s_perseus_file;
static PyObject *__pyx_n_s_persistence;
static PyObject *__pyx_n_s_persistence_dim_max;
static PyObject *__pyx_n_s_persistence_file;
static PyObject *__pyx_kp_s_persistence_file_must_be_specifi;
static PyObject *__pyx_n_s_persistence_interval;
static PyObject *__pyx_kp_s_persistence_pairs_function_requi;
static PyObject *__pyx_kp_s_persistent_betti_numbers_functio;
static PyObject *__pyx_n_s_plot;
static PyObject *__pyx_n_s_plot_persistence_barcode;
static PyObject *__pyx_n_s_plot_persistence_barcode_locals;
static PyObject *__pyx_n_s_plot_persistence_barcode_locals_2;
static PyObject *__pyx_n_s_plot_persistence_diagram;
static PyObject *__pyx_n_s_plot_persistence_diagram_locals;
static PyObject *__pyx_n_s_plot_persistence_diagram_locals_2;
static PyObject *__pyx_n_s_plt;
static PyObject *__pyx_n_s_points;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read_lower_triangular_matrix_fro;
static PyObject *__pyx_n_s_read_off;
static PyObject *__pyx_n_s_read_persistence_intervals_group;
static PyObject *__pyx_n_s_read_persistence_intervals_in_di;
static PyObject *__pyx_n_s_red;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_n_s_reversed;
static PyObject *__pyx_n_s_root_source_dir;
static PyObject *__pyx_n_s_scatter;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_separator;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_simplex;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_title;
static PyObject *__pyx_n_s_to_value;
static PyObject *__pyx_n_s_top_dimensional_cells;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xlabel;
static PyObject *__pyx_n_s_ylabel;
static PyObject *__pyx_pf_5gudhi_read_off(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_off_file); /* proto */
static int __pyx_pf_5gudhi_11SimplexTree___init__(CYTHON_UNUSED struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static int __pyx_pf_5gudhi_11SimplexTree_2__cinit__(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static void __pyx_pf_5gudhi_11SimplexTree_4__dealloc__(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_6__is_defined(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_8__is_persistence_defined(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_10filtration(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_12assign_filtration(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex, PyObject *__pyx_v_filtration); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_14initialize_filtration(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_16num_vertices(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_18num_simplices(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_20dimension(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_22upper_bound_dimension(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_24set_dimension(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_dimension); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_26find(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_28insert(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex, PyObject *__pyx_v_filtration); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_30get_filtration(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_32get_skeleton(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_dimension); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_34get_star(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_36get_cofaces(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex, PyObject *__pyx_v_codimension); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_38remove_maximal_simplex(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_40prune_above_filtration(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_filtration); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_42expansion(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_max_dim); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_44make_filtration_non_decreasing(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_46persistence(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_homology_coeff_field, PyObject *__pyx_v_min_persistence, PyObject *__pyx_v_persistence_dim_max); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_48betti_numbers(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_50persistent_betti_numbers(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_from_value, PyObject *__pyx_v_to_value); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_52persistence_intervals_in_dimension(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_dimension); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_54persistence_pairs(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_56write_persistence_diagram(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_persistence_file); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_58__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11SimplexTree_60__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5gudhi_11RipsComplex___init__(CYTHON_UNUSED struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_points, CYTHON_UNUSED PyObject *__pyx_v_distance_matrix, CYTHON_UNUSED PyObject *__pyx_v_max_edge_length); /* proto */
static int __pyx_pf_5gudhi_11RipsComplex_2__cinit__(struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_distance_matrix, PyObject *__pyx_v_max_edge_length); /* proto */
static void __pyx_pf_5gudhi_11RipsComplex_4__dealloc__(struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11RipsComplex_6__is_defined(struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11RipsComplex_8create_simplex_tree(struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self, PyObject *__pyx_v_max_dimension); /* proto */
static PyObject *__pyx_pf_5gudhi_11RipsComplex_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_11RipsComplex_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5gudhi_14CubicalComplex___init__(CYTHON_UNUSED struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_dimensions, CYTHON_UNUSED PyObject *__pyx_v_top_dimensional_cells, CYTHON_UNUSED PyObject *__pyx_v_perseus_file); /* proto */
static int __pyx_pf_5gudhi_14CubicalComplex_2__cinit__(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self, PyObject *__pyx_v_dimensions, PyObject *__pyx_v_top_dimensional_cells, PyObject *__pyx_v_perseus_file); /* proto */
static void __pyx_pf_5gudhi_14CubicalComplex_4__dealloc__(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_14CubicalComplex_6__is_defined(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_14CubicalComplex_8__is_persistence_defined(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_14CubicalComplex_10num_simplices(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_14CubicalComplex_12dimension(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_14CubicalComplex_14persistence(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self, PyObject *__pyx_v_homology_coeff_field, PyObject *__pyx_v_min_persistence); /* proto */
static PyObject *__pyx_pf_5gudhi_14CubicalComplex_16betti_numbers(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_14CubicalComplex_18persistent_betti_numbers(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self, PyObject *__pyx_v_from_value, PyObject *__pyx_v_to_value); /* proto */
static PyObject *__pyx_pf_5gudhi_14CubicalComplex_20persistence_intervals_in_dimension(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self, PyObject *__pyx_v_dimension); /* proto */
static PyObject *__pyx_pf_5gudhi_14CubicalComplex_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_14CubicalComplex_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5gudhi_22PeriodicCubicalComplex___init__(CYTHON_UNUSED struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_dimensions, CYTHON_UNUSED PyObject *__pyx_v_top_dimensional_cells, CYTHON_UNUSED PyObject *__pyx_v_periodic_dimensions, CYTHON_UNUSED PyObject *__pyx_v_perseus_file); /* proto */
static int __pyx_pf_5gudhi_22PeriodicCubicalComplex_2__cinit__(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self, PyObject *__pyx_v_dimensions, PyObject *__pyx_v_top_dimensional_cells, PyObject *__pyx_v_periodic_dimensions, PyObject *__pyx_v_perseus_file); /* proto */
static void __pyx_pf_5gudhi_22PeriodicCubicalComplex_4__dealloc__(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_6__is_defined(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_8__is_persistence_defined(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_10num_simplices(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_12dimension(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_14persistence(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self, PyObject *__pyx_v_homology_coeff_field, PyObject *__pyx_v_min_persistence); /* proto */
static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_16betti_numbers(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_18persistent_betti_numbers(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self, PyObject *__pyx_v_from_value, PyObject *__pyx_v_to_value); /* proto */
static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_20persistence_intervals_in_dimension(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self, PyObject *__pyx_v_dimension); /* proto */
static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5gudhi_2__min_birth_max_death(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_persistence, PyObject *__pyx_v_band); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_life_time); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_birth); /* proto */
static PyObject *__pyx_pf_5gudhi_24plot_persistence_barcode_2genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5gudhi_4plot_persistence_barcode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_persistence, PyObject *__pyx_v_persistence_file, PyObject *__pyx_v_alpha, PyObject *__pyx_v_max_barcodes, PyObject *__pyx_v_inf_delta, PyObject *__pyx_v_legend); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_life_time); /* proto */
static PyObject *__pyx_pf_5gudhi_24plot_persistence_diagram_1genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5gudhi_6plot_persistence_diagram(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_persistence, PyObject *__pyx_v_persistence_file, PyObject *__pyx_v_alpha, PyObject *__pyx_v_band, PyObject *__pyx_v_max_plots, PyObject *__pyx_v_inf_delta, PyObject *__pyx_v_legend); /* proto */
static PyObject *__pyx_pf_5gudhi_8read_lower_triangular_matrix_from_csv_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_csv_file, PyObject *__pyx_v_separator); /* proto */
static PyObject *__pyx_pf_5gudhi_10read_persistence_intervals_grouped_by_dimension(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_persistence_file); /* proto */
static PyObject *__pyx_pf_5gudhi_12read_persistence_intervals_in_dimension(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_persistence_file, PyObject *__pyx_v_only_this_dim); /* proto */
static int __pyx_pf_5gudhi_14WitnessComplex___init__(CYTHON_UNUSED struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_nearest_landmark_table); /* proto */
static int __pyx_pf_5gudhi_14WitnessComplex_2__cinit__(struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self, PyObject *__pyx_v_nearest_landmark_table); /* proto */
static void __pyx_pf_5gudhi_14WitnessComplex_4__dealloc__(struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_14WitnessComplex_6__is_defined(struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_14WitnessComplex_8create_simplex_tree(struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self, PyObject *__pyx_v_max_alpha_square, PyObject *__pyx_v_limit_dimension); /* proto */
static PyObject *__pyx_pf_5gudhi_14WitnessComplex_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_14WitnessComplex_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5gudhi_20StrongWitnessComplex___init__(CYTHON_UNUSED struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_nearest_landmark_table); /* proto */
static int __pyx_pf_5gudhi_20StrongWitnessComplex_2__cinit__(struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self, PyObject *__pyx_v_nearest_landmark_table); /* proto */
static void __pyx_pf_5gudhi_20StrongWitnessComplex_4__dealloc__(struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_20StrongWitnessComplex_6__is_defined(struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_20StrongWitnessComplex_8create_simplex_tree(struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self, PyObject *__pyx_v_max_alpha_square, PyObject *__pyx_v_limit_dimension); /* proto */
static PyObject *__pyx_pf_5gudhi_20StrongWitnessComplex_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5gudhi_20StrongWitnessComplex_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5gudhi_SimplexTree(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5gudhi_RipsComplex(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5gudhi_CubicalComplex(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5gudhi_PeriodicCubicalComplex(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5gudhi_WitnessComplex(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5gudhi_StrongWitnessComplex(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5gudhi___pyx_scope_struct__plot_persistence_barcode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5gudhi___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5gudhi___pyx_scope_struct_2_plot_persistence_diagram(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5gudhi___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_;
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_1;
static PyObject *__pyx_float_0_6;
static PyObject *__pyx_float_0_8;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_11;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__4;
static PyObject *__pyx_k__5;
static PyObject *__pyx_k__12;
static PyObject *__pyx_k__13;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
/* Late includes */

/* "../../cython/cython/off_reader.pyx":35
 *     vector[vector[double]] read_points_from_OFF_file(string off_file)
 * 
 * def read_off(off_file=''):             # <<<<<<<<<<<<<<
 *     """Read points from OFF file.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_1read_off(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_read_off[] = "Read points from OFF file.\n\n    :param off_file: An OFF file style name.\n    :type off_file: string\n\n    :returns:  The point set.\n    :rtype: vector[vector[double]]\n    ";
static PyMethodDef __pyx_mdef_5gudhi_1read_off = {"read_off", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_1read_off, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_read_off};
static PyObject *__pyx_pw_5gudhi_1read_off(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_off_file = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_off (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_off_file,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_off_file);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_off") < 0)) __PYX_ERR(2, 35, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_off_file = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_off", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 35, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.read_off", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_read_off(__pyx_self, __pyx_v_off_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_read_off(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_off_file) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  __Pyx_RefNannySetupContext("read_off", 0);

  /* "../../cython/cython/off_reader.pyx":44
 *     :rtype: vector[vector[double]]
 *     """
 *     if off_file is not '':             # <<<<<<<<<<<<<<
 *         if os.path.isfile(off_file):
 *             return read_points_from_OFF_file(str.encode(off_file))
 */
  __pyx_t_1 = (__pyx_v_off_file != __pyx_kp_s_);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../cython/cython/off_reader.pyx":45
 *     """
 *     if off_file is not '':
 *         if os.path.isfile(off_file):             # <<<<<<<<<<<<<<
 *             return read_points_from_OFF_file(str.encode(off_file))
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_isfile); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_off_file) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_off_file);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "../../cython/cython/off_reader.pyx":46
 *     if off_file is not '':
 *         if os.path.isfile(off_file):
 *             return read_points_from_OFF_file(str.encode(off_file))             # <<<<<<<<<<<<<<
 *         else:
 *             print("file " + off_file + " not found.")
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyString_Type)), __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 46, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_off_file) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_off_file);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 46, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 46, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(Gudhi::read_points_from_OFF_file(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 46, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "../../cython/cython/off_reader.pyx":45
 *     """
 *     if off_file is not '':
 *         if os.path.isfile(off_file):             # <<<<<<<<<<<<<<
 *             return read_points_from_OFF_file(str.encode(off_file))
 *         else:
 */
    }

    /* "../../cython/cython/off_reader.pyx":48
 *             return read_points_from_OFF_file(str.encode(off_file))
 *         else:
 *             print("file " + off_file + " not found.")             # <<<<<<<<<<<<<<
 *             return []
 * 
 */
    /*else*/ {
      __pyx_t_3 = PyNumber_Add(__pyx_kp_s_file, __pyx_v_off_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 48, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_not_found); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 48, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(2, 48, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "../../cython/cython/off_reader.pyx":49
 *         else:
 *             print("file " + off_file + " not found.")
 *             return []             # <<<<<<<<<<<<<<
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 49, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
    }

    /* "../../cython/cython/off_reader.pyx":44
 *     :rtype: vector[vector[double]]
 *     """
 *     if off_file is not '':             # <<<<<<<<<<<<<<
 *         if os.path.isfile(off_file):
 *             return read_points_from_OFF_file(str.encode(off_file))
 */
  }

  /* "../../cython/cython/off_reader.pyx":35
 *     vector[vector[double]] read_points_from_OFF_file(string off_file)
 * 
 * def read_off(off_file=''):             # <<<<<<<<<<<<<<
 *     """Read points from OFF file.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gudhi.read_off", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":86
 * 
 *     # Fake constructor that does nothing but documenting the constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """SimplexTree constructor.
 *         """
 */

/* Python wrapper */
static int __pyx_pw_5gudhi_11SimplexTree_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree___init__[] = "SimplexTree constructor.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5gudhi_11SimplexTree___init__;
#endif
static int __pyx_pw_5gudhi_11SimplexTree_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree___init__(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5gudhi_11SimplexTree___init__(CYTHON_UNUSED struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":91
 * 
 *     # The real cython constructor
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new Simplex_tree_interface_full_featured()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5gudhi_11SimplexTree_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5gudhi_11SimplexTree_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_2__cinit__(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5gudhi_11SimplexTree_2__cinit__(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Gudhi::Simplex_tree_interface<Gudhi::Simplex_tree_options_full_featured> *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../../cython/cython/simplex_tree.pyx":92
 *     # The real cython constructor
 *     def __cinit__(self):
 *         self.thisptr = new Simplex_tree_interface_full_featured()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new Gudhi::Simplex_tree_interface<Gudhi::Simplex_tree_options_full_featured>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 92, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "../../cython/cython/simplex_tree.pyx":91
 * 
 *     # The real cython constructor
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new Simplex_tree_interface_full_featured()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gudhi.SimplexTree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":94
 *         self.thisptr = new Simplex_tree_interface_full_featured()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_5gudhi_11SimplexTree_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5gudhi_11SimplexTree_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5gudhi_11SimplexTree_4__dealloc__(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5gudhi_11SimplexTree_4__dealloc__(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../../cython/cython/simplex_tree.pyx":95
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *         if self.pcohptr != NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/simplex_tree.pyx":96
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 *         if self.pcohptr != NULL:
 *             del self.pcohptr
 */
    delete __pyx_v_self->thisptr;

    /* "../../cython/cython/simplex_tree.pyx":95
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *         if self.pcohptr != NULL:
 */
  }

  /* "../../cython/cython/simplex_tree.pyx":97
 *         if self.thisptr != NULL:
 *             del self.thisptr
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.pcohptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/simplex_tree.pyx":98
 *             del self.thisptr
 *         if self.pcohptr != NULL:
 *             del self.pcohptr             # <<<<<<<<<<<<<<
 * 
 *     def __is_defined(self):
 */
    delete __pyx_v_self->pcohptr;

    /* "../../cython/cython/simplex_tree.pyx":97
 *         if self.thisptr != NULL:
 *             del self.thisptr
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.pcohptr
 * 
 */
  }

  /* "../../cython/cython/simplex_tree.pyx":94
 *         self.thisptr = new Simplex_tree_interface_full_featured()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../cython/cython/simplex_tree.pyx":100
 *             del self.pcohptr
 * 
 *     def __is_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if SimplexTree pointer is not NULL.
 *          """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_7__is_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_6__is_defined[] = "Returns true if SimplexTree pointer is not NULL.\n         ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_7__is_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__is_defined (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_6__is_defined(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_6__is_defined(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__is_defined", 0);

  /* "../../cython/cython/simplex_tree.pyx":103
 *         """Returns true if SimplexTree pointer is not NULL.
 *          """
 *         return self.thisptr != NULL             # <<<<<<<<<<<<<<
 * 
 *     def __is_persistence_defined(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr != NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":100
 *             del self.pcohptr
 * 
 *     def __is_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if SimplexTree pointer is not NULL.
 *          """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.SimplexTree.__is_defined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":105
 *         return self.thisptr != NULL
 * 
 *     def __is_persistence_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if Persistence pointer is not NULL.
 *          """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_9__is_persistence_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_8__is_persistence_defined[] = "Returns true if Persistence pointer is not NULL.\n         ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_9__is_persistence_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__is_persistence_defined (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_8__is_persistence_defined(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_8__is_persistence_defined(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__is_persistence_defined", 0);

  /* "../../cython/cython/simplex_tree.pyx":108
 *         """Returns true if Persistence pointer is not NULL.
 *          """
 *         return self.pcohptr != NULL             # <<<<<<<<<<<<<<
 * 
 *     def filtration(self, simplex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->pcohptr != NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":105
 *         return self.thisptr != NULL
 * 
 *     def __is_persistence_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if Persistence pointer is not NULL.
 *          """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.SimplexTree.__is_persistence_defined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":110
 *         return self.pcohptr != NULL
 * 
 *     def filtration(self, simplex):             # <<<<<<<<<<<<<<
 *         """This function returns the filtration value for a given N-simplex in
 *         this simplicial complex, or +infinity if it is not in the complex.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_11filtration(PyObject *__pyx_v_self, PyObject *__pyx_v_simplex); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_10filtration[] = "This function returns the filtration value for a given N-simplex in\n        this simplicial complex, or +infinity if it is not in the complex.\n\n        :param simplex: The N-simplex, represented by a list of vertex.\n        :type simplex: list of int.\n        :returns:  The simplicial complex filtration value.\n        :rtype:  float\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_11filtration(PyObject *__pyx_v_self, PyObject *__pyx_v_simplex) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filtration (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_10filtration(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), ((PyObject *)__pyx_v_simplex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_10filtration(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("filtration", 0);

  /* "../../cython/cython/simplex_tree.pyx":119
 *         :rtype:  float
 *         """
 *         return self.thisptr.simplex_filtration(simplex)             # <<<<<<<<<<<<<<
 * 
 *     def assign_filtration(self, simplex, filtration):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_simplex); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 119, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->simplex_filtration(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":110
 *         return self.pcohptr != NULL
 * 
 *     def filtration(self, simplex):             # <<<<<<<<<<<<<<
 *         """This function returns the filtration value for a given N-simplex in
 *         this simplicial complex, or +infinity if it is not in the complex.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gudhi.SimplexTree.filtration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":121
 *         return self.thisptr.simplex_filtration(simplex)
 * 
 *     def assign_filtration(self, simplex, filtration):             # <<<<<<<<<<<<<<
 *         """This function assigns the simplicial complex filtration value for a
 *         given N-simplex.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_13assign_filtration(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_12assign_filtration[] = "This function assigns the simplicial complex filtration value for a\n        given N-simplex.\n\n        :param simplex: The N-simplex, represented by a list of vertex.\n        :type simplex: list of int.\n        :param filtration:  The simplicial complex filtration value.\n        :type filtration:  float\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_13assign_filtration(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_simplex = 0;
  PyObject *__pyx_v_filtration = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("assign_filtration (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_simplex,&__pyx_n_s_filtration,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_simplex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filtration)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("assign_filtration", 1, 2, 2, 1); __PYX_ERR(3, 121, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "assign_filtration") < 0)) __PYX_ERR(3, 121, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_simplex = values[0];
    __pyx_v_filtration = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("assign_filtration", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 121, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.SimplexTree.assign_filtration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_12assign_filtration(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), __pyx_v_simplex, __pyx_v_filtration);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_12assign_filtration(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex, PyObject *__pyx_v_filtration) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("assign_filtration", 0);

  /* "../../cython/cython/simplex_tree.pyx":130
 *         :type filtration:  float
 *         """
 *         self.thisptr.assign_simplex_filtration(simplex, filtration)             # <<<<<<<<<<<<<<
 * 
 *     def initialize_filtration(self):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_simplex); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 130, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_filtration); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 130, __pyx_L1_error)
  __pyx_v_self->thisptr->assign_simplex_filtration(__pyx_t_1, __pyx_t_2);

  /* "../../cython/cython/simplex_tree.pyx":121
 *         return self.thisptr.simplex_filtration(simplex)
 * 
 *     def assign_filtration(self, simplex, filtration):             # <<<<<<<<<<<<<<
 *         """This function assigns the simplicial complex filtration value for a
 *         given N-simplex.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gudhi.SimplexTree.assign_filtration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":132
 *         self.thisptr.assign_simplex_filtration(simplex, filtration)
 * 
 *     def initialize_filtration(self):             # <<<<<<<<<<<<<<
 *         """This function initializes and sorts the simplicial complex
 *         filtration vector.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_15initialize_filtration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_14initialize_filtration[] = "This function initializes and sorts the simplicial complex\n        filtration vector.\n\n        .. note::\n\n            This function must be launched before\n            :func:`persistence()<gudhi.SimplexTree.persistence>`,\n            :func:`betti_numbers()<gudhi.SimplexTree.betti_numbers>`,\n            :func:`persistent_betti_numbers()<gudhi.SimplexTree.persistent_betti_numbers>`,\n            or :func:`get_filtration()<gudhi.SimplexTree.get_filtration>`\n            after :func:`inserting<gudhi.SimplexTree.insert>` or\n            :func:`removing<gudhi.SimplexTree.remove_maximal_simplex>`\n            simplices.\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_15initialize_filtration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize_filtration (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_14initialize_filtration(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_14initialize_filtration(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize_filtration", 0);

  /* "../../cython/cython/simplex_tree.pyx":147
 *             simplices.
 *         """
 *         self.thisptr.initialize_filtration()             # <<<<<<<<<<<<<<
 * 
 *     def num_vertices(self):
 */
  __pyx_v_self->thisptr->initialize_filtration();

  /* "../../cython/cython/simplex_tree.pyx":132
 *         self.thisptr.assign_simplex_filtration(simplex, filtration)
 * 
 *     def initialize_filtration(self):             # <<<<<<<<<<<<<<
 *         """This function initializes and sorts the simplicial complex
 *         filtration vector.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":149
 *         self.thisptr.initialize_filtration()
 * 
 *     def num_vertices(self):             # <<<<<<<<<<<<<<
 *         """This function returns the number of vertices of the simplicial
 *         complex.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_17num_vertices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_16num_vertices[] = "This function returns the number of vertices of the simplicial\n        complex.\n\n        :returns:  The simplicial complex number of vertices.\n        :rtype:  int\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_17num_vertices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_vertices (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_16num_vertices(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_16num_vertices(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("num_vertices", 0);

  /* "../../cython/cython/simplex_tree.pyx":156
 *         :rtype:  int
 *         """
 *         return self.thisptr.num_vertices()             # <<<<<<<<<<<<<<
 * 
 *     def num_simplices(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->num_vertices()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":149
 *         self.thisptr.initialize_filtration()
 * 
 *     def num_vertices(self):             # <<<<<<<<<<<<<<
 *         """This function returns the number of vertices of the simplicial
 *         complex.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.SimplexTree.num_vertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":158
 *         return self.thisptr.num_vertices()
 * 
 *     def num_simplices(self):             # <<<<<<<<<<<<<<
 *         """This function returns the number of simplices of the simplicial
 *         complex.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_19num_simplices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_18num_simplices[] = "This function returns the number of simplices of the simplicial\n        complex.\n\n        :returns:  the simplicial complex number of simplices.\n        :rtype:  int\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_19num_simplices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_simplices (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_18num_simplices(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_18num_simplices(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("num_simplices", 0);

  /* "../../cython/cython/simplex_tree.pyx":165
 *         :rtype:  int
 *         """
 *         return self.thisptr.num_simplices()             # <<<<<<<<<<<<<<
 * 
 *     def dimension(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->num_simplices()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":158
 *         return self.thisptr.num_vertices()
 * 
 *     def num_simplices(self):             # <<<<<<<<<<<<<<
 *         """This function returns the number of simplices of the simplicial
 *         complex.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.SimplexTree.num_simplices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":167
 *         return self.thisptr.num_simplices()
 * 
 *     def dimension(self):             # <<<<<<<<<<<<<<
 *         """This function returns the dimension of the simplicial complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_21dimension(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_20dimension[] = "This function returns the dimension of the simplicial complex.\n\n        :returns:  the simplicial complex dimension.\n        :rtype:  int\n\n        .. note::\n\n            This function is not constant time because it can recompute\n            dimension if required (can be triggered by\n            :func:`remove_maximal_simplex()<gudhi.SimplexTree.remove_maximal_simplex>`\n            or\n            :func:`prune_above_filtration()<gudhi.SimplexTree.prune_above_filtration>`\n            methods).\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_21dimension(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dimension (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_20dimension(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_20dimension(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dimension", 0);

  /* "../../cython/cython/simplex_tree.pyx":182
 *             methods).
 *         """
 *         return self.thisptr.dimension()             # <<<<<<<<<<<<<<
 * 
 *     def upper_bound_dimension(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->dimension()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":167
 *         return self.thisptr.num_simplices()
 * 
 *     def dimension(self):             # <<<<<<<<<<<<<<
 *         """This function returns the dimension of the simplicial complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.SimplexTree.dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":184
 *         return self.thisptr.dimension()
 * 
 *     def upper_bound_dimension(self):             # <<<<<<<<<<<<<<
 *         """This function returns a valid dimension upper bound of the
 *         simplicial complex.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_23upper_bound_dimension(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_22upper_bound_dimension[] = "This function returns a valid dimension upper bound of the\n        simplicial complex.\n\n        :returns:  an upper bound on the dimension of the simplicial complex.\n        :rtype:  int\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_23upper_bound_dimension(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("upper_bound_dimension (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_22upper_bound_dimension(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_22upper_bound_dimension(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("upper_bound_dimension", 0);

  /* "../../cython/cython/simplex_tree.pyx":191
 *         :rtype:  int
 *         """
 *         return self.thisptr.upper_bound_dimension()             # <<<<<<<<<<<<<<
 * 
 *     def set_dimension(self, dimension):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->upper_bound_dimension()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":184
 *         return self.thisptr.dimension()
 * 
 *     def upper_bound_dimension(self):             # <<<<<<<<<<<<<<
 *         """This function returns a valid dimension upper bound of the
 *         simplicial complex.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.SimplexTree.upper_bound_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":193
 *         return self.thisptr.upper_bound_dimension()
 * 
 *     def set_dimension(self, dimension):             # <<<<<<<<<<<<<<
 *         """This function sets the dimension of the simplicial complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_25set_dimension(PyObject *__pyx_v_self, PyObject *__pyx_v_dimension); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_24set_dimension[] = "This function sets the dimension of the simplicial complex.\n\n        :param dimension: The new dimension value.\n        :type dimension: int.\n\n        .. note::\n\n            This function must be used with caution because it disables\n            dimension recomputation when required\n            (this recomputation can be triggered by\n            :func:`remove_maximal_simplex()<gudhi.SimplexTree.remove_maximal_simplex>`\n            or\n            :func:`prune_above_filtration()<gudhi.SimplexTree.prune_above_filtration>`\n            ).\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_25set_dimension(PyObject *__pyx_v_self, PyObject *__pyx_v_dimension) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_dimension (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_24set_dimension(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), ((PyObject *)__pyx_v_dimension));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_24set_dimension(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_dimension) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_dimension", 0);

  /* "../../cython/cython/simplex_tree.pyx":209
 *             ).
 *         """
 *         self.thisptr.set_dimension(<int>dimension)             # <<<<<<<<<<<<<<
 * 
 *     def find(self, simplex):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_dimension); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 209, __pyx_L1_error)
  __pyx_v_self->thisptr->set_dimension(((int)__pyx_t_1));

  /* "../../cython/cython/simplex_tree.pyx":193
 *         return self.thisptr.upper_bound_dimension()
 * 
 *     def set_dimension(self, dimension):             # <<<<<<<<<<<<<<
 *         """This function sets the dimension of the simplicial complex.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gudhi.SimplexTree.set_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":211
 *         self.thisptr.set_dimension(<int>dimension)
 * 
 *     def find(self, simplex):             # <<<<<<<<<<<<<<
 *         """This function returns if the N-simplex was found in the simplicial
 *         complex or not.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_27find(PyObject *__pyx_v_self, PyObject *__pyx_v_simplex); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_26find[] = "This function returns if the N-simplex was found in the simplicial\n        complex or not.\n\n        :param simplex: The N-simplex to find, represented by a list of vertex.\n        :type simplex: list of int.\n        :returns:  true if the simplex was found, false otherwise.\n        :rtype:  bool\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_27find(PyObject *__pyx_v_self, PyObject *__pyx_v_simplex) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_26find(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), ((PyObject *)__pyx_v_simplex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_26find(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex) {
  std::vector<int>  __pyx_v_csimplex;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("find", 0);

  /* "../../cython/cython/simplex_tree.pyx":221
 *         """
 *         cdef vector[int] csimplex
 *         for i in simplex:             # <<<<<<<<<<<<<<
 *             csimplex.push_back(i)
 *         return self.thisptr.find_simplex(csimplex)
 */
  if (likely(PyList_CheckExact(__pyx_v_simplex)) || PyTuple_CheckExact(__pyx_v_simplex)) {
    __pyx_t_1 = __pyx_v_simplex; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_simplex); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 221, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 221, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 221, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 221, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 221, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 221, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../cython/cython/simplex_tree.pyx":222
 *         cdef vector[int] csimplex
 *         for i in simplex:
 *             csimplex.push_back(i)             # <<<<<<<<<<<<<<
 *         return self.thisptr.find_simplex(csimplex)
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 222, __pyx_L1_error)
    try {
      __pyx_v_csimplex.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 222, __pyx_L1_error)
    }

    /* "../../cython/cython/simplex_tree.pyx":221
 *         """
 *         cdef vector[int] csimplex
 *         for i in simplex:             # <<<<<<<<<<<<<<
 *             csimplex.push_back(i)
 *         return self.thisptr.find_simplex(csimplex)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/simplex_tree.pyx":223
 *         for i in simplex:
 *             csimplex.push_back(i)
 *         return self.thisptr.find_simplex(csimplex)             # <<<<<<<<<<<<<<
 * 
 *     def insert(self, simplex, filtration=0.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->find_simplex(__pyx_v_csimplex)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":211
 *         self.thisptr.set_dimension(<int>dimension)
 * 
 *     def find(self, simplex):             # <<<<<<<<<<<<<<
 *         """This function returns if the N-simplex was found in the simplicial
 *         complex or not.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gudhi.SimplexTree.find", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":225
 *         return self.thisptr.find_simplex(csimplex)
 * 
 *     def insert(self, simplex, filtration=0.0):             # <<<<<<<<<<<<<<
 *         """This function inserts the given N-simplex and its subfaces with the
 *         given filtration value (default value is '0.0'). If some of those
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_29insert(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_28insert[] = "This function inserts the given N-simplex and its subfaces with the\n        given filtration value (default value is '0.0'). If some of those\n        simplices are already present with a higher filtration value, their\n        filtration value is lowered.\n\n        :param simplex: The N-simplex to insert, represented by a list of\n            vertex.\n        :type simplex: list of int.\n        :param filtration: The filtration value of the simplex.\n        :type filtration: float.\n        :returns:  true if the simplex was not yet in the complex, false\n            otherwise (whatever its original filtration value).\n        :rtype:  bool\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_29insert(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_simplex = 0;
  PyObject *__pyx_v_filtration = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_simplex,&__pyx_n_s_filtration,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_float_0_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_simplex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filtration);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insert") < 0)) __PYX_ERR(3, 225, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_simplex = values[0];
    __pyx_v_filtration = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 225, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.SimplexTree.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_28insert(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), __pyx_v_simplex, __pyx_v_filtration);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_28insert(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex, PyObject *__pyx_v_filtration) {
  std::vector<int>  __pyx_v_csimplex;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("insert", 0);

  /* "../../cython/cython/simplex_tree.pyx":241
 *         """
 *         cdef vector[int] csimplex
 *         for i in simplex:             # <<<<<<<<<<<<<<
 *             csimplex.push_back(i)
 *         return self.thisptr.insert_simplex_and_subfaces(csimplex,
 */
  if (likely(PyList_CheckExact(__pyx_v_simplex)) || PyTuple_CheckExact(__pyx_v_simplex)) {
    __pyx_t_1 = __pyx_v_simplex; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_simplex); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 241, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 241, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 241, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 241, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 241, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 241, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../cython/cython/simplex_tree.pyx":242
 *         cdef vector[int] csimplex
 *         for i in simplex:
 *             csimplex.push_back(i)             # <<<<<<<<<<<<<<
 *         return self.thisptr.insert_simplex_and_subfaces(csimplex,
 *                                                         <double>filtration)
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 242, __pyx_L1_error)
    try {
      __pyx_v_csimplex.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 242, __pyx_L1_error)
    }

    /* "../../cython/cython/simplex_tree.pyx":241
 *         """
 *         cdef vector[int] csimplex
 *         for i in simplex:             # <<<<<<<<<<<<<<
 *             csimplex.push_back(i)
 *         return self.thisptr.insert_simplex_and_subfaces(csimplex,
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/simplex_tree.pyx":243
 *         for i in simplex:
 *             csimplex.push_back(i)
 *         return self.thisptr.insert_simplex_and_subfaces(csimplex,             # <<<<<<<<<<<<<<
 *                                                         <double>filtration)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "../../cython/cython/simplex_tree.pyx":244
 *             csimplex.push_back(i)
 *         return self.thisptr.insert_simplex_and_subfaces(csimplex,
 *                                                         <double>filtration)             # <<<<<<<<<<<<<<
 * 
 *     def get_filtration(self):
 */
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_filtration); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 244, __pyx_L1_error)

  /* "../../cython/cython/simplex_tree.pyx":243
 *         for i in simplex:
 *             csimplex.push_back(i)
 *         return self.thisptr.insert_simplex_and_subfaces(csimplex,             # <<<<<<<<<<<<<<
 *                                                         <double>filtration)
 * 
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->insert_simplex_and_subfaces(__pyx_v_csimplex, ((double)__pyx_t_6))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":225
 *         return self.thisptr.find_simplex(csimplex)
 * 
 *     def insert(self, simplex, filtration=0.0):             # <<<<<<<<<<<<<<
 *         """This function inserts the given N-simplex and its subfaces with the
 *         given filtration value (default value is '0.0'). If some of those
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gudhi.SimplexTree.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":246
 *                                                         <double>filtration)
 * 
 *     def get_filtration(self):             # <<<<<<<<<<<<<<
 *         """This function returns a list of all simplices with their given
 *         filtration values.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_31get_filtration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_30get_filtration[] = "This function returns a list of all simplices with their given\n        filtration values.\n\n        :returns:  The simplices sorted by increasing filtration values.\n        :rtype:  list of tuples(simplex, filtration)\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_31get_filtration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_filtration (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_30get_filtration(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_30get_filtration(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  std::vector<std::pair<std::vector<int> ,double> >  __pyx_v_filtration;
  PyObject *__pyx_v_ct = NULL;
  std::pair<std::vector<int> ,double>  __pyx_v_filtered_complex;
  PyObject *__pyx_v_v = NULL;
  int __pyx_v_vertex;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::pair<std::vector<int> ,double> > ::iterator __pyx_t_2;
  std::pair<std::vector<int> ,double>  __pyx_t_3;
  std::vector<int> ::iterator __pyx_t_4;
  std::vector<int>  *__pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("get_filtration", 0);

  /* "../../cython/cython/simplex_tree.pyx":254
 *         """
 *         cdef vector[pair[vector[int], double]] filtration \
 *             = self.thisptr.get_filtration()             # <<<<<<<<<<<<<<
 *         ct = []
 *         for filtered_complex in filtration:
 */
  __pyx_v_filtration = __pyx_v_self->thisptr->get_filtration();

  /* "../../cython/cython/simplex_tree.pyx":255
 *         cdef vector[pair[vector[int], double]] filtration \
 *             = self.thisptr.get_filtration()
 *         ct = []             # <<<<<<<<<<<<<<
 *         for filtered_complex in filtration:
 *             v = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ct = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../cython/cython/simplex_tree.pyx":256
 *             = self.thisptr.get_filtration()
 *         ct = []
 *         for filtered_complex in filtration:             # <<<<<<<<<<<<<<
 *             v = []
 *             for vertex in filtered_complex.first:
 */
  __pyx_t_2 = __pyx_v_filtration.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_filtration.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_filtered_complex = __pyx_t_3;

    /* "../../cython/cython/simplex_tree.pyx":257
 *         ct = []
 *         for filtered_complex in filtration:
 *             v = []             # <<<<<<<<<<<<<<
 *             for vertex in filtered_complex.first:
 *                 v.append(vertex)
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "../../cython/cython/simplex_tree.pyx":258
 *         for filtered_complex in filtration:
 *             v = []
 *             for vertex in filtered_complex.first:             # <<<<<<<<<<<<<<
 *                 v.append(vertex)
 *             ct.append((v, filtered_complex.second))
 */
    __pyx_t_5 = &__pyx_v_filtered_complex.first;
    __pyx_t_4 = __pyx_t_5->begin();
    for (;;) {
      if (!(__pyx_t_4 != __pyx_t_5->end())) break;
      __pyx_t_6 = *__pyx_t_4;
      ++__pyx_t_4;
      __pyx_v_vertex = __pyx_t_6;

      /* "../../cython/cython/simplex_tree.pyx":259
 *             v = []
 *             for vertex in filtered_complex.first:
 *                 v.append(vertex)             # <<<<<<<<<<<<<<
 *             ct.append((v, filtered_complex.second))
 *         return ct
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_vertex); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_v, __pyx_t_1); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(3, 259, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "../../cython/cython/simplex_tree.pyx":258
 *         for filtered_complex in filtration:
 *             v = []
 *             for vertex in filtered_complex.first:             # <<<<<<<<<<<<<<
 *                 v.append(vertex)
 *             ct.append((v, filtered_complex.second))
 */
    }

    /* "../../cython/cython/simplex_tree.pyx":260
 *             for vertex in filtered_complex.first:
 *                 v.append(vertex)
 *             ct.append((v, filtered_complex.second))             # <<<<<<<<<<<<<<
 *         return ct
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_filtered_complex.second); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_v);
    __Pyx_GIVEREF(__pyx_v_v);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_v);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ct, __pyx_t_8); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(3, 260, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "../../cython/cython/simplex_tree.pyx":256
 *             = self.thisptr.get_filtration()
 *         ct = []
 *         for filtered_complex in filtration:             # <<<<<<<<<<<<<<
 *             v = []
 *             for vertex in filtered_complex.first:
 */
  }

  /* "../../cython/cython/simplex_tree.pyx":261
 *                 v.append(vertex)
 *             ct.append((v, filtered_complex.second))
 *         return ct             # <<<<<<<<<<<<<<
 * 
 *     def get_skeleton(self, dimension):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ct);
  __pyx_r = __pyx_v_ct;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":246
 *                                                         <double>filtration)
 * 
 *     def get_filtration(self):             # <<<<<<<<<<<<<<
 *         """This function returns a list of all simplices with their given
 *         filtration values.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gudhi.SimplexTree.get_filtration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ct);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":263
 *         return ct
 * 
 *     def get_skeleton(self, dimension):             # <<<<<<<<<<<<<<
 *         """This function returns the (simplices of the) skeleton of a maximum
 *         given dimension.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_33get_skeleton(PyObject *__pyx_v_self, PyObject *__pyx_v_dimension); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_32get_skeleton[] = "This function returns the (simplices of the) skeleton of a maximum\n        given dimension.\n\n        :param dimension: The skeleton dimension value.\n        :type dimension: int.\n        :returns:  The (simplices of the) skeleton of a maximum dimension.\n        :rtype:  list of tuples(simplex, filtration)\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_33get_skeleton(PyObject *__pyx_v_self, PyObject *__pyx_v_dimension) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_skeleton (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_32get_skeleton(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), ((PyObject *)__pyx_v_dimension));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_32get_skeleton(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_dimension) {
  std::vector<std::pair<std::vector<int> ,double> >  __pyx_v_skeleton;
  PyObject *__pyx_v_ct = NULL;
  std::pair<std::vector<int> ,double>  __pyx_v_filtered_simplex;
  PyObject *__pyx_v_v = NULL;
  int __pyx_v_vertex;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<std::pair<std::vector<int> ,double> > ::iterator __pyx_t_3;
  std::pair<std::vector<int> ,double>  __pyx_t_4;
  std::vector<int> ::iterator __pyx_t_5;
  std::vector<int>  *__pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("get_skeleton", 0);

  /* "../../cython/cython/simplex_tree.pyx":273
 *         """
 *         cdef vector[pair[vector[int], double]] skeleton \
 *             = self.thisptr.get_skeleton(<int>dimension)             # <<<<<<<<<<<<<<
 *         ct = []
 *         for filtered_simplex in skeleton:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_dimension); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 273, __pyx_L1_error)
  __pyx_v_skeleton = __pyx_v_self->thisptr->get_skeleton(((int)__pyx_t_1));

  /* "../../cython/cython/simplex_tree.pyx":274
 *         cdef vector[pair[vector[int], double]] skeleton \
 *             = self.thisptr.get_skeleton(<int>dimension)
 *         ct = []             # <<<<<<<<<<<<<<
 *         for filtered_simplex in skeleton:
 *             v = []
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ct = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "../../cython/cython/simplex_tree.pyx":275
 *             = self.thisptr.get_skeleton(<int>dimension)
 *         ct = []
 *         for filtered_simplex in skeleton:             # <<<<<<<<<<<<<<
 *             v = []
 *             for vertex in filtered_simplex.first:
 */
  __pyx_t_3 = __pyx_v_skeleton.begin();
  for (;;) {
    if (!(__pyx_t_3 != __pyx_v_skeleton.end())) break;
    __pyx_t_4 = *__pyx_t_3;
    ++__pyx_t_3;
    __pyx_v_filtered_simplex = __pyx_t_4;

    /* "../../cython/cython/simplex_tree.pyx":276
 *         ct = []
 *         for filtered_simplex in skeleton:
 *             v = []             # <<<<<<<<<<<<<<
 *             for vertex in filtered_simplex.first:
 *                 v.append(vertex)
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "../../cython/cython/simplex_tree.pyx":277
 *         for filtered_simplex in skeleton:
 *             v = []
 *             for vertex in filtered_simplex.first:             # <<<<<<<<<<<<<<
 *                 v.append(vertex)
 *             ct.append((v, filtered_simplex.second))
 */
    __pyx_t_6 = &__pyx_v_filtered_simplex.first;
    __pyx_t_5 = __pyx_t_6->begin();
    for (;;) {
      if (!(__pyx_t_5 != __pyx_t_6->end())) break;
      __pyx_t_1 = *__pyx_t_5;
      ++__pyx_t_5;
      __pyx_v_vertex = __pyx_t_1;

      /* "../../cython/cython/simplex_tree.pyx":278
 *             v = []
 *             for vertex in filtered_simplex.first:
 *                 v.append(vertex)             # <<<<<<<<<<<<<<
 *             ct.append((v, filtered_simplex.second))
 *         return ct
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_vertex); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_v, __pyx_t_2); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(3, 278, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "../../cython/cython/simplex_tree.pyx":277
 *         for filtered_simplex in skeleton:
 *             v = []
 *             for vertex in filtered_simplex.first:             # <<<<<<<<<<<<<<
 *                 v.append(vertex)
 *             ct.append((v, filtered_simplex.second))
 */
    }

    /* "../../cython/cython/simplex_tree.pyx":279
 *             for vertex in filtered_simplex.first:
 *                 v.append(vertex)
 *             ct.append((v, filtered_simplex.second))             # <<<<<<<<<<<<<<
 *         return ct
 * 
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_filtered_simplex.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_v);
    __Pyx_GIVEREF(__pyx_v_v);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_v);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ct, __pyx_t_8); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(3, 279, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "../../cython/cython/simplex_tree.pyx":275
 *             = self.thisptr.get_skeleton(<int>dimension)
 *         ct = []
 *         for filtered_simplex in skeleton:             # <<<<<<<<<<<<<<
 *             v = []
 *             for vertex in filtered_simplex.first:
 */
  }

  /* "../../cython/cython/simplex_tree.pyx":280
 *                 v.append(vertex)
 *             ct.append((v, filtered_simplex.second))
 *         return ct             # <<<<<<<<<<<<<<
 * 
 *     def get_star(self, simplex):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ct);
  __pyx_r = __pyx_v_ct;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":263
 *         return ct
 * 
 *     def get_skeleton(self, dimension):             # <<<<<<<<<<<<<<
 *         """This function returns the (simplices of the) skeleton of a maximum
 *         given dimension.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gudhi.SimplexTree.get_skeleton", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ct);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":282
 *         return ct
 * 
 *     def get_star(self, simplex):             # <<<<<<<<<<<<<<
 *         """This function returns the star of a given N-simplex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_35get_star(PyObject *__pyx_v_self, PyObject *__pyx_v_simplex); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_34get_star[] = "This function returns the star of a given N-simplex.\n\n        :param simplex: The N-simplex, represented by a list of vertex.\n        :type simplex: list of int.\n        :returns:  The (simplices of the) star of a simplex.\n        :rtype:  list of tuples(simplex, filtration)\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_35get_star(PyObject *__pyx_v_self, PyObject *__pyx_v_simplex) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_star (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_34get_star(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), ((PyObject *)__pyx_v_simplex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_34get_star(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex) {
  std::vector<int>  __pyx_v_csimplex;
  PyObject *__pyx_v_i = NULL;
  std::vector<std::pair<std::vector<int> ,double> >  __pyx_v_star;
  PyObject *__pyx_v_ct = NULL;
  std::pair<std::vector<int> ,double>  __pyx_v_filtered_simplex;
  PyObject *__pyx_v_v = NULL;
  int __pyx_v_vertex;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::vector<std::pair<std::vector<int> ,double> > ::iterator __pyx_t_6;
  std::pair<std::vector<int> ,double>  __pyx_t_7;
  std::vector<int> ::iterator __pyx_t_8;
  std::vector<int>  *__pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("get_star", 0);

  /* "../../cython/cython/simplex_tree.pyx":291
 *         """
 *         cdef vector[int] csimplex
 *         for i in simplex:             # <<<<<<<<<<<<<<
 *             csimplex.push_back(i)
 *         cdef vector[pair[vector[int], double]] star \
 */
  if (likely(PyList_CheckExact(__pyx_v_simplex)) || PyTuple_CheckExact(__pyx_v_simplex)) {
    __pyx_t_1 = __pyx_v_simplex; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_simplex); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 291, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 291, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 291, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 291, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../cython/cython/simplex_tree.pyx":292
 *         cdef vector[int] csimplex
 *         for i in simplex:
 *             csimplex.push_back(i)             # <<<<<<<<<<<<<<
 *         cdef vector[pair[vector[int], double]] star \
 *             = self.thisptr.get_star(csimplex)
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 292, __pyx_L1_error)
    try {
      __pyx_v_csimplex.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 292, __pyx_L1_error)
    }

    /* "../../cython/cython/simplex_tree.pyx":291
 *         """
 *         cdef vector[int] csimplex
 *         for i in simplex:             # <<<<<<<<<<<<<<
 *             csimplex.push_back(i)
 *         cdef vector[pair[vector[int], double]] star \
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/simplex_tree.pyx":294
 *             csimplex.push_back(i)
 *         cdef vector[pair[vector[int], double]] star \
 *             = self.thisptr.get_star(csimplex)             # <<<<<<<<<<<<<<
 *         ct = []
 *         for filtered_simplex in star:
 */
  __pyx_v_star = __pyx_v_self->thisptr->get_star(__pyx_v_csimplex);

  /* "../../cython/cython/simplex_tree.pyx":295
 *         cdef vector[pair[vector[int], double]] star \
 *             = self.thisptr.get_star(csimplex)
 *         ct = []             # <<<<<<<<<<<<<<
 *         for filtered_simplex in star:
 *             v = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ct = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../cython/cython/simplex_tree.pyx":296
 *             = self.thisptr.get_star(csimplex)
 *         ct = []
 *         for filtered_simplex in star:             # <<<<<<<<<<<<<<
 *             v = []
 *             for vertex in filtered_simplex.first:
 */
  __pyx_t_6 = __pyx_v_star.begin();
  for (;;) {
    if (!(__pyx_t_6 != __pyx_v_star.end())) break;
    __pyx_t_7 = *__pyx_t_6;
    ++__pyx_t_6;
    __pyx_v_filtered_simplex = __pyx_t_7;

    /* "../../cython/cython/simplex_tree.pyx":297
 *         ct = []
 *         for filtered_simplex in star:
 *             v = []             # <<<<<<<<<<<<<<
 *             for vertex in filtered_simplex.first:
 *                 v.append(vertex)
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "../../cython/cython/simplex_tree.pyx":298
 *         for filtered_simplex in star:
 *             v = []
 *             for vertex in filtered_simplex.first:             # <<<<<<<<<<<<<<
 *                 v.append(vertex)
 *             ct.append((v, filtered_simplex.second))
 */
    __pyx_t_9 = &__pyx_v_filtered_simplex.first;
    __pyx_t_8 = __pyx_t_9->begin();
    for (;;) {
      if (!(__pyx_t_8 != __pyx_t_9->end())) break;
      __pyx_t_5 = *__pyx_t_8;
      ++__pyx_t_8;
      __pyx_v_vertex = __pyx_t_5;

      /* "../../cython/cython/simplex_tree.pyx":299
 *             v = []
 *             for vertex in filtered_simplex.first:
 *                 v.append(vertex)             # <<<<<<<<<<<<<<
 *             ct.append((v, filtered_simplex.second))
 *         return ct
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_vertex); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 299, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_v, __pyx_t_1); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(3, 299, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "../../cython/cython/simplex_tree.pyx":298
 *         for filtered_simplex in star:
 *             v = []
 *             for vertex in filtered_simplex.first:             # <<<<<<<<<<<<<<
 *                 v.append(vertex)
 *             ct.append((v, filtered_simplex.second))
 */
    }

    /* "../../cython/cython/simplex_tree.pyx":300
 *             for vertex in filtered_simplex.first:
 *                 v.append(vertex)
 *             ct.append((v, filtered_simplex.second))             # <<<<<<<<<<<<<<
 *         return ct
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_filtered_simplex.second); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_v);
    __Pyx_GIVEREF(__pyx_v_v);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_v);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ct, __pyx_t_4); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(3, 300, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "../../cython/cython/simplex_tree.pyx":296
 *             = self.thisptr.get_star(csimplex)
 *         ct = []
 *         for filtered_simplex in star:             # <<<<<<<<<<<<<<
 *             v = []
 *             for vertex in filtered_simplex.first:
 */
  }

  /* "../../cython/cython/simplex_tree.pyx":301
 *                 v.append(vertex)
 *             ct.append((v, filtered_simplex.second))
 *         return ct             # <<<<<<<<<<<<<<
 * 
 *     def get_cofaces(self, simplex, codimension):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ct);
  __pyx_r = __pyx_v_ct;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":282
 *         return ct
 * 
 *     def get_star(self, simplex):             # <<<<<<<<<<<<<<
 *         """This function returns the star of a given N-simplex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gudhi.SimplexTree.get_star", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_ct);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":303
 *         return ct
 * 
 *     def get_cofaces(self, simplex, codimension):             # <<<<<<<<<<<<<<
 *         """This function returns the cofaces of a given N-simplex with a
 *         given codimension.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_37get_cofaces(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_36get_cofaces[] = "This function returns the cofaces of a given N-simplex with a\n        given codimension.\n\n        :param simplex: The N-simplex, represented by a list of vertex.\n        :type simplex: list of int.\n        :param codimension: The codimension. If codimension = 0, all cofaces\n            are returned (equivalent of get_star function)\n        :type codimension: int.\n        :returns:  The (simplices of the) cofaces of a simplex\n        :rtype:  list of tuples(simplex, filtration)\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_37get_cofaces(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_simplex = 0;
  PyObject *__pyx_v_codimension = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cofaces (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_simplex,&__pyx_n_s_codimension,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_simplex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_codimension)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_cofaces", 1, 2, 2, 1); __PYX_ERR(3, 303, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_cofaces") < 0)) __PYX_ERR(3, 303, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_simplex = values[0];
    __pyx_v_codimension = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_cofaces", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 303, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.SimplexTree.get_cofaces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_36get_cofaces(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), __pyx_v_simplex, __pyx_v_codimension);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_36get_cofaces(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex, PyObject *__pyx_v_codimension) {
  std::vector<int>  __pyx_v_csimplex;
  PyObject *__pyx_v_i = NULL;
  std::vector<std::pair<std::vector<int> ,double> >  __pyx_v_cofaces;
  PyObject *__pyx_v_ct = NULL;
  std::pair<std::vector<int> ,double>  __pyx_v_filtered_simplex;
  PyObject *__pyx_v_v = NULL;
  int __pyx_v_vertex;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::vector<std::pair<std::vector<int> ,double> > ::iterator __pyx_t_6;
  std::pair<std::vector<int> ,double>  __pyx_t_7;
  std::vector<int> ::iterator __pyx_t_8;
  std::vector<int>  *__pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("get_cofaces", 0);

  /* "../../cython/cython/simplex_tree.pyx":316
 *         """
 *         cdef vector[int] csimplex
 *         for i in simplex:             # <<<<<<<<<<<<<<
 *             csimplex.push_back(i)
 *         cdef vector[pair[vector[int], double]] cofaces \
 */
  if (likely(PyList_CheckExact(__pyx_v_simplex)) || PyTuple_CheckExact(__pyx_v_simplex)) {
    __pyx_t_1 = __pyx_v_simplex; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_simplex); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 316, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 316, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 316, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 316, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 316, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 316, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../cython/cython/simplex_tree.pyx":317
 *         cdef vector[int] csimplex
 *         for i in simplex:
 *             csimplex.push_back(i)             # <<<<<<<<<<<<<<
 *         cdef vector[pair[vector[int], double]] cofaces \
 *             = self.thisptr.get_cofaces(csimplex, <int>codimension)
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 317, __pyx_L1_error)
    try {
      __pyx_v_csimplex.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 317, __pyx_L1_error)
    }

    /* "../../cython/cython/simplex_tree.pyx":316
 *         """
 *         cdef vector[int] csimplex
 *         for i in simplex:             # <<<<<<<<<<<<<<
 *             csimplex.push_back(i)
 *         cdef vector[pair[vector[int], double]] cofaces \
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/simplex_tree.pyx":319
 *             csimplex.push_back(i)
 *         cdef vector[pair[vector[int], double]] cofaces \
 *             = self.thisptr.get_cofaces(csimplex, <int>codimension)             # <<<<<<<<<<<<<<
 *         ct = []
 *         for filtered_simplex in cofaces:
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_codimension); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 319, __pyx_L1_error)
  __pyx_v_cofaces = __pyx_v_self->thisptr->get_cofaces(__pyx_v_csimplex, ((int)__pyx_t_5));

  /* "../../cython/cython/simplex_tree.pyx":320
 *         cdef vector[pair[vector[int], double]] cofaces \
 *             = self.thisptr.get_cofaces(csimplex, <int>codimension)
 *         ct = []             # <<<<<<<<<<<<<<
 *         for filtered_simplex in cofaces:
 *             v = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ct = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../cython/cython/simplex_tree.pyx":321
 *             = self.thisptr.get_cofaces(csimplex, <int>codimension)
 *         ct = []
 *         for filtered_simplex in cofaces:             # <<<<<<<<<<<<<<
 *             v = []
 *             for vertex in filtered_simplex.first:
 */
  __pyx_t_6 = __pyx_v_cofaces.begin();
  for (;;) {
    if (!(__pyx_t_6 != __pyx_v_cofaces.end())) break;
    __pyx_t_7 = *__pyx_t_6;
    ++__pyx_t_6;
    __pyx_v_filtered_simplex = __pyx_t_7;

    /* "../../cython/cython/simplex_tree.pyx":322
 *         ct = []
 *         for filtered_simplex in cofaces:
 *             v = []             # <<<<<<<<<<<<<<
 *             for vertex in filtered_simplex.first:
 *                 v.append(vertex)
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "../../cython/cython/simplex_tree.pyx":323
 *         for filtered_simplex in cofaces:
 *             v = []
 *             for vertex in filtered_simplex.first:             # <<<<<<<<<<<<<<
 *                 v.append(vertex)
 *             ct.append((v, filtered_simplex.second))
 */
    __pyx_t_9 = &__pyx_v_filtered_simplex.first;
    __pyx_t_8 = __pyx_t_9->begin();
    for (;;) {
      if (!(__pyx_t_8 != __pyx_t_9->end())) break;
      __pyx_t_5 = *__pyx_t_8;
      ++__pyx_t_8;
      __pyx_v_vertex = __pyx_t_5;

      /* "../../cython/cython/simplex_tree.pyx":324
 *             v = []
 *             for vertex in filtered_simplex.first:
 *                 v.append(vertex)             # <<<<<<<<<<<<<<
 *             ct.append((v, filtered_simplex.second))
 *         return ct
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_vertex); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_v, __pyx_t_1); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(3, 324, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "../../cython/cython/simplex_tree.pyx":323
 *         for filtered_simplex in cofaces:
 *             v = []
 *             for vertex in filtered_simplex.first:             # <<<<<<<<<<<<<<
 *                 v.append(vertex)
 *             ct.append((v, filtered_simplex.second))
 */
    }

    /* "../../cython/cython/simplex_tree.pyx":325
 *             for vertex in filtered_simplex.first:
 *                 v.append(vertex)
 *             ct.append((v, filtered_simplex.second))             # <<<<<<<<<<<<<<
 *         return ct
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_filtered_simplex.second); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_v);
    __Pyx_GIVEREF(__pyx_v_v);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_v);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ct, __pyx_t_4); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(3, 325, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "../../cython/cython/simplex_tree.pyx":321
 *             = self.thisptr.get_cofaces(csimplex, <int>codimension)
 *         ct = []
 *         for filtered_simplex in cofaces:             # <<<<<<<<<<<<<<
 *             v = []
 *             for vertex in filtered_simplex.first:
 */
  }

  /* "../../cython/cython/simplex_tree.pyx":326
 *                 v.append(vertex)
 *             ct.append((v, filtered_simplex.second))
 *         return ct             # <<<<<<<<<<<<<<
 * 
 *     def remove_maximal_simplex(self, simplex):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ct);
  __pyx_r = __pyx_v_ct;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":303
 *         return ct
 * 
 *     def get_cofaces(self, simplex, codimension):             # <<<<<<<<<<<<<<
 *         """This function returns the cofaces of a given N-simplex with a
 *         given codimension.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gudhi.SimplexTree.get_cofaces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_ct);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":328
 *         return ct
 * 
 *     def remove_maximal_simplex(self, simplex):             # <<<<<<<<<<<<<<
 *         """This function removes a given maximal N-simplex from the simplicial
 *         complex.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_39remove_maximal_simplex(PyObject *__pyx_v_self, PyObject *__pyx_v_simplex); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_38remove_maximal_simplex[] = "This function removes a given maximal N-simplex from the simplicial\n        complex.\n\n        :param simplex: The N-simplex, represented by a list of vertex.\n        :type simplex: list of int.\n\n        .. note::\n\n            Be aware that removing is shifting data in a flat_map\n            (:func:`initialize_filtration()<gudhi.SimplexTree.initialize_filtration>` to be done).\n\n        .. note::\n\n            The dimension of the simplicial complex may be lower after calling\n            remove_maximal_simplex than it was before. However,\n            :func:`upper_bound_dimension()<gudhi.SimplexTree.upper_bound_dimension>`\n            method will return the old value, which\n            remains a valid upper bound. If you care, you can call\n            :func:`dimension()<gudhi.SimplexTree.dimension>`\n            to recompute the exact dimension.\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_39remove_maximal_simplex(PyObject *__pyx_v_self, PyObject *__pyx_v_simplex) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_maximal_simplex (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_38remove_maximal_simplex(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), ((PyObject *)__pyx_v_simplex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_38remove_maximal_simplex(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_simplex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  __Pyx_RefNannySetupContext("remove_maximal_simplex", 0);

  /* "../../cython/cython/simplex_tree.pyx":350
 *             to recompute the exact dimension.
 *         """
 *         self.thisptr.remove_maximal_simplex(simplex)             # <<<<<<<<<<<<<<
 * 
 *     def prune_above_filtration(self, filtration):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_simplex); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 350, __pyx_L1_error)
  __pyx_v_self->thisptr->remove_maximal_simplex(__pyx_t_1);

  /* "../../cython/cython/simplex_tree.pyx":328
 *         return ct
 * 
 *     def remove_maximal_simplex(self, simplex):             # <<<<<<<<<<<<<<
 *         """This function removes a given maximal N-simplex from the simplicial
 *         complex.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gudhi.SimplexTree.remove_maximal_simplex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":352
 *         self.thisptr.remove_maximal_simplex(simplex)
 * 
 *     def prune_above_filtration(self, filtration):             # <<<<<<<<<<<<<<
 *         """Prune above filtration value given as parameter.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_41prune_above_filtration(PyObject *__pyx_v_self, PyObject *__pyx_v_filtration); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_40prune_above_filtration[] = "Prune above filtration value given as parameter.\n\n        :param filtration: Maximum threshold value.\n        :type filtration: float.\n        :returns: The filtration modification information.\n        :rtype: bint\n\n\n        .. note::\n\n            Some simplex tree functions require the filtration to be valid.\n            prune_above_filtration function is not launching\n            :func:`initialize_filtration()<gudhi.SimplexTree.initialize_filtration>`\n            but returns the filtration modification\n            information. If the complex has changed , please call\n            :func:`initialize_filtration()<gudhi.SimplexTree.initialize_filtration>`\n            to recompute it.\n\n        .. note::\n\n            Note that the dimension of the simplicial complex may be lower\n            after calling\n            :func:`prune_above_filtration()<gudhi.SimplexTree.prune_above_filtration>`\n            than it was before. However,\n            :func:`upper_bound_dimension()<gudhi.SimplexTree.upper_bound_dimension>`\n            will return the old value, which remains a\n            valid upper bound. If you care, you can call\n            :func:`dimension()<gudhi.SimplexTree.dimension>`\n            method to recompute the exact dimension.\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_41prune_above_filtration(PyObject *__pyx_v_self, PyObject *__pyx_v_filtration) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_above_filtration (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_40prune_above_filtration(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), ((PyObject *)__pyx_v_filtration));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_40prune_above_filtration(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_filtration) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("prune_above_filtration", 0);

  /* "../../cython/cython/simplex_tree.pyx":383
 *             method to recompute the exact dimension.
 *         """
 *         return self.thisptr.prune_above_filtration(filtration)             # <<<<<<<<<<<<<<
 * 
 *     def expansion(self, max_dim):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_filtration); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 383, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->prune_above_filtration(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":352
 *         self.thisptr.remove_maximal_simplex(simplex)
 * 
 *     def prune_above_filtration(self, filtration):             # <<<<<<<<<<<<<<
 *         """Prune above filtration value given as parameter.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gudhi.SimplexTree.prune_above_filtration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":385
 *         return self.thisptr.prune_above_filtration(filtration)
 * 
 *     def expansion(self, max_dim):             # <<<<<<<<<<<<<<
 *         """Expands the Simplex_tree containing only its one skeleton
 *         until dimension max_dim.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_43expansion(PyObject *__pyx_v_self, PyObject *__pyx_v_max_dim); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_42expansion[] = "Expands the Simplex_tree containing only its one skeleton\n        until dimension max_dim.\n\n        The expanded simplicial complex until dimension :math:`d`\n        attached to a graph :math:`G` is the maximal simplicial complex of\n        dimension at most :math:`d` admitting the graph :math:`G` as\n        :math:`1`-skeleton.\n        The filtration value assigned to a simplex is the maximal filtration\n        value of one of its edges.\n\n        The Simplex_tree must contain no simplex of dimension bigger than\n        1 when calling the method.\n\n        :param max_dim: The maximal dimension.\n        :type max_dim: int.\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_43expansion(PyObject *__pyx_v_self, PyObject *__pyx_v_max_dim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("expansion (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_42expansion(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), ((PyObject *)__pyx_v_max_dim));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_42expansion(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_max_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("expansion", 0);

  /* "../../cython/cython/simplex_tree.pyx":402
 *         :type max_dim: int.
 *         """
 *         self.thisptr.expansion(max_dim)             # <<<<<<<<<<<<<<
 * 
 *     def make_filtration_non_decreasing(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_max_dim); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 402, __pyx_L1_error)
  __pyx_v_self->thisptr->expansion(__pyx_t_1);

  /* "../../cython/cython/simplex_tree.pyx":385
 *         return self.thisptr.prune_above_filtration(filtration)
 * 
 *     def expansion(self, max_dim):             # <<<<<<<<<<<<<<
 *         """Expands the Simplex_tree containing only its one skeleton
 *         until dimension max_dim.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gudhi.SimplexTree.expansion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":404
 *         self.thisptr.expansion(max_dim)
 * 
 *     def make_filtration_non_decreasing(self):             # <<<<<<<<<<<<<<
 *         """This function ensures that each simplex has a higher filtration
 *         value than its faces by increasing the filtration values.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_45make_filtration_non_decreasing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_44make_filtration_non_decreasing[] = "This function ensures that each simplex has a higher filtration\n        value than its faces by increasing the filtration values.\n\n        :returns: The filtration modification information.\n        :rtype: bint\n\n\n        .. note::\n\n            Some simplex tree functions require the filtration to be valid.\n            make_filtration_non_decreasing function is not launching\n            :func:`initialize_filtration()<gudhi.SimplexTree.initialize_filtration>`\n            but returns the filtration modification\n            information. If the complex has changed , please call\n            :func:`initialize_filtration()<gudhi.SimplexTree.initialize_filtration>`\n            to recompute it.\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_45make_filtration_non_decreasing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_filtration_non_decreasing (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_44make_filtration_non_decreasing(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_44make_filtration_non_decreasing(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("make_filtration_non_decreasing", 0);

  /* "../../cython/cython/simplex_tree.pyx":422
 *             to recompute it.
 *         """
 *         return self.thisptr.make_filtration_non_decreasing()             # <<<<<<<<<<<<<<
 * 
 *     def persistence(self, homology_coeff_field=11, min_persistence=0, persistence_dim_max = False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->make_filtration_non_decreasing()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":404
 *         self.thisptr.expansion(max_dim)
 * 
 *     def make_filtration_non_decreasing(self):             # <<<<<<<<<<<<<<
 *         """This function ensures that each simplex has a higher filtration
 *         value than its faces by increasing the filtration values.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.SimplexTree.make_filtration_non_decreasing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":424
 *         return self.thisptr.make_filtration_non_decreasing()
 * 
 *     def persistence(self, homology_coeff_field=11, min_persistence=0, persistence_dim_max = False):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence of the simplicial complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_47persistence(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_46persistence[] = "This function returns the persistence of the simplicial complex.\n\n        :param homology_coeff_field: The homology coefficient field. Must be a\n            prime number. Default value is 11.\n        :type homology_coeff_field: int.\n        :param min_persistence: The minimum persistence value to take into\n            account (strictly greater than min_persistence). Default value is\n            0.0.\n            Sets min_persistence to -1.0 to see all values.\n        :type min_persistence: float.\n        :returns: The persistence of the simplicial complex.\n        :rtype:  list of pairs(dimension, pair(birth, death))\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_47persistence(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homology_coeff_field = 0;
  PyObject *__pyx_v_min_persistence = 0;
  PyObject *__pyx_v_persistence_dim_max = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("persistence (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homology_coeff_field,&__pyx_n_s_min_persistence,&__pyx_n_s_persistence_dim_max,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_int_11);
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_homology_coeff_field);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_persistence);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_persistence_dim_max);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "persistence") < 0)) __PYX_ERR(3, 424, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_homology_coeff_field = values[0];
    __pyx_v_min_persistence = values[1];
    __pyx_v_persistence_dim_max = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("persistence", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 424, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.SimplexTree.persistence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_46persistence(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), __pyx_v_homology_coeff_field, __pyx_v_min_persistence, __pyx_v_persistence_dim_max);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_46persistence(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_homology_coeff_field, PyObject *__pyx_v_min_persistence, PyObject *__pyx_v_persistence_dim_max) {
  std::vector<std::pair<int,std::pair<double,double> > >  __pyx_v_persistence_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("persistence", 0);

  /* "../../cython/cython/simplex_tree.pyx":438
 *         :rtype:  list of pairs(dimension, pair(birth, death))
 *         """
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.pcohptr
 *         self.pcohptr = new Simplex_tree_persistence_interface(self.thisptr, persistence_dim_max)
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/simplex_tree.pyx":439
 *         """
 *         if self.pcohptr != NULL:
 *             del self.pcohptr             # <<<<<<<<<<<<<<
 *         self.pcohptr = new Simplex_tree_persistence_interface(self.thisptr, persistence_dim_max)
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 */
    delete __pyx_v_self->pcohptr;

    /* "../../cython/cython/simplex_tree.pyx":438
 *         :rtype:  list of pairs(dimension, pair(birth, death))
 *         """
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.pcohptr
 *         self.pcohptr = new Simplex_tree_persistence_interface(self.thisptr, persistence_dim_max)
 */
  }

  /* "../../cython/cython/simplex_tree.pyx":440
 *         if self.pcohptr != NULL:
 *             del self.pcohptr
 *         self.pcohptr = new Simplex_tree_persistence_interface(self.thisptr, persistence_dim_max)             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 *         if self.pcohptr != NULL:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_persistence_dim_max); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 440, __pyx_L1_error)
  __pyx_v_self->pcohptr = new Gudhi::Persistent_cohomology_interface<Gudhi::Simplex_tree<Gudhi::Simplex_tree_options_full_featured>>(__pyx_v_self->thisptr, __pyx_t_2);

  /* "../../cython/cython/simplex_tree.pyx":442
 *         self.pcohptr = new Simplex_tree_persistence_interface(self.thisptr, persistence_dim_max)
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             persistence_result = self.pcohptr.get_persistence(homology_coeff_field, min_persistence)
 *         return persistence_result
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/simplex_tree.pyx":443
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 *         if self.pcohptr != NULL:
 *             persistence_result = self.pcohptr.get_persistence(homology_coeff_field, min_persistence)             # <<<<<<<<<<<<<<
 *         return persistence_result
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_homology_coeff_field); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 443, __pyx_L1_error)
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_min_persistence); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 443, __pyx_L1_error)
    __pyx_v_persistence_result = __pyx_v_self->pcohptr->get_persistence(__pyx_t_3, __pyx_t_4);

    /* "../../cython/cython/simplex_tree.pyx":442
 *         self.pcohptr = new Simplex_tree_persistence_interface(self.thisptr, persistence_dim_max)
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             persistence_result = self.pcohptr.get_persistence(homology_coeff_field, min_persistence)
 *         return persistence_result
 */
  }

  /* "../../cython/cython/simplex_tree.pyx":444
 *         if self.pcohptr != NULL:
 *             persistence_result = self.pcohptr.get_persistence(homology_coeff_field, min_persistence)
 *         return persistence_result             # <<<<<<<<<<<<<<
 * 
 *     def betti_numbers(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(__pyx_v_persistence_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":424
 *         return self.thisptr.make_filtration_non_decreasing()
 * 
 *     def persistence(self, homology_coeff_field=11, min_persistence=0, persistence_dim_max = False):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence of the simplicial complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gudhi.SimplexTree.persistence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":446
 *         return persistence_result
 * 
 *     def betti_numbers(self):             # <<<<<<<<<<<<<<
 *         """This function returns the Betti numbers of the simplicial complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_49betti_numbers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_48betti_numbers[] = "This function returns the Betti numbers of the simplicial complex.\n\n        :returns: The Betti numbers ([B0, B1, ..., Bn]).\n        :rtype:  list of int\n\n        :note: betti_numbers function requires\n            :func:`persistence()<gudhi.SimplexTree.persistence>`\n            function to be launched first.\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_49betti_numbers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("betti_numbers (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_48betti_numbers(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_48betti_numbers(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  std::vector<int>  __pyx_v_bn_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("betti_numbers", 0);

  /* "../../cython/cython/simplex_tree.pyx":457
 *         """
 *         cdef vector[int] bn_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             bn_result = self.pcohptr.betti_numbers()
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/simplex_tree.pyx":458
 *         cdef vector[int] bn_result
 *         if self.pcohptr != NULL:
 *             bn_result = self.pcohptr.betti_numbers()             # <<<<<<<<<<<<<<
 *         else:
 *             print("betti_numbers function requires persistence function"
 */
    __pyx_v_bn_result = __pyx_v_self->pcohptr->betti_numbers();

    /* "../../cython/cython/simplex_tree.pyx":457
 *         """
 *         cdef vector[int] bn_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             bn_result = self.pcohptr.betti_numbers()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/simplex_tree.pyx":460
 *             bn_result = self.pcohptr.betti_numbers()
 *         else:
 *             print("betti_numbers function requires persistence function"             # <<<<<<<<<<<<<<
 *                   " to be launched first.")
 *         return bn_result
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_betti_numbers_function_requires) < 0) __PYX_ERR(3, 460, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "../../cython/cython/simplex_tree.pyx":462
 *             print("betti_numbers function requires persistence function"
 *                   " to be launched first.")
 *         return bn_result             # <<<<<<<<<<<<<<
 * 
 *     def persistent_betti_numbers(self, from_value, to_value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_bn_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":446
 *         return persistence_result
 * 
 *     def betti_numbers(self):             # <<<<<<<<<<<<<<
 *         """This function returns the Betti numbers of the simplicial complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gudhi.SimplexTree.betti_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":464
 *         return bn_result
 * 
 *     def persistent_betti_numbers(self, from_value, to_value):             # <<<<<<<<<<<<<<
 *         """This function returns the persistent Betti numbers of the
 *         simplicial complex.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_51persistent_betti_numbers(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_50persistent_betti_numbers[] = "This function returns the persistent Betti numbers of the\n        simplicial complex.\n\n        :param from_value: The persistence birth limit to be added in the\n            numbers (persistent birth <= from_value).\n        :type from_value: float.\n        :param to_value: The persistence death limit to be added in the\n            numbers (persistent death > to_value).\n        :type to_value: float.\n\n        :returns: The persistent Betti numbers ([B0, B1, ..., Bn]).\n        :rtype:  list of int\n\n        :note: persistent_betti_numbers function requires\n            :func:`persistence()<gudhi.SimplexTree.persistence>`\n            function to be launched first.\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_51persistent_betti_numbers(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_from_value = 0;
  PyObject *__pyx_v_to_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("persistent_betti_numbers (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_value,&__pyx_n_s_to_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_from_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_to_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("persistent_betti_numbers", 1, 2, 2, 1); __PYX_ERR(3, 464, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "persistent_betti_numbers") < 0)) __PYX_ERR(3, 464, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_from_value = values[0];
    __pyx_v_to_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("persistent_betti_numbers", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 464, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.SimplexTree.persistent_betti_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_50persistent_betti_numbers(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), __pyx_v_from_value, __pyx_v_to_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_50persistent_betti_numbers(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_from_value, PyObject *__pyx_v_to_value) {
  std::vector<int>  __pyx_v_pbn_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("persistent_betti_numbers", 0);

  /* "../../cython/cython/simplex_tree.pyx":483
 *         """
 *         cdef vector[int] pbn_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             pbn_result = self.pcohptr.persistent_betti_numbers(<double>from_value, <double>to_value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/simplex_tree.pyx":484
 *         cdef vector[int] pbn_result
 *         if self.pcohptr != NULL:
 *             pbn_result = self.pcohptr.persistent_betti_numbers(<double>from_value, <double>to_value)             # <<<<<<<<<<<<<<
 *         else:
 *             print("persistent_betti_numbers function requires persistence function"
 */
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_from_value); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 484, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_to_value); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 484, __pyx_L1_error)
    __pyx_v_pbn_result = __pyx_v_self->pcohptr->persistent_betti_numbers(((double)__pyx_t_2), ((double)__pyx_t_3));

    /* "../../cython/cython/simplex_tree.pyx":483
 *         """
 *         cdef vector[int] pbn_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             pbn_result = self.pcohptr.persistent_betti_numbers(<double>from_value, <double>to_value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/simplex_tree.pyx":486
 *             pbn_result = self.pcohptr.persistent_betti_numbers(<double>from_value, <double>to_value)
 *         else:
 *             print("persistent_betti_numbers function requires persistence function"             # <<<<<<<<<<<<<<
 *                   " to be launched first.")
 *         return pbn_result
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_persistent_betti_numbers_functio) < 0) __PYX_ERR(3, 486, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "../../cython/cython/simplex_tree.pyx":488
 *             print("persistent_betti_numbers function requires persistence function"
 *                   " to be launched first.")
 *         return pbn_result             # <<<<<<<<<<<<<<
 * 
 *     def persistence_intervals_in_dimension(self, dimension):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_vector_to_py_int(__pyx_v_pbn_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":464
 *         return bn_result
 * 
 *     def persistent_betti_numbers(self, from_value, to_value):             # <<<<<<<<<<<<<<
 *         """This function returns the persistent Betti numbers of the
 *         simplicial complex.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gudhi.SimplexTree.persistent_betti_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":490
 *         return pbn_result
 * 
 *     def persistence_intervals_in_dimension(self, dimension):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence intervals of the simplicial
 *         complex in a specific dimension.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_53persistence_intervals_in_dimension(PyObject *__pyx_v_self, PyObject *__pyx_v_dimension); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_52persistence_intervals_in_dimension[] = "This function returns the persistence intervals of the simplicial\n        complex in a specific dimension.\n\n        :param dimension: The specific dimension.\n        :type dimension: int.\n        :returns: The persistence intervals.\n        :rtype:  list of pair of float\n\n        :note: intervals_in_dim function requires\n            :func:`persistence()<gudhi.SimplexTree.persistence>`\n            function to be launched first.\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_53persistence_intervals_in_dimension(PyObject *__pyx_v_self, PyObject *__pyx_v_dimension) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("persistence_intervals_in_dimension (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_52persistence_intervals_in_dimension(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), ((PyObject *)__pyx_v_dimension));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_52persistence_intervals_in_dimension(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_dimension) {
  std::vector<std::pair<double,double> >  __pyx_v_intervals_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("persistence_intervals_in_dimension", 0);

  /* "../../cython/cython/simplex_tree.pyx":504
 *         """
 *         cdef vector[pair[double,double]] intervals_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             intervals_result = self.pcohptr.intervals_in_dimension(dimension)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/simplex_tree.pyx":505
 *         cdef vector[pair[double,double]] intervals_result
 *         if self.pcohptr != NULL:
 *             intervals_result = self.pcohptr.intervals_in_dimension(dimension)             # <<<<<<<<<<<<<<
 *         else:
 *             print("intervals_in_dim function requires persistence function"
 */
    __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_dimension); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 505, __pyx_L1_error)
    __pyx_v_intervals_result = __pyx_v_self->pcohptr->intervals_in_dimension(__pyx_t_2);

    /* "../../cython/cython/simplex_tree.pyx":504
 *         """
 *         cdef vector[pair[double,double]] intervals_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             intervals_result = self.pcohptr.intervals_in_dimension(dimension)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/simplex_tree.pyx":507
 *             intervals_result = self.pcohptr.intervals_in_dimension(dimension)
 *         else:
 *             print("intervals_in_dim function requires persistence function"             # <<<<<<<<<<<<<<
 *                   " to be launched first.")
 *         return intervals_result
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_intervals_in_dim_function_requir) < 0) __PYX_ERR(3, 507, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "../../cython/cython/simplex_tree.pyx":509
 *             print("intervals_in_dim function requires persistence function"
 *                   " to be launched first.")
 *         return intervals_result             # <<<<<<<<<<<<<<
 * 
 *     def persistence_pairs(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(__pyx_v_intervals_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":490
 *         return pbn_result
 * 
 *     def persistence_intervals_in_dimension(self, dimension):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence intervals of the simplicial
 *         complex in a specific dimension.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gudhi.SimplexTree.persistence_intervals_in_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":511
 *         return intervals_result
 * 
 *     def persistence_pairs(self):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence pairs of the simplicial
 *         complex.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_55persistence_pairs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_54persistence_pairs[] = "This function returns the persistence pairs of the simplicial\n        complex.\n\n        :returns: The persistence intervals.\n        :rtype:  list of pair of list of int\n\n        :note: intervals_in_dim function requires\n            :func:`persistence()<gudhi.SimplexTree.persistence>`\n            function to be launched first.\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_55persistence_pairs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("persistence_pairs (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_54persistence_pairs(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_54persistence_pairs(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  std::vector<std::pair<std::vector<int> ,std::vector<int> > >  __pyx_v_persistence_pairs_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("persistence_pairs", 0);

  /* "../../cython/cython/simplex_tree.pyx":523
 *         """
 *         cdef vector[pair[vector[int],vector[int]]] persistence_pairs_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             persistence_pairs_result = self.pcohptr.persistence_pairs()
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/simplex_tree.pyx":524
 *         cdef vector[pair[vector[int],vector[int]]] persistence_pairs_result
 *         if self.pcohptr != NULL:
 *             persistence_pairs_result = self.pcohptr.persistence_pairs()             # <<<<<<<<<<<<<<
 *         else:
 *             print("persistence_pairs function requires persistence function"
 */
    __pyx_v_persistence_pairs_result = __pyx_v_self->pcohptr->persistence_pairs();

    /* "../../cython/cython/simplex_tree.pyx":523
 *         """
 *         cdef vector[pair[vector[int],vector[int]]] persistence_pairs_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             persistence_pairs_result = self.pcohptr.persistence_pairs()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/simplex_tree.pyx":526
 *             persistence_pairs_result = self.pcohptr.persistence_pairs()
 *         else:
 *             print("persistence_pairs function requires persistence function"             # <<<<<<<<<<<<<<
 *                   " to be launched first.")
 *         return persistence_pairs_result
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_persistence_pairs_function_requi) < 0) __PYX_ERR(3, 526, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "../../cython/cython/simplex_tree.pyx":528
 *             print("persistence_pairs function requires persistence function"
 *                   " to be launched first.")
 *         return persistence_pairs_result             # <<<<<<<<<<<<<<
 * 
 *     def write_persistence_diagram(self, persistence_file=''):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_vector_3c_int_3e____2c_std_3a__3a_vector_3c_int_3e____3e___(__pyx_v_persistence_pairs_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/simplex_tree.pyx":511
 *         return intervals_result
 * 
 *     def persistence_pairs(self):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence pairs of the simplicial
 *         complex.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gudhi.SimplexTree.persistence_pairs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/simplex_tree.pyx":530
 *         return persistence_pairs_result
 * 
 *     def write_persistence_diagram(self, persistence_file=''):             # <<<<<<<<<<<<<<
 *         """This function writes the persistence intervals of the simplicial
 *         complex in a user given file name.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_57write_persistence_diagram(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_11SimplexTree_56write_persistence_diagram[] = "This function writes the persistence intervals of the simplicial\n        complex in a user given file name.\n\n        :param persistence_file: The specific dimension.\n        :type persistence_file: string.\n\n        :note: intervals_in_dim function requires\n            :func:`persistence()<gudhi.SimplexTree.persistence>`\n            function to be launched first.\n        ";
static PyObject *__pyx_pw_5gudhi_11SimplexTree_57write_persistence_diagram(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_persistence_file = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_persistence_diagram (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_persistence_file,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_persistence_file);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_persistence_diagram") < 0)) __PYX_ERR(3, 530, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_persistence_file = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_persistence_diagram", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 530, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.SimplexTree.write_persistence_diagram", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_56write_persistence_diagram(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), __pyx_v_persistence_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_56write_persistence_diagram(struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, PyObject *__pyx_v_persistence_file) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("write_persistence_diagram", 0);

  /* "../../cython/cython/simplex_tree.pyx":541
 *             function to be launched first.
 *         """
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             if persistence_file != '':
 *                 self.pcohptr.write_output_diagram(str.encode(persistence_file))
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/simplex_tree.pyx":542
 *         """
 *         if self.pcohptr != NULL:
 *             if persistence_file != '':             # <<<<<<<<<<<<<<
 *                 self.pcohptr.write_output_diagram(str.encode(persistence_file))
 *             else:
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_persistence_file, __pyx_kp_s_, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 542, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "../../cython/cython/simplex_tree.pyx":543
 *         if self.pcohptr != NULL:
 *             if persistence_file != '':
 *                 self.pcohptr.write_output_diagram(str.encode(persistence_file))             # <<<<<<<<<<<<<<
 *             else:
 *                 print("persistence_file must be specified")
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyString_Type)), __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 543, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_persistence_file) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_persistence_file);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 543, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 543, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->pcohptr->write_output_diagram(__pyx_t_5);

      /* "../../cython/cython/simplex_tree.pyx":542
 *         """
 *         if self.pcohptr != NULL:
 *             if persistence_file != '':             # <<<<<<<<<<<<<<
 *                 self.pcohptr.write_output_diagram(str.encode(persistence_file))
 *             else:
 */
      goto __pyx_L4;
    }

    /* "../../cython/cython/simplex_tree.pyx":545
 *                 self.pcohptr.write_output_diagram(str.encode(persistence_file))
 *             else:
 *                 print("persistence_file must be specified")             # <<<<<<<<<<<<<<
 *         else:
 *             print("intervals_in_dim function requires persistence function"
 */
    /*else*/ {
      if (__Pyx_PrintOne(0, __pyx_kp_s_persistence_file_must_be_specifi) < 0) __PYX_ERR(3, 545, __pyx_L1_error)
    }
    __pyx_L4:;

    /* "../../cython/cython/simplex_tree.pyx":541
 *             function to be launched first.
 *         """
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             if persistence_file != '':
 *                 self.pcohptr.write_output_diagram(str.encode(persistence_file))
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/simplex_tree.pyx":547
 *                 print("persistence_file must be specified")
 *         else:
 *             print("intervals_in_dim function requires persistence function"             # <<<<<<<<<<<<<<
 *                   " to be launched first.")
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_intervals_in_dim_function_requir) < 0) __PYX_ERR(3, 547, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "../../cython/cython/simplex_tree.pyx":530
 *         return persistence_pairs_result
 * 
 *     def write_persistence_diagram(self, persistence_file=''):             # <<<<<<<<<<<<<<
 *         """This function writes the persistence intervals of the simplicial
 *         complex in a user given file name.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gudhi.SimplexTree.write_persistence_diagram", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_59__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5gudhi_11SimplexTree_59__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_58__reduce_cython__(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_58__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.SimplexTree.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11SimplexTree_61__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5gudhi_11SimplexTree_61__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11SimplexTree_60__setstate_cython__(((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11SimplexTree_60__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.SimplexTree.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/rips_complex.pyx":50
 * 
 *     # Fake constructor that does nothing but documenting the constructor
 *     def __init__(self, points=None, distance_matrix=None, max_edge_length=float('inf')):             # <<<<<<<<<<<<<<
 *         """RipsComplex constructor.
 * 
 */

/* Python wrapper */
static int __pyx_pw_5gudhi_11RipsComplex_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_11RipsComplex___init__[] = "RipsComplex constructor.\n\n        :param max_edge_length: Rips value.\n        :type max_edge_length: float\n\n        :param points: A list of points in d-Dimension.\n        :type points: list of list of double\n\n        Or\n\n        :param distance_matrix: A distance matrix (full square or lower\n        triangular).\n        :type points: list of list of double\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5gudhi_11RipsComplex___init__;
#endif
static int __pyx_pw_5gudhi_11RipsComplex_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_points = 0;
  CYTHON_UNUSED PyObject *__pyx_v_distance_matrix = 0;
  CYTHON_UNUSED PyObject *__pyx_v_max_edge_length = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_distance_matrix,&__pyx_n_s_max_edge_length,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = __pyx_k__4;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_distance_matrix);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_edge_length);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(4, 50, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_distance_matrix = values[1];
    __pyx_v_max_edge_length = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 50, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.RipsComplex.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_11RipsComplex___init__(((struct __pyx_obj_5gudhi_RipsComplex *)__pyx_v_self), __pyx_v_points, __pyx_v_distance_matrix, __pyx_v_max_edge_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5gudhi_11RipsComplex___init__(CYTHON_UNUSED struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_points, CYTHON_UNUSED PyObject *__pyx_v_distance_matrix, CYTHON_UNUSED PyObject *__pyx_v_max_edge_length) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/rips_complex.pyx":67
 * 
 *     # The real cython constructor
 *     def __cinit__(self, points=None, distance_matrix=None, max_edge_length=float('inf')):             # <<<<<<<<<<<<<<
 *         if distance_matrix is not None:
 *             self.thisptr = new Rips_complex_interface(distance_matrix, max_edge_length, False)
 */

/* Python wrapper */
static int __pyx_pw_5gudhi_11RipsComplex_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5gudhi_11RipsComplex_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_distance_matrix = 0;
  PyObject *__pyx_v_max_edge_length = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_distance_matrix,&__pyx_n_s_max_edge_length,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = __pyx_k__5;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_distance_matrix);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_edge_length);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(4, 67, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_distance_matrix = values[1];
    __pyx_v_max_edge_length = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 67, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.RipsComplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_11RipsComplex_2__cinit__(((struct __pyx_obj_5gudhi_RipsComplex *)__pyx_v_self), __pyx_v_points, __pyx_v_distance_matrix, __pyx_v_max_edge_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5gudhi_11RipsComplex_2__cinit__(struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_distance_matrix, PyObject *__pyx_v_max_edge_length) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<std::vector<double> >  __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_points);

  /* "../../cython/cython/rips_complex.pyx":68
 *     # The real cython constructor
 *     def __cinit__(self, points=None, distance_matrix=None, max_edge_length=float('inf')):
 *         if distance_matrix is not None:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Rips_complex_interface(distance_matrix, max_edge_length, False)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_distance_matrix != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../cython/cython/rips_complex.pyx":69
 *     def __cinit__(self, points=None, distance_matrix=None, max_edge_length=float('inf')):
 *         if distance_matrix is not None:
 *             self.thisptr = new Rips_complex_interface(distance_matrix, max_edge_length, False)             # <<<<<<<<<<<<<<
 *         else:
 *             if points is None:
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(__pyx_v_distance_matrix); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 69, __pyx_L1_error)
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_max_edge_length); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 69, __pyx_L1_error)
    __pyx_v_self->thisptr = new Gudhi::rips_complex::Rips_complex_interface(__pyx_t_3, __pyx_t_4, 0);

    /* "../../cython/cython/rips_complex.pyx":68
 *     # The real cython constructor
 *     def __cinit__(self, points=None, distance_matrix=None, max_edge_length=float('inf')):
 *         if distance_matrix is not None:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Rips_complex_interface(distance_matrix, max_edge_length, False)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/rips_complex.pyx":71
 *             self.thisptr = new Rips_complex_interface(distance_matrix, max_edge_length, False)
 *         else:
 *             if points is None:             # <<<<<<<<<<<<<<
 *                 # Empty Rips construction
 *                 points=[]
 */
  /*else*/ {
    __pyx_t_2 = (__pyx_v_points == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "../../cython/cython/rips_complex.pyx":73
 *             if points is None:
 *                 # Empty Rips construction
 *                 points=[]             # <<<<<<<<<<<<<<
 *             self.thisptr = new Rips_complex_interface(points, max_edge_length, True)
 * 
 */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 73, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_points, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "../../cython/cython/rips_complex.pyx":71
 *             self.thisptr = new Rips_complex_interface(distance_matrix, max_edge_length, False)
 *         else:
 *             if points is None:             # <<<<<<<<<<<<<<
 *                 # Empty Rips construction
 *                 points=[]
 */
    }

    /* "../../cython/cython/rips_complex.pyx":74
 *                 # Empty Rips construction
 *                 points=[]
 *             self.thisptr = new Rips_complex_interface(points, max_edge_length, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(__pyx_v_points); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 74, __pyx_L1_error)
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_max_edge_length); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 74, __pyx_L1_error)
    __pyx_v_self->thisptr = new Gudhi::rips_complex::Rips_complex_interface(__pyx_t_3, __pyx_t_4, 1);
  }
  __pyx_L3:;

  /* "../../cython/cython/rips_complex.pyx":67
 * 
 *     # The real cython constructor
 *     def __cinit__(self, points=None, distance_matrix=None, max_edge_length=float('inf')):             # <<<<<<<<<<<<<<
 *         if distance_matrix is not None:
 *             self.thisptr = new Rips_complex_interface(distance_matrix, max_edge_length, False)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gudhi.RipsComplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/rips_complex.pyx":77
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_5gudhi_11RipsComplex_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5gudhi_11RipsComplex_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5gudhi_11RipsComplex_4__dealloc__(((struct __pyx_obj_5gudhi_RipsComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5gudhi_11RipsComplex_4__dealloc__(struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../../cython/cython/rips_complex.pyx":78
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/rips_complex.pyx":79
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __is_defined(self):
 */
    delete __pyx_v_self->thisptr;

    /* "../../cython/cython/rips_complex.pyx":78
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "../../cython/cython/rips_complex.pyx":77
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../cython/cython/rips_complex.pyx":81
 *             del self.thisptr
 * 
 *     def __is_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if RipsComplex pointer is not NULL.
 *          """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11RipsComplex_7__is_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_11RipsComplex_6__is_defined[] = "Returns true if RipsComplex pointer is not NULL.\n         ";
static PyObject *__pyx_pw_5gudhi_11RipsComplex_7__is_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__is_defined (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11RipsComplex_6__is_defined(((struct __pyx_obj_5gudhi_RipsComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11RipsComplex_6__is_defined(struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__is_defined", 0);

  /* "../../cython/cython/rips_complex.pyx":84
 *         """Returns true if RipsComplex pointer is not NULL.
 *          """
 *         return self.thisptr != NULL             # <<<<<<<<<<<<<<
 * 
 *     def create_simplex_tree(self, max_dimension=1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr != NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/rips_complex.pyx":81
 *             del self.thisptr
 * 
 *     def __is_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if RipsComplex pointer is not NULL.
 *          """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.RipsComplex.__is_defined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/rips_complex.pyx":86
 *         return self.thisptr != NULL
 * 
 *     def create_simplex_tree(self, max_dimension=1):             # <<<<<<<<<<<<<<
 *         """
 *         :param max_dimension: graph expansion for rips until this given maximal
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11RipsComplex_9create_simplex_tree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_11RipsComplex_8create_simplex_tree[] = "\n        :param max_dimension: graph expansion for rips until this given maximal\n            dimension.\n        :type max_dimension: int\n        :returns: A simplex tree created from the Delaunay Triangulation.\n        :rtype: SimplexTree\n        ";
static PyObject *__pyx_pw_5gudhi_11RipsComplex_9create_simplex_tree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_max_dimension = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_simplex_tree (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_dimension,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_dimension);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_simplex_tree") < 0)) __PYX_ERR(4, 86, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_max_dimension = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_simplex_tree", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 86, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.RipsComplex.create_simplex_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_11RipsComplex_8create_simplex_tree(((struct __pyx_obj_5gudhi_RipsComplex *)__pyx_v_self), __pyx_v_max_dimension);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11RipsComplex_8create_simplex_tree(struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self, PyObject *__pyx_v_max_dimension) {
  struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_simplex_tree = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("create_simplex_tree", 0);

  /* "../../cython/cython/rips_complex.pyx":94
 *         :rtype: SimplexTree
 *         """
 *         simplex_tree = SimplexTree()             # <<<<<<<<<<<<<<
 *         self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_dimension)
 *         return simplex_tree
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5gudhi_SimplexTree)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_simplex_tree = ((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../cython/cython/rips_complex.pyx":95
 *         """
 *         simplex_tree = SimplexTree()
 *         self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_dimension)             # <<<<<<<<<<<<<<
 *         return simplex_tree
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_max_dimension); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 95, __pyx_L1_error)
  __pyx_v_self->thisptr->create_simplex_tree(__pyx_v_simplex_tree->thisptr, __pyx_t_2);

  /* "../../cython/cython/rips_complex.pyx":96
 *         simplex_tree = SimplexTree()
 *         self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_dimension)
 *         return simplex_tree             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_simplex_tree));
  __pyx_r = ((PyObject *)__pyx_v_simplex_tree);
  goto __pyx_L0;

  /* "../../cython/cython/rips_complex.pyx":86
 *         return self.thisptr != NULL
 * 
 *     def create_simplex_tree(self, max_dimension=1):             # <<<<<<<<<<<<<<
 *         """
 *         :param max_dimension: graph expansion for rips until this given maximal
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.RipsComplex.create_simplex_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_simplex_tree);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11RipsComplex_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5gudhi_11RipsComplex_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11RipsComplex_10__reduce_cython__(((struct __pyx_obj_5gudhi_RipsComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11RipsComplex_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.RipsComplex.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11RipsComplex_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5gudhi_11RipsComplex_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_11RipsComplex_12__setstate_cython__(((struct __pyx_obj_5gudhi_RipsComplex *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_11RipsComplex_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_RipsComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.RipsComplex.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/cubical_complex.pyx":60
 * 
 *     # Fake constructor that does nothing but documenting the constructor
 *     def __init__(self, dimensions=None, top_dimensional_cells=None,             # <<<<<<<<<<<<<<
 *                   perseus_file=''):
 *         """CubicalComplex constructor from dimensions and
 */

/* Python wrapper */
static int __pyx_pw_5gudhi_14CubicalComplex_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_14CubicalComplex___init__[] = "CubicalComplex constructor from dimensions and\n        top_dimensional_cells or from a Perseus-style file name.\n\n        :param dimensions: A list of number of top dimensional cells.\n        :type dimensions: list of int\n        :param top_dimensional_cells: A list of cells filtration values.\n        :type top_dimensional_cells: list of double\n\n        Or\n\n        :param perseus_file: A Perseus-style file name.\n        :type perseus_file: string\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5gudhi_14CubicalComplex___init__;
#endif
static int __pyx_pw_5gudhi_14CubicalComplex_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_dimensions = 0;
  CYTHON_UNUSED PyObject *__pyx_v_top_dimensional_cells = 0;
  CYTHON_UNUSED PyObject *__pyx_v_perseus_file = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dimensions,&__pyx_n_s_top_dimensional_cells,&__pyx_n_s_perseus_file,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_kp_s_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dimensions);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_top_dimensional_cells);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_perseus_file);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(5, 60, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dimensions = values[0];
    __pyx_v_top_dimensional_cells = values[1];
    __pyx_v_perseus_file = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 60, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.CubicalComplex.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_14CubicalComplex___init__(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self), __pyx_v_dimensions, __pyx_v_top_dimensional_cells, __pyx_v_perseus_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5gudhi_14CubicalComplex___init__(CYTHON_UNUSED struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_dimensions, CYTHON_UNUSED PyObject *__pyx_v_top_dimensional_cells, CYTHON_UNUSED PyObject *__pyx_v_perseus_file) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/cubical_complex.pyx":77
 * 
 *     # The real cython constructor
 *     def __cinit__(self, dimensions=None, top_dimensional_cells=None,             # <<<<<<<<<<<<<<
 *                   perseus_file=''):
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (perseus_file is ''):
 */

/* Python wrapper */
static int __pyx_pw_5gudhi_14CubicalComplex_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5gudhi_14CubicalComplex_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dimensions = 0;
  PyObject *__pyx_v_top_dimensional_cells = 0;
  PyObject *__pyx_v_perseus_file = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dimensions,&__pyx_n_s_top_dimensional_cells,&__pyx_n_s_perseus_file,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_kp_s_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dimensions);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_top_dimensional_cells);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_perseus_file);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(5, 77, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dimensions = values[0];
    __pyx_v_top_dimensional_cells = values[1];
    __pyx_v_perseus_file = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 77, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.CubicalComplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_14CubicalComplex_2__cinit__(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self), __pyx_v_dimensions, __pyx_v_top_dimensional_cells, __pyx_v_perseus_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5gudhi_14CubicalComplex_2__cinit__(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self, PyObject *__pyx_v_dimensions, PyObject *__pyx_v_top_dimensional_cells, PyObject *__pyx_v_perseus_file) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::vector<unsigned int>  __pyx_t_4;
  std::vector<double>  __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  std::string __pyx_t_9;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../../cython/cython/cubical_complex.pyx":79
 *     def __cinit__(self, dimensions=None, top_dimensional_cells=None,
 *                   perseus_file=''):
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (perseus_file is ''):             # <<<<<<<<<<<<<<
 *             self.thisptr = new Bitmap_cubical_complex_base_interface(dimensions, top_dimensional_cells)
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (perseus_file is not ''):
 */
  __pyx_t_2 = (__pyx_v_dimensions != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_top_dimensional_cells != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_perseus_file == __pyx_kp_s_);
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../cython/cython/cubical_complex.pyx":80
 *                   perseus_file=''):
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (perseus_file is ''):
 *             self.thisptr = new Bitmap_cubical_complex_base_interface(dimensions, top_dimensional_cells)             # <<<<<<<<<<<<<<
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (perseus_file is not ''):
 *             if os.path.isfile(perseus_file):
 */
    __pyx_t_4 = __pyx_convert_vector_from_py_unsigned_int(__pyx_v_dimensions); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 80, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_vector_from_py_double(__pyx_v_top_dimensional_cells); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 80, __pyx_L1_error)
    __pyx_v_self->thisptr = new Gudhi::Cubical_complex::Cubical_complex_interface<>(__pyx_t_4, __pyx_t_5);

    /* "../../cython/cython/cubical_complex.pyx":79
 *     def __cinit__(self, dimensions=None, top_dimensional_cells=None,
 *                   perseus_file=''):
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (perseus_file is ''):             # <<<<<<<<<<<<<<
 *             self.thisptr = new Bitmap_cubical_complex_base_interface(dimensions, top_dimensional_cells)
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (perseus_file is not ''):
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/cubical_complex.pyx":81
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (perseus_file is ''):
 *             self.thisptr = new Bitmap_cubical_complex_base_interface(dimensions, top_dimensional_cells)
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (perseus_file is not ''):             # <<<<<<<<<<<<<<
 *             if os.path.isfile(perseus_file):
 *                 self.thisptr = new Bitmap_cubical_complex_base_interface(str.encode(perseus_file))
 */
  __pyx_t_3 = (__pyx_v_dimensions == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_top_dimensional_cells == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_perseus_file != __pyx_kp_s_);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../cython/cython/cubical_complex.pyx":82
 *             self.thisptr = new Bitmap_cubical_complex_base_interface(dimensions, top_dimensional_cells)
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (perseus_file is not ''):
 *             if os.path.isfile(perseus_file):             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Bitmap_cubical_complex_base_interface(str.encode(perseus_file))
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_os); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_path); if (unlikely(!__pyx_t_8)) __PYX_ERR(5, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_isfile); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_perseus_file) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_perseus_file);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 82, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_1) {

      /* "../../cython/cython/cubical_complex.pyx":83
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (perseus_file is not ''):
 *             if os.path.isfile(perseus_file):
 *                 self.thisptr = new Bitmap_cubical_complex_base_interface(str.encode(perseus_file))             # <<<<<<<<<<<<<<
 *             else:
 *                 print("file " + perseus_file + " not found.")
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyString_Type)), __pyx_n_s_encode); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_perseus_file) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_perseus_file);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 83, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_self->thisptr = new Gudhi::Cubical_complex::Cubical_complex_interface<>(__pyx_t_9);

      /* "../../cython/cython/cubical_complex.pyx":82
 *             self.thisptr = new Bitmap_cubical_complex_base_interface(dimensions, top_dimensional_cells)
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (perseus_file is not ''):
 *             if os.path.isfile(perseus_file):             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Bitmap_cubical_complex_base_interface(str.encode(perseus_file))
 *             else:
 */
      goto __pyx_L10;
    }

    /* "../../cython/cython/cubical_complex.pyx":85
 *                 self.thisptr = new Bitmap_cubical_complex_base_interface(str.encode(perseus_file))
 *             else:
 *                 print("file " + perseus_file + " not found.")             # <<<<<<<<<<<<<<
 *         else:
 *             print("CubicalComplex can be constructed from dimensions and "
 */
    /*else*/ {
      __pyx_t_6 = PyNumber_Add(__pyx_kp_s_file, __pyx_v_perseus_file); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_not_found); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_7) < 0) __PYX_ERR(5, 85, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_L10:;

    /* "../../cython/cython/cubical_complex.pyx":81
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (perseus_file is ''):
 *             self.thisptr = new Bitmap_cubical_complex_base_interface(dimensions, top_dimensional_cells)
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (perseus_file is not ''):             # <<<<<<<<<<<<<<
 *             if os.path.isfile(perseus_file):
 *                 self.thisptr = new Bitmap_cubical_complex_base_interface(str.encode(perseus_file))
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/cubical_complex.pyx":87
 *                 print("file " + perseus_file + " not found.")
 *         else:
 *             print("CubicalComplex can be constructed from dimensions and "             # <<<<<<<<<<<<<<
 *               "top_dimensional_cells or from a Perseus-style file name.")
 * 
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_CubicalComplex_can_be_constructe) < 0) __PYX_ERR(5, 87, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "../../cython/cython/cubical_complex.pyx":77
 * 
 *     # The real cython constructor
 *     def __cinit__(self, dimensions=None, top_dimensional_cells=None,             # <<<<<<<<<<<<<<
 *                   perseus_file=''):
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (perseus_file is ''):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gudhi.CubicalComplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/cubical_complex.pyx":90
 *               "top_dimensional_cells or from a Perseus-style file name.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_5gudhi_14CubicalComplex_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5gudhi_14CubicalComplex_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5gudhi_14CubicalComplex_4__dealloc__(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5gudhi_14CubicalComplex_4__dealloc__(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../../cython/cython/cubical_complex.pyx":91
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *         if self.pcohptr != NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/cubical_complex.pyx":92
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 *         if self.pcohptr != NULL:
 *             del self.pcohptr
 */
    delete __pyx_v_self->thisptr;

    /* "../../cython/cython/cubical_complex.pyx":91
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *         if self.pcohptr != NULL:
 */
  }

  /* "../../cython/cython/cubical_complex.pyx":93
 *         if self.thisptr != NULL:
 *             del self.thisptr
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.pcohptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/cubical_complex.pyx":94
 *             del self.thisptr
 *         if self.pcohptr != NULL:
 *             del self.pcohptr             # <<<<<<<<<<<<<<
 * 
 *     def __is_defined(self):
 */
    delete __pyx_v_self->pcohptr;

    /* "../../cython/cython/cubical_complex.pyx":93
 *         if self.thisptr != NULL:
 *             del self.thisptr
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.pcohptr
 * 
 */
  }

  /* "../../cython/cython/cubical_complex.pyx":90
 *               "top_dimensional_cells or from a Perseus-style file name.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../cython/cython/cubical_complex.pyx":96
 *             del self.pcohptr
 * 
 *     def __is_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if CubicalComplex pointer is not NULL.
 *          """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_7__is_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_14CubicalComplex_6__is_defined[] = "Returns true if CubicalComplex pointer is not NULL.\n         ";
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_7__is_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__is_defined (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_14CubicalComplex_6__is_defined(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14CubicalComplex_6__is_defined(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__is_defined", 0);

  /* "../../cython/cython/cubical_complex.pyx":99
 *         """Returns true if CubicalComplex pointer is not NULL.
 *          """
 *         return self.thisptr != NULL             # <<<<<<<<<<<<<<
 * 
 *     def __is_persistence_defined(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr != NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/cubical_complex.pyx":96
 *             del self.pcohptr
 * 
 *     def __is_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if CubicalComplex pointer is not NULL.
 *          """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.CubicalComplex.__is_defined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/cubical_complex.pyx":101
 *         return self.thisptr != NULL
 * 
 *     def __is_persistence_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if Persistence pointer is not NULL.
 *          """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_9__is_persistence_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_14CubicalComplex_8__is_persistence_defined[] = "Returns true if Persistence pointer is not NULL.\n         ";
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_9__is_persistence_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__is_persistence_defined (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_14CubicalComplex_8__is_persistence_defined(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14CubicalComplex_8__is_persistence_defined(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__is_persistence_defined", 0);

  /* "../../cython/cython/cubical_complex.pyx":104
 *         """Returns true if Persistence pointer is not NULL.
 *          """
 *         return self.pcohptr != NULL             # <<<<<<<<<<<<<<
 * 
 *     def num_simplices(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->pcohptr != NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/cubical_complex.pyx":101
 *         return self.thisptr != NULL
 * 
 *     def __is_persistence_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if Persistence pointer is not NULL.
 *          """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.CubicalComplex.__is_persistence_defined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/cubical_complex.pyx":106
 *         return self.pcohptr != NULL
 * 
 *     def num_simplices(self):             # <<<<<<<<<<<<<<
 *         """This function returns the number of all cubes in the complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_11num_simplices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_14CubicalComplex_10num_simplices[] = "This function returns the number of all cubes in the complex.\n\n        :returns:  int -- the number of all cubes in the complex.\n        ";
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_11num_simplices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_simplices (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_14CubicalComplex_10num_simplices(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14CubicalComplex_10num_simplices(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("num_simplices", 0);

  /* "../../cython/cython/cubical_complex.pyx":111
 *         :returns:  int -- the number of all cubes in the complex.
 *         """
 *         return self.thisptr.num_simplices()             # <<<<<<<<<<<<<<
 * 
 *     def dimension(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->num_simplices()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/cubical_complex.pyx":106
 *         return self.pcohptr != NULL
 * 
 *     def num_simplices(self):             # <<<<<<<<<<<<<<
 *         """This function returns the number of all cubes in the complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.CubicalComplex.num_simplices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/cubical_complex.pyx":113
 *         return self.thisptr.num_simplices()
 * 
 *     def dimension(self):             # <<<<<<<<<<<<<<
 *         """This function returns the dimension of the complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_13dimension(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_14CubicalComplex_12dimension[] = "This function returns the dimension of the complex.\n\n        :returns:  int -- the complex dimension.\n        ";
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_13dimension(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dimension (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_14CubicalComplex_12dimension(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14CubicalComplex_12dimension(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dimension", 0);

  /* "../../cython/cython/cubical_complex.pyx":118
 *         :returns:  int -- the complex dimension.
 *         """
 *         return self.thisptr.dimension()             # <<<<<<<<<<<<<<
 * 
 *     def persistence(self, homology_coeff_field=11, min_persistence=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->dimension()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/cubical_complex.pyx":113
 *         return self.thisptr.num_simplices()
 * 
 *     def dimension(self):             # <<<<<<<<<<<<<<
 *         """This function returns the dimension of the complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.CubicalComplex.dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/cubical_complex.pyx":120
 *         return self.thisptr.dimension()
 * 
 *     def persistence(self, homology_coeff_field=11, min_persistence=0):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence of the complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_15persistence(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_14CubicalComplex_14persistence[] = "This function returns the persistence of the complex.\n\n        :param homology_coeff_field: The homology coefficient field. Must be a\n            prime number\n        :type homology_coeff_field: int.\n        :param min_persistence: The minimum persistence value to take into\n            account (strictly greater than min_persistence). Default value is\n            0.0.\n            Sets min_persistence to -1.0 to see all values.\n        :type min_persistence: float.\n        :returns: list of pairs(dimension, pair(birth, death)) -- the\n            persistence of the complex.\n        ";
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_15persistence(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homology_coeff_field = 0;
  PyObject *__pyx_v_min_persistence = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("persistence (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homology_coeff_field,&__pyx_n_s_min_persistence,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_11);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_homology_coeff_field);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_persistence);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "persistence") < 0)) __PYX_ERR(5, 120, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_homology_coeff_field = values[0];
    __pyx_v_min_persistence = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("persistence", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 120, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.CubicalComplex.persistence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_14CubicalComplex_14persistence(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self), __pyx_v_homology_coeff_field, __pyx_v_min_persistence);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14CubicalComplex_14persistence(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self, PyObject *__pyx_v_homology_coeff_field, PyObject *__pyx_v_min_persistence) {
  std::vector<std::pair<int,std::pair<double,double> > >  __pyx_v_persistence_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("persistence", 0);

  /* "../../cython/cython/cubical_complex.pyx":134
 *             persistence of the complex.
 *         """
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.pcohptr
 *         if self.thisptr != NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/cubical_complex.pyx":135
 *         """
 *         if self.pcohptr != NULL:
 *             del self.pcohptr             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             self.pcohptr = new Cubical_complex_persistence_interface(self.thisptr, True)
 */
    delete __pyx_v_self->pcohptr;

    /* "../../cython/cython/cubical_complex.pyx":134
 *             persistence of the complex.
 *         """
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.pcohptr
 *         if self.thisptr != NULL:
 */
  }

  /* "../../cython/cython/cubical_complex.pyx":136
 *         if self.pcohptr != NULL:
 *             del self.pcohptr
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             self.pcohptr = new Cubical_complex_persistence_interface(self.thisptr, True)
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/cubical_complex.pyx":137
 *             del self.pcohptr
 *         if self.thisptr != NULL:
 *             self.pcohptr = new Cubical_complex_persistence_interface(self.thisptr, True)             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 *         if self.pcohptr != NULL:
 */
    __pyx_v_self->pcohptr = new Gudhi::Persistent_cohomology_interface<Gudhi::Cubical_complex::Cubical_complex_interface<>>(__pyx_v_self->thisptr, 1);

    /* "../../cython/cython/cubical_complex.pyx":136
 *         if self.pcohptr != NULL:
 *             del self.pcohptr
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             self.pcohptr = new Cubical_complex_persistence_interface(self.thisptr, True)
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 */
  }

  /* "../../cython/cython/cubical_complex.pyx":139
 *             self.pcohptr = new Cubical_complex_persistence_interface(self.thisptr, True)
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             persistence_result = self.pcohptr.get_persistence(homology_coeff_field, min_persistence)
 *         return persistence_result
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/cubical_complex.pyx":140
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 *         if self.pcohptr != NULL:
 *             persistence_result = self.pcohptr.get_persistence(homology_coeff_field, min_persistence)             # <<<<<<<<<<<<<<
 *         return persistence_result
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_homology_coeff_field); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 140, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_min_persistence); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 140, __pyx_L1_error)
    __pyx_v_persistence_result = __pyx_v_self->pcohptr->get_persistence(__pyx_t_2, __pyx_t_3);

    /* "../../cython/cython/cubical_complex.pyx":139
 *             self.pcohptr = new Cubical_complex_persistence_interface(self.thisptr, True)
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             persistence_result = self.pcohptr.get_persistence(homology_coeff_field, min_persistence)
 *         return persistence_result
 */
  }

  /* "../../cython/cython/cubical_complex.pyx":141
 *         if self.pcohptr != NULL:
 *             persistence_result = self.pcohptr.get_persistence(homology_coeff_field, min_persistence)
 *         return persistence_result             # <<<<<<<<<<<<<<
 * 
 *     def betti_numbers(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(__pyx_v_persistence_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/cubical_complex.pyx":120
 *         return self.thisptr.dimension()
 * 
 *     def persistence(self, homology_coeff_field=11, min_persistence=0):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence of the complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gudhi.CubicalComplex.persistence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/cubical_complex.pyx":143
 *         return persistence_result
 * 
 *     def betti_numbers(self):             # <<<<<<<<<<<<<<
 *         """This function returns the Betti numbers of the complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_17betti_numbers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_14CubicalComplex_16betti_numbers[] = "This function returns the Betti numbers of the complex.\n\n        :returns: list of int -- The Betti numbers ([B0, B1, ..., Bn]).\n\n        :note: betti_numbers function requires persistence function to be\n            launched first.\n\n        :note: betti_numbers function always returns [1, 0, 0, ...] as infinity\n            filtration cubes are not removed from the complex.\n        ";
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_17betti_numbers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("betti_numbers (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_14CubicalComplex_16betti_numbers(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14CubicalComplex_16betti_numbers(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self) {
  std::vector<int>  __pyx_v_bn_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("betti_numbers", 0);

  /* "../../cython/cython/cubical_complex.pyx":155
 *         """
 *         cdef vector[int] bn_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             bn_result = self.pcohptr.betti_numbers()
 *         return bn_result
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/cubical_complex.pyx":156
 *         cdef vector[int] bn_result
 *         if self.pcohptr != NULL:
 *             bn_result = self.pcohptr.betti_numbers()             # <<<<<<<<<<<<<<
 *         return bn_result
 * 
 */
    __pyx_v_bn_result = __pyx_v_self->pcohptr->betti_numbers();

    /* "../../cython/cython/cubical_complex.pyx":155
 *         """
 *         cdef vector[int] bn_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             bn_result = self.pcohptr.betti_numbers()
 *         return bn_result
 */
  }

  /* "../../cython/cython/cubical_complex.pyx":157
 *         if self.pcohptr != NULL:
 *             bn_result = self.pcohptr.betti_numbers()
 *         return bn_result             # <<<<<<<<<<<<<<
 * 
 *     def persistent_betti_numbers(self, from_value, to_value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_bn_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/cubical_complex.pyx":143
 *         return persistence_result
 * 
 *     def betti_numbers(self):             # <<<<<<<<<<<<<<
 *         """This function returns the Betti numbers of the complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gudhi.CubicalComplex.betti_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/cubical_complex.pyx":159
 *         return bn_result
 * 
 *     def persistent_betti_numbers(self, from_value, to_value):             # <<<<<<<<<<<<<<
 *         """This function returns the persistent Betti numbers of the complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_19persistent_betti_numbers(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_14CubicalComplex_18persistent_betti_numbers[] = "This function returns the persistent Betti numbers of the complex.\n\n        :param from_value: The persistence birth limit to be added in the\n            numbers (persistent birth <= from_value).\n        :type from_value: float.\n        :param to_value: The persistence death limit to be added in the\n            numbers (persistent death > to_value).\n        :type to_value: float.\n\n        :returns: list of int -- The persistent Betti numbers ([B0, B1, ...,\n            Bn]).\n\n        :note: persistent_betti_numbers function requires persistence\n            function to be launched first.\n        ";
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_19persistent_betti_numbers(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_from_value = 0;
  PyObject *__pyx_v_to_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("persistent_betti_numbers (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_value,&__pyx_n_s_to_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_from_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_to_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("persistent_betti_numbers", 1, 2, 2, 1); __PYX_ERR(5, 159, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "persistent_betti_numbers") < 0)) __PYX_ERR(5, 159, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_from_value = values[0];
    __pyx_v_to_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("persistent_betti_numbers", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 159, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.CubicalComplex.persistent_betti_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_14CubicalComplex_18persistent_betti_numbers(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self), __pyx_v_from_value, __pyx_v_to_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14CubicalComplex_18persistent_betti_numbers(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self, PyObject *__pyx_v_from_value, PyObject *__pyx_v_to_value) {
  std::vector<int>  __pyx_v_pbn_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("persistent_betti_numbers", 0);

  /* "../../cython/cython/cubical_complex.pyx":176
 *         """
 *         cdef vector[int] pbn_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             pbn_result = self.pcohptr.persistent_betti_numbers(<double>from_value, <double>to_value)
 *         return pbn_result
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/cubical_complex.pyx":177
 *         cdef vector[int] pbn_result
 *         if self.pcohptr != NULL:
 *             pbn_result = self.pcohptr.persistent_betti_numbers(<double>from_value, <double>to_value)             # <<<<<<<<<<<<<<
 *         return pbn_result
 * 
 */
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_from_value); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 177, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_to_value); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 177, __pyx_L1_error)
    __pyx_v_pbn_result = __pyx_v_self->pcohptr->persistent_betti_numbers(((double)__pyx_t_2), ((double)__pyx_t_3));

    /* "../../cython/cython/cubical_complex.pyx":176
 *         """
 *         cdef vector[int] pbn_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             pbn_result = self.pcohptr.persistent_betti_numbers(<double>from_value, <double>to_value)
 *         return pbn_result
 */
  }

  /* "../../cython/cython/cubical_complex.pyx":178
 *         if self.pcohptr != NULL:
 *             pbn_result = self.pcohptr.persistent_betti_numbers(<double>from_value, <double>to_value)
 *         return pbn_result             # <<<<<<<<<<<<<<
 * 
 *     def persistence_intervals_in_dimension(self, dimension):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_vector_to_py_int(__pyx_v_pbn_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/cubical_complex.pyx":159
 *         return bn_result
 * 
 *     def persistent_betti_numbers(self, from_value, to_value):             # <<<<<<<<<<<<<<
 *         """This function returns the persistent Betti numbers of the complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gudhi.CubicalComplex.persistent_betti_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/cubical_complex.pyx":180
 *         return pbn_result
 * 
 *     def persistence_intervals_in_dimension(self, dimension):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence intervals of the complex in a
 *         specific dimension.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_21persistence_intervals_in_dimension(PyObject *__pyx_v_self, PyObject *__pyx_v_dimension); /*proto*/
static char __pyx_doc_5gudhi_14CubicalComplex_20persistence_intervals_in_dimension[] = "This function returns the persistence intervals of the complex in a\n        specific dimension.\n\n        :param dimension: The specific dimension.\n        :type from_value: int.\n        :returns: The persistence intervals.\n        :rtype:  list of pair of float\n\n        :note: intervals_in_dim function requires persistence function to be\n            launched first.\n        ";
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_21persistence_intervals_in_dimension(PyObject *__pyx_v_self, PyObject *__pyx_v_dimension) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("persistence_intervals_in_dimension (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_14CubicalComplex_20persistence_intervals_in_dimension(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self), ((PyObject *)__pyx_v_dimension));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14CubicalComplex_20persistence_intervals_in_dimension(struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self, PyObject *__pyx_v_dimension) {
  std::vector<std::pair<double,double> >  __pyx_v_intervals_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("persistence_intervals_in_dimension", 0);

  /* "../../cython/cython/cubical_complex.pyx":193
 *         """
 *         cdef vector[pair[double,double]] intervals_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             intervals_result = self.pcohptr.intervals_in_dimension(dimension)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/cubical_complex.pyx":194
 *         cdef vector[pair[double,double]] intervals_result
 *         if self.pcohptr != NULL:
 *             intervals_result = self.pcohptr.intervals_in_dimension(dimension)             # <<<<<<<<<<<<<<
 *         else:
 *             print("intervals_in_dim function requires persistence function"
 */
    __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_dimension); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 194, __pyx_L1_error)
    __pyx_v_intervals_result = __pyx_v_self->pcohptr->intervals_in_dimension(__pyx_t_2);

    /* "../../cython/cython/cubical_complex.pyx":193
 *         """
 *         cdef vector[pair[double,double]] intervals_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             intervals_result = self.pcohptr.intervals_in_dimension(dimension)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/cubical_complex.pyx":196
 *             intervals_result = self.pcohptr.intervals_in_dimension(dimension)
 *         else:
 *             print("intervals_in_dim function requires persistence function"             # <<<<<<<<<<<<<<
 *                   " to be launched first.")
 *         return intervals_result
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_intervals_in_dim_function_requir) < 0) __PYX_ERR(5, 196, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "../../cython/cython/cubical_complex.pyx":198
 *             print("intervals_in_dim function requires persistence function"
 *                   " to be launched first.")
 *         return intervals_result             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(__pyx_v_intervals_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/cubical_complex.pyx":180
 *         return pbn_result
 * 
 *     def persistence_intervals_in_dimension(self, dimension):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence intervals of the complex in a
 *         specific dimension.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gudhi.CubicalComplex.persistence_intervals_in_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_14CubicalComplex_22__reduce_cython__(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14CubicalComplex_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.CubicalComplex.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5gudhi_14CubicalComplex_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_14CubicalComplex_24__setstate_cython__(((struct __pyx_obj_5gudhi_CubicalComplex *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14CubicalComplex_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_CubicalComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.CubicalComplex.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/periodic_cubical_complex.pyx":60
 * 
 *     # Fake constructor that does nothing but documenting the constructor
 *     def __init__(self, dimensions=None, top_dimensional_cells=None,             # <<<<<<<<<<<<<<
 *                   periodic_dimensions=None, perseus_file=''):
 *         """PeriodicCubicalComplex constructor from dimensions and
 */

/* Python wrapper */
static int __pyx_pw_5gudhi_22PeriodicCubicalComplex_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_22PeriodicCubicalComplex___init__[] = "PeriodicCubicalComplex constructor from dimensions and\n        top_dimensional_cells or from a Perseus-style file name.\n\n        :param dimensions: A list of number of top dimensional cells.\n        :type dimensions: list of int\n        :param top_dimensional_cells: A list of cells filtration values.\n        :type top_dimensional_cells: list of double\n        :param periodic_dimensions: A list of top dimensional cells periodicity value.\n        :type periodic_dimensions: list of boolean\n\n        Or\n\n        :param perseus_file: A Perseus-style file name.\n        :type perseus_file: string\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5gudhi_22PeriodicCubicalComplex___init__;
#endif
static int __pyx_pw_5gudhi_22PeriodicCubicalComplex_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_dimensions = 0;
  CYTHON_UNUSED PyObject *__pyx_v_top_dimensional_cells = 0;
  CYTHON_UNUSED PyObject *__pyx_v_periodic_dimensions = 0;
  CYTHON_UNUSED PyObject *__pyx_v_perseus_file = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dimensions,&__pyx_n_s_top_dimensional_cells,&__pyx_n_s_periodic_dimensions,&__pyx_n_s_perseus_file,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);

    /* "../../cython/cython/periodic_cubical_complex.pyx":61
 *     # Fake constructor that does nothing but documenting the constructor
 *     def __init__(self, dimensions=None, top_dimensional_cells=None,
 *                   periodic_dimensions=None, perseus_file=''):             # <<<<<<<<<<<<<<
 *         """PeriodicCubicalComplex constructor from dimensions and
 *         top_dimensional_cells or from a Perseus-style file name.
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_kp_s_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dimensions);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_top_dimensional_cells);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_periodic_dimensions);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_perseus_file);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(6, 60, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dimensions = values[0];
    __pyx_v_top_dimensional_cells = values[1];
    __pyx_v_periodic_dimensions = values[2];
    __pyx_v_perseus_file = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 60, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_22PeriodicCubicalComplex___init__(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self), __pyx_v_dimensions, __pyx_v_top_dimensional_cells, __pyx_v_periodic_dimensions, __pyx_v_perseus_file);

  /* "../../cython/cython/periodic_cubical_complex.pyx":60
 * 
 *     # Fake constructor that does nothing but documenting the constructor
 *     def __init__(self, dimensions=None, top_dimensional_cells=None,             # <<<<<<<<<<<<<<
 *                   periodic_dimensions=None, perseus_file=''):
 *         """PeriodicCubicalComplex constructor from dimensions and
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5gudhi_22PeriodicCubicalComplex___init__(CYTHON_UNUSED struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_dimensions, CYTHON_UNUSED PyObject *__pyx_v_top_dimensional_cells, CYTHON_UNUSED PyObject *__pyx_v_periodic_dimensions, CYTHON_UNUSED PyObject *__pyx_v_perseus_file) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/periodic_cubical_complex.pyx":79
 * 
 *     # The real cython constructor
 *     def __cinit__(self, dimensions=None, top_dimensional_cells=None,             # <<<<<<<<<<<<<<
 *                   periodic_dimensions=None, perseus_file=''):
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (periodic_dimensions is not None) and (perseus_file is ''):
 */

/* Python wrapper */
static int __pyx_pw_5gudhi_22PeriodicCubicalComplex_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5gudhi_22PeriodicCubicalComplex_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dimensions = 0;
  PyObject *__pyx_v_top_dimensional_cells = 0;
  PyObject *__pyx_v_periodic_dimensions = 0;
  PyObject *__pyx_v_perseus_file = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dimensions,&__pyx_n_s_top_dimensional_cells,&__pyx_n_s_periodic_dimensions,&__pyx_n_s_perseus_file,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);

    /* "../../cython/cython/periodic_cubical_complex.pyx":80
 *     # The real cython constructor
 *     def __cinit__(self, dimensions=None, top_dimensional_cells=None,
 *                   periodic_dimensions=None, perseus_file=''):             # <<<<<<<<<<<<<<
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (periodic_dimensions is not None) and (perseus_file is ''):
 *             self.thisptr = new Periodic_cubical_complex_base_interface(dimensions, top_dimensional_cells, periodic_dimensions)
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_kp_s_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dimensions);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_top_dimensional_cells);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_periodic_dimensions);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_perseus_file);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(6, 79, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dimensions = values[0];
    __pyx_v_top_dimensional_cells = values[1];
    __pyx_v_periodic_dimensions = values[2];
    __pyx_v_perseus_file = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 79, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_22PeriodicCubicalComplex_2__cinit__(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self), __pyx_v_dimensions, __pyx_v_top_dimensional_cells, __pyx_v_periodic_dimensions, __pyx_v_perseus_file);

  /* "../../cython/cython/periodic_cubical_complex.pyx":79
 * 
 *     # The real cython constructor
 *     def __cinit__(self, dimensions=None, top_dimensional_cells=None,             # <<<<<<<<<<<<<<
 *                   periodic_dimensions=None, perseus_file=''):
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (periodic_dimensions is not None) and (perseus_file is ''):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5gudhi_22PeriodicCubicalComplex_2__cinit__(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self, PyObject *__pyx_v_dimensions, PyObject *__pyx_v_top_dimensional_cells, PyObject *__pyx_v_periodic_dimensions, PyObject *__pyx_v_perseus_file) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::vector<unsigned int>  __pyx_t_4;
  std::vector<double>  __pyx_t_5;
  std::vector<bool>  __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  std::string __pyx_t_10;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../../cython/cython/periodic_cubical_complex.pyx":81
 *     def __cinit__(self, dimensions=None, top_dimensional_cells=None,
 *                   periodic_dimensions=None, perseus_file=''):
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (periodic_dimensions is not None) and (perseus_file is ''):             # <<<<<<<<<<<<<<
 *             self.thisptr = new Periodic_cubical_complex_base_interface(dimensions, top_dimensional_cells, periodic_dimensions)
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (periodic_dimensions is None) and (perseus_file is not ''):
 */
  __pyx_t_2 = (__pyx_v_dimensions != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_top_dimensional_cells != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_periodic_dimensions != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_perseus_file == __pyx_kp_s_);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../cython/cython/periodic_cubical_complex.pyx":82
 *                   periodic_dimensions=None, perseus_file=''):
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (periodic_dimensions is not None) and (perseus_file is ''):
 *             self.thisptr = new Periodic_cubical_complex_base_interface(dimensions, top_dimensional_cells, periodic_dimensions)             # <<<<<<<<<<<<<<
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (periodic_dimensions is None) and (perseus_file is not ''):
 *             if os.path.isfile(perseus_file):
 */
    __pyx_t_4 = __pyx_convert_vector_from_py_unsigned_int(__pyx_v_dimensions); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 82, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_vector_from_py_double(__pyx_v_top_dimensional_cells); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 82, __pyx_L1_error)
    __pyx_t_6 = __pyx_convert_vector_from_py_bool(__pyx_v_periodic_dimensions); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 82, __pyx_L1_error)
    __pyx_v_self->thisptr = new Gudhi::Cubical_complex::Cubical_complex_interface<Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base<double>>(__pyx_t_4, __pyx_t_5, __pyx_t_6);

    /* "../../cython/cython/periodic_cubical_complex.pyx":81
 *     def __cinit__(self, dimensions=None, top_dimensional_cells=None,
 *                   periodic_dimensions=None, perseus_file=''):
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (periodic_dimensions is not None) and (perseus_file is ''):             # <<<<<<<<<<<<<<
 *             self.thisptr = new Periodic_cubical_complex_base_interface(dimensions, top_dimensional_cells, periodic_dimensions)
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (periodic_dimensions is None) and (perseus_file is not ''):
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/periodic_cubical_complex.pyx":83
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (periodic_dimensions is not None) and (perseus_file is ''):
 *             self.thisptr = new Periodic_cubical_complex_base_interface(dimensions, top_dimensional_cells, periodic_dimensions)
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (periodic_dimensions is None) and (perseus_file is not ''):             # <<<<<<<<<<<<<<
 *             if os.path.isfile(perseus_file):
 *                 self.thisptr = new Periodic_cubical_complex_base_interface(str.encode(perseus_file))
 */
  __pyx_t_2 = (__pyx_v_dimensions == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_top_dimensional_cells == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_periodic_dimensions == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_perseus_file != __pyx_kp_s_);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../cython/cython/periodic_cubical_complex.pyx":84
 *             self.thisptr = new Periodic_cubical_complex_base_interface(dimensions, top_dimensional_cells, periodic_dimensions)
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (periodic_dimensions is None) and (perseus_file is not ''):
 *             if os.path.isfile(perseus_file):             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Periodic_cubical_complex_base_interface(str.encode(perseus_file))
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_os); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_path); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_isfile); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_v_perseus_file) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_perseus_file);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(6, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_1) {

      /* "../../cython/cython/periodic_cubical_complex.pyx":85
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (periodic_dimensions is None) and (perseus_file is not ''):
 *             if os.path.isfile(perseus_file):
 *                 self.thisptr = new Periodic_cubical_complex_base_interface(str.encode(perseus_file))             # <<<<<<<<<<<<<<
 *             else:
 *                 print("file " + perseus_file + " not found.")
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyString_Type)), __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_v_perseus_file) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_perseus_file);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 85, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_self->thisptr = new Gudhi::Cubical_complex::Cubical_complex_interface<Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base<double>>(__pyx_t_10);

      /* "../../cython/cython/periodic_cubical_complex.pyx":84
 *             self.thisptr = new Periodic_cubical_complex_base_interface(dimensions, top_dimensional_cells, periodic_dimensions)
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (periodic_dimensions is None) and (perseus_file is not ''):
 *             if os.path.isfile(perseus_file):             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Periodic_cubical_complex_base_interface(str.encode(perseus_file))
 *             else:
 */
      goto __pyx_L12;
    }

    /* "../../cython/cython/periodic_cubical_complex.pyx":87
 *                 self.thisptr = new Periodic_cubical_complex_base_interface(str.encode(perseus_file))
 *             else:
 *                 print("file " + perseus_file + " not found.")             # <<<<<<<<<<<<<<
 *         else:
 *             print("CubicalComplex can be constructed from dimensions and "
 */
    /*else*/ {
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_file, __pyx_v_perseus_file); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_kp_s_not_found); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_8) < 0) __PYX_ERR(6, 87, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_L12:;

    /* "../../cython/cython/periodic_cubical_complex.pyx":83
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (periodic_dimensions is not None) and (perseus_file is ''):
 *             self.thisptr = new Periodic_cubical_complex_base_interface(dimensions, top_dimensional_cells, periodic_dimensions)
 *         elif (dimensions is None) and (top_dimensional_cells is None) and (periodic_dimensions is None) and (perseus_file is not ''):             # <<<<<<<<<<<<<<
 *             if os.path.isfile(perseus_file):
 *                 self.thisptr = new Periodic_cubical_complex_base_interface(str.encode(perseus_file))
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/periodic_cubical_complex.pyx":89
 *                 print("file " + perseus_file + " not found.")
 *         else:
 *             print("CubicalComplex can be constructed from dimensions and "             # <<<<<<<<<<<<<<
 *               "top_dimensional_cells or from a Perseus-style file name.")
 * 
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_CubicalComplex_can_be_constructe) < 0) __PYX_ERR(6, 89, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "../../cython/cython/periodic_cubical_complex.pyx":79
 * 
 *     # The real cython constructor
 *     def __cinit__(self, dimensions=None, top_dimensional_cells=None,             # <<<<<<<<<<<<<<
 *                   periodic_dimensions=None, perseus_file=''):
 *         if (dimensions is not None) and (top_dimensional_cells is not None) and (periodic_dimensions is not None) and (perseus_file is ''):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/periodic_cubical_complex.pyx":92
 *               "top_dimensional_cells or from a Perseus-style file name.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_5gudhi_22PeriodicCubicalComplex_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5gudhi_22PeriodicCubicalComplex_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5gudhi_22PeriodicCubicalComplex_4__dealloc__(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5gudhi_22PeriodicCubicalComplex_4__dealloc__(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../../cython/cython/periodic_cubical_complex.pyx":93
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *         if self.pcohptr != NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/periodic_cubical_complex.pyx":94
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 *         if self.pcohptr != NULL:
 *             del self.pcohptr
 */
    delete __pyx_v_self->thisptr;

    /* "../../cython/cython/periodic_cubical_complex.pyx":93
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *         if self.pcohptr != NULL:
 */
  }

  /* "../../cython/cython/periodic_cubical_complex.pyx":95
 *         if self.thisptr != NULL:
 *             del self.thisptr
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.pcohptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/periodic_cubical_complex.pyx":96
 *             del self.thisptr
 *         if self.pcohptr != NULL:
 *             del self.pcohptr             # <<<<<<<<<<<<<<
 * 
 *     def __is_defined(self):
 */
    delete __pyx_v_self->pcohptr;

    /* "../../cython/cython/periodic_cubical_complex.pyx":95
 *         if self.thisptr != NULL:
 *             del self.thisptr
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.pcohptr
 * 
 */
  }

  /* "../../cython/cython/periodic_cubical_complex.pyx":92
 *               "top_dimensional_cells or from a Perseus-style file name.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../cython/cython/periodic_cubical_complex.pyx":98
 *             del self.pcohptr
 * 
 *     def __is_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if PeriodicCubicalComplex pointer is not NULL.
 *          """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_7__is_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_22PeriodicCubicalComplex_6__is_defined[] = "Returns true if PeriodicCubicalComplex pointer is not NULL.\n         ";
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_7__is_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__is_defined (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_22PeriodicCubicalComplex_6__is_defined(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_6__is_defined(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__is_defined", 0);

  /* "../../cython/cython/periodic_cubical_complex.pyx":101
 *         """Returns true if PeriodicCubicalComplex pointer is not NULL.
 *          """
 *         return self.thisptr != NULL             # <<<<<<<<<<<<<<
 * 
 *     def __is_persistence_defined(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr != NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/periodic_cubical_complex.pyx":98
 *             del self.pcohptr
 * 
 *     def __is_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if PeriodicCubicalComplex pointer is not NULL.
 *          """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.__is_defined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/periodic_cubical_complex.pyx":103
 *         return self.thisptr != NULL
 * 
 *     def __is_persistence_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if Persistence pointer is not NULL.
 *          """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_9__is_persistence_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_22PeriodicCubicalComplex_8__is_persistence_defined[] = "Returns true if Persistence pointer is not NULL.\n         ";
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_9__is_persistence_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__is_persistence_defined (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_22PeriodicCubicalComplex_8__is_persistence_defined(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_8__is_persistence_defined(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__is_persistence_defined", 0);

  /* "../../cython/cython/periodic_cubical_complex.pyx":106
 *         """Returns true if Persistence pointer is not NULL.
 *          """
 *         return self.pcohptr != NULL             # <<<<<<<<<<<<<<
 * 
 *     def num_simplices(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->pcohptr != NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/periodic_cubical_complex.pyx":103
 *         return self.thisptr != NULL
 * 
 *     def __is_persistence_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if Persistence pointer is not NULL.
 *          """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.__is_persistence_defined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/periodic_cubical_complex.pyx":108
 *         return self.pcohptr != NULL
 * 
 *     def num_simplices(self):             # <<<<<<<<<<<<<<
 *         """This function returns the number of all cubes in the complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_11num_simplices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_22PeriodicCubicalComplex_10num_simplices[] = "This function returns the number of all cubes in the complex.\n\n        :returns:  int -- the number of all cubes in the complex.\n        ";
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_11num_simplices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_simplices (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_22PeriodicCubicalComplex_10num_simplices(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_10num_simplices(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("num_simplices", 0);

  /* "../../cython/cython/periodic_cubical_complex.pyx":113
 *         :returns:  int -- the number of all cubes in the complex.
 *         """
 *         return self.thisptr.num_simplices()             # <<<<<<<<<<<<<<
 * 
 *     def dimension(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->num_simplices()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/periodic_cubical_complex.pyx":108
 *         return self.pcohptr != NULL
 * 
 *     def num_simplices(self):             # <<<<<<<<<<<<<<
 *         """This function returns the number of all cubes in the complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.num_simplices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/periodic_cubical_complex.pyx":115
 *         return self.thisptr.num_simplices()
 * 
 *     def dimension(self):             # <<<<<<<<<<<<<<
 *         """This function returns the dimension of the complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_13dimension(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_22PeriodicCubicalComplex_12dimension[] = "This function returns the dimension of the complex.\n\n        :returns:  int -- the complex dimension.\n        ";
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_13dimension(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dimension (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_22PeriodicCubicalComplex_12dimension(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_12dimension(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dimension", 0);

  /* "../../cython/cython/periodic_cubical_complex.pyx":120
 *         :returns:  int -- the complex dimension.
 *         """
 *         return self.thisptr.dimension()             # <<<<<<<<<<<<<<
 * 
 *     def persistence(self, homology_coeff_field=11, min_persistence=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->dimension()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/periodic_cubical_complex.pyx":115
 *         return self.thisptr.num_simplices()
 * 
 *     def dimension(self):             # <<<<<<<<<<<<<<
 *         """This function returns the dimension of the complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/periodic_cubical_complex.pyx":122
 *         return self.thisptr.dimension()
 * 
 *     def persistence(self, homology_coeff_field=11, min_persistence=0):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence of the complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_15persistence(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_22PeriodicCubicalComplex_14persistence[] = "This function returns the persistence of the complex.\n\n        :param homology_coeff_field: The homology coefficient field. Must be a\n            prime number\n        :type homology_coeff_field: int.\n        :param min_persistence: The minimum persistence value to take into\n            account (strictly greater than min_persistence). Default value is\n            0.0.\n            Sets min_persistence to -1.0 to see all values.\n        :type min_persistence: float.\n        :returns: list of pairs(dimension, pair(birth, death)) -- the\n            persistence of the complex.\n        ";
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_15persistence(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homology_coeff_field = 0;
  PyObject *__pyx_v_min_persistence = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("persistence (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homology_coeff_field,&__pyx_n_s_min_persistence,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_11);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_homology_coeff_field);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_persistence);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "persistence") < 0)) __PYX_ERR(6, 122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_homology_coeff_field = values[0];
    __pyx_v_min_persistence = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("persistence", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.persistence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_22PeriodicCubicalComplex_14persistence(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self), __pyx_v_homology_coeff_field, __pyx_v_min_persistence);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_14persistence(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self, PyObject *__pyx_v_homology_coeff_field, PyObject *__pyx_v_min_persistence) {
  std::vector<std::pair<int,std::pair<double,double> > >  __pyx_v_persistence_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("persistence", 0);

  /* "../../cython/cython/periodic_cubical_complex.pyx":136
 *             persistence of the complex.
 *         """
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.pcohptr
 *         if self.thisptr != NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/periodic_cubical_complex.pyx":137
 *         """
 *         if self.pcohptr != NULL:
 *             del self.pcohptr             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             self.pcohptr = new Periodic_cubical_complex_persistence_interface(self.thisptr, True)
 */
    delete __pyx_v_self->pcohptr;

    /* "../../cython/cython/periodic_cubical_complex.pyx":136
 *             persistence of the complex.
 *         """
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.pcohptr
 *         if self.thisptr != NULL:
 */
  }

  /* "../../cython/cython/periodic_cubical_complex.pyx":138
 *         if self.pcohptr != NULL:
 *             del self.pcohptr
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             self.pcohptr = new Periodic_cubical_complex_persistence_interface(self.thisptr, True)
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/periodic_cubical_complex.pyx":139
 *             del self.pcohptr
 *         if self.thisptr != NULL:
 *             self.pcohptr = new Periodic_cubical_complex_persistence_interface(self.thisptr, True)             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 *         if self.pcohptr != NULL:
 */
    __pyx_v_self->pcohptr = new Gudhi::Persistent_cohomology_interface<Gudhi::Cubical_complex::Cubical_complex_interface<Gudhi::cubical_complex::Bitmap_cubical_complex_periodic_boundary_conditions_base<double>>>(__pyx_v_self->thisptr, 1);

    /* "../../cython/cython/periodic_cubical_complex.pyx":138
 *         if self.pcohptr != NULL:
 *             del self.pcohptr
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             self.pcohptr = new Periodic_cubical_complex_persistence_interface(self.thisptr, True)
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 */
  }

  /* "../../cython/cython/periodic_cubical_complex.pyx":141
 *             self.pcohptr = new Periodic_cubical_complex_persistence_interface(self.thisptr, True)
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             persistence_result = self.pcohptr.get_persistence(homology_coeff_field, min_persistence)
 *         return persistence_result
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/periodic_cubical_complex.pyx":142
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 *         if self.pcohptr != NULL:
 *             persistence_result = self.pcohptr.get_persistence(homology_coeff_field, min_persistence)             # <<<<<<<<<<<<<<
 *         return persistence_result
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_homology_coeff_field); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 142, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_min_persistence); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 142, __pyx_L1_error)
    __pyx_v_persistence_result = __pyx_v_self->pcohptr->get_persistence(__pyx_t_2, __pyx_t_3);

    /* "../../cython/cython/periodic_cubical_complex.pyx":141
 *             self.pcohptr = new Periodic_cubical_complex_persistence_interface(self.thisptr, True)
 *         cdef vector[pair[int, pair[double, double]]] persistence_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             persistence_result = self.pcohptr.get_persistence(homology_coeff_field, min_persistence)
 *         return persistence_result
 */
  }

  /* "../../cython/cython/periodic_cubical_complex.pyx":143
 *         if self.pcohptr != NULL:
 *             persistence_result = self.pcohptr.get_persistence(homology_coeff_field, min_persistence)
 *         return persistence_result             # <<<<<<<<<<<<<<
 * 
 *     def betti_numbers(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(__pyx_v_persistence_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/periodic_cubical_complex.pyx":122
 *         return self.thisptr.dimension()
 * 
 *     def persistence(self, homology_coeff_field=11, min_persistence=0):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence of the complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.persistence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/periodic_cubical_complex.pyx":145
 *         return persistence_result
 * 
 *     def betti_numbers(self):             # <<<<<<<<<<<<<<
 *         """This function returns the Betti numbers of the complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_17betti_numbers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_22PeriodicCubicalComplex_16betti_numbers[] = "This function returns the Betti numbers of the complex.\n\n        :returns: list of int -- The Betti numbers ([B0, B1, ..., Bn]).\n\n        :note: betti_numbers function requires persistence function to be\n            launched first.\n\n        :note: betti_numbers function always returns [1, 0, 0, ...] as infinity\n            filtration cubes are not removed from the complex.\n        ";
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_17betti_numbers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("betti_numbers (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_22PeriodicCubicalComplex_16betti_numbers(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_16betti_numbers(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self) {
  std::vector<int>  __pyx_v_bn_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("betti_numbers", 0);

  /* "../../cython/cython/periodic_cubical_complex.pyx":157
 *         """
 *         cdef vector[int] bn_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             bn_result = self.pcohptr.betti_numbers()
 *         return bn_result
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/periodic_cubical_complex.pyx":158
 *         cdef vector[int] bn_result
 *         if self.pcohptr != NULL:
 *             bn_result = self.pcohptr.betti_numbers()             # <<<<<<<<<<<<<<
 *         return bn_result
 * 
 */
    __pyx_v_bn_result = __pyx_v_self->pcohptr->betti_numbers();

    /* "../../cython/cython/periodic_cubical_complex.pyx":157
 *         """
 *         cdef vector[int] bn_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             bn_result = self.pcohptr.betti_numbers()
 *         return bn_result
 */
  }

  /* "../../cython/cython/periodic_cubical_complex.pyx":159
 *         if self.pcohptr != NULL:
 *             bn_result = self.pcohptr.betti_numbers()
 *         return bn_result             # <<<<<<<<<<<<<<
 * 
 *     def persistent_betti_numbers(self, from_value, to_value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_bn_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/periodic_cubical_complex.pyx":145
 *         return persistence_result
 * 
 *     def betti_numbers(self):             # <<<<<<<<<<<<<<
 *         """This function returns the Betti numbers of the complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.betti_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/periodic_cubical_complex.pyx":161
 *         return bn_result
 * 
 *     def persistent_betti_numbers(self, from_value, to_value):             # <<<<<<<<<<<<<<
 *         """This function returns the persistent Betti numbers of the complex.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_19persistent_betti_numbers(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_22PeriodicCubicalComplex_18persistent_betti_numbers[] = "This function returns the persistent Betti numbers of the complex.\n\n        :param from_value: The persistence birth limit to be added in the\n            numbers (persistent birth <= from_value).\n        :type from_value: float.\n        :param to_value: The persistence death limit to be added in the\n            numbers (persistent death > to_value).\n        :type to_value: float.\n\n        :returns: list of int -- The persistent Betti numbers ([B0, B1, ...,\n            Bn]).\n\n        :note: persistent_betti_numbers function requires persistence\n            function to be launched first.\n        ";
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_19persistent_betti_numbers(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_from_value = 0;
  PyObject *__pyx_v_to_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("persistent_betti_numbers (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_value,&__pyx_n_s_to_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_from_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_to_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("persistent_betti_numbers", 1, 2, 2, 1); __PYX_ERR(6, 161, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "persistent_betti_numbers") < 0)) __PYX_ERR(6, 161, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_from_value = values[0];
    __pyx_v_to_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("persistent_betti_numbers", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 161, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.persistent_betti_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_22PeriodicCubicalComplex_18persistent_betti_numbers(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self), __pyx_v_from_value, __pyx_v_to_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_18persistent_betti_numbers(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self, PyObject *__pyx_v_from_value, PyObject *__pyx_v_to_value) {
  std::vector<int>  __pyx_v_pbn_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("persistent_betti_numbers", 0);

  /* "../../cython/cython/periodic_cubical_complex.pyx":178
 *         """
 *         cdef vector[int] pbn_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             pbn_result = self.pcohptr.persistent_betti_numbers(<double>from_value, <double>to_value)
 *         return pbn_result
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/periodic_cubical_complex.pyx":179
 *         cdef vector[int] pbn_result
 *         if self.pcohptr != NULL:
 *             pbn_result = self.pcohptr.persistent_betti_numbers(<double>from_value, <double>to_value)             # <<<<<<<<<<<<<<
 *         return pbn_result
 * 
 */
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_from_value); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 179, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_to_value); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 179, __pyx_L1_error)
    __pyx_v_pbn_result = __pyx_v_self->pcohptr->persistent_betti_numbers(((double)__pyx_t_2), ((double)__pyx_t_3));

    /* "../../cython/cython/periodic_cubical_complex.pyx":178
 *         """
 *         cdef vector[int] pbn_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             pbn_result = self.pcohptr.persistent_betti_numbers(<double>from_value, <double>to_value)
 *         return pbn_result
 */
  }

  /* "../../cython/cython/periodic_cubical_complex.pyx":180
 *         if self.pcohptr != NULL:
 *             pbn_result = self.pcohptr.persistent_betti_numbers(<double>from_value, <double>to_value)
 *         return pbn_result             # <<<<<<<<<<<<<<
 * 
 *     def persistence_intervals_in_dimension(self, dimension):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_vector_to_py_int(__pyx_v_pbn_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/periodic_cubical_complex.pyx":161
 *         return bn_result
 * 
 *     def persistent_betti_numbers(self, from_value, to_value):             # <<<<<<<<<<<<<<
 *         """This function returns the persistent Betti numbers of the complex.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.persistent_betti_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/periodic_cubical_complex.pyx":182
 *         return pbn_result
 * 
 *     def persistence_intervals_in_dimension(self, dimension):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence intervals of the complex in a
 *         specific dimension.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_21persistence_intervals_in_dimension(PyObject *__pyx_v_self, PyObject *__pyx_v_dimension); /*proto*/
static char __pyx_doc_5gudhi_22PeriodicCubicalComplex_20persistence_intervals_in_dimension[] = "This function returns the persistence intervals of the complex in a\n        specific dimension.\n\n        :param dimension: The specific dimension.\n        :type from_value: int.\n        :returns: The persistence intervals.\n        :rtype:  list of pair of float\n\n        :note: intervals_in_dim function requires persistence function to be\n            launched first.\n        ";
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_21persistence_intervals_in_dimension(PyObject *__pyx_v_self, PyObject *__pyx_v_dimension) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("persistence_intervals_in_dimension (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_22PeriodicCubicalComplex_20persistence_intervals_in_dimension(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self), ((PyObject *)__pyx_v_dimension));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_20persistence_intervals_in_dimension(struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self, PyObject *__pyx_v_dimension) {
  std::vector<std::pair<double,double> >  __pyx_v_intervals_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("persistence_intervals_in_dimension", 0);

  /* "../../cython/cython/periodic_cubical_complex.pyx":195
 *         """
 *         cdef vector[pair[double,double]] intervals_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             intervals_result = self.pcohptr.intervals_in_dimension(dimension)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->pcohptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/periodic_cubical_complex.pyx":196
 *         cdef vector[pair[double,double]] intervals_result
 *         if self.pcohptr != NULL:
 *             intervals_result = self.pcohptr.intervals_in_dimension(dimension)             # <<<<<<<<<<<<<<
 *         else:
 *             print("intervals_in_dim function requires persistence function"
 */
    __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_dimension); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 196, __pyx_L1_error)
    __pyx_v_intervals_result = __pyx_v_self->pcohptr->intervals_in_dimension(__pyx_t_2);

    /* "../../cython/cython/periodic_cubical_complex.pyx":195
 *         """
 *         cdef vector[pair[double,double]] intervals_result
 *         if self.pcohptr != NULL:             # <<<<<<<<<<<<<<
 *             intervals_result = self.pcohptr.intervals_in_dimension(dimension)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/periodic_cubical_complex.pyx":198
 *             intervals_result = self.pcohptr.intervals_in_dimension(dimension)
 *         else:
 *             print("intervals_in_dim function requires persistence function"             # <<<<<<<<<<<<<<
 *                   " to be launched first.")
 *         return intervals_result
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_intervals_in_dim_function_requir) < 0) __PYX_ERR(6, 198, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "../../cython/cython/periodic_cubical_complex.pyx":200
 *             print("intervals_in_dim function requires persistence function"
 *                   " to be launched first.")
 *         return intervals_result             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(__pyx_v_intervals_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/periodic_cubical_complex.pyx":182
 *         return pbn_result
 * 
 *     def persistence_intervals_in_dimension(self, dimension):             # <<<<<<<<<<<<<<
 *         """This function returns the persistence intervals of the complex in a
 *         specific dimension.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.persistence_intervals_in_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_22PeriodicCubicalComplex_22__reduce_cython__(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5gudhi_22PeriodicCubicalComplex_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_22PeriodicCubicalComplex_24__setstate_cython__(((struct __pyx_obj_5gudhi_PeriodicCubicalComplex *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_22PeriodicCubicalComplex_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_PeriodicCubicalComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.PeriodicCubicalComplex.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/persistence_graphical_tools.py":33
 *     import os
 * 
 *     def __min_birth_max_death(persistence, band=0.):             # <<<<<<<<<<<<<<
 *         """This function returns (min_birth, max_death) from the persistence.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_3__min_birth_max_death(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_2__min_birth_max_death[] = "This function returns (min_birth, max_death) from the persistence.\n\n        :param persistence: The persistence to plot.\n        :type persistence: list of tuples(dimension, tuple(birth, death)).\n        :param band: band\n        :type band: float.\n        :returns: (float, float) -- (min_birth, max_death).\n        ";
static PyMethodDef __pyx_mdef_5gudhi_3__min_birth_max_death = {"__min_birth_max_death", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_3__min_birth_max_death, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_2__min_birth_max_death};
static PyObject *__pyx_pw_5gudhi_3__min_birth_max_death(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_persistence = 0;
  PyObject *__pyx_v_band = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__min_birth_max_death (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_persistence,&__pyx_n_s_band,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_float_0_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_persistence)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_band);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__min_birth_max_death") < 0)) __PYX_ERR(0, 33, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_persistence = values[0];
    __pyx_v_band = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__min_birth_max_death", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 33, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.__min_birth_max_death", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_2__min_birth_max_death(__pyx_self, __pyx_v_persistence, __pyx_v_band);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_2__min_birth_max_death(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_persistence, PyObject *__pyx_v_band) {
  PyObject *__pyx_v_max_death = NULL;
  PyObject *__pyx_v_min_birth = NULL;
  PyObject *__pyx_v_interval = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__min_birth_max_death", 0);

  /* "../../cython/cython/persistence_graphical_tools.py":43
 *         """
 *         # Look for minimum birth date and maximum death date for plot optimisation
 *         max_death = 0             # <<<<<<<<<<<<<<
 *         min_birth = persistence[0][1][0]
 *         for interval in reversed(persistence):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_max_death = __pyx_int_0;

  /* "../../cython/cython/persistence_graphical_tools.py":44
 *         # Look for minimum birth date and maximum death date for plot optimisation
 *         max_death = 0
 *         min_birth = persistence[0][1][0]             # <<<<<<<<<<<<<<
 *         for interval in reversed(persistence):
 *             if float(interval[1][1]) != float('inf'):
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_persistence, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_min_birth = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":45
 *         max_death = 0
 *         min_birth = persistence[0][1][0]
 *         for interval in reversed(persistence):             # <<<<<<<<<<<<<<
 *             if float(interval[1][1]) != float('inf'):
 *                 if float(interval[1][1]) > max_death:
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_reversed, __pyx_v_persistence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 45, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 45, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 45, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 45, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_interval, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":46
 *         min_birth = persistence[0][1][0]
 *         for interval in reversed(persistence):
 *             if float(interval[1][1]) != float('inf'):             # <<<<<<<<<<<<<<
 *                 if float(interval[1][1]) > max_death:
 *                     max_death = float(interval[1][1])
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_AsDouble(__pyx_t_5); if (unlikely(__pyx_t_6 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 46, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyObject_AsDouble(__pyx_n_s_inf); if (unlikely(__pyx_t_7 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 46, __pyx_L1_error)
    __pyx_t_8 = ((__pyx_t_6 != __pyx_t_7) != 0);
    if (__pyx_t_8) {

      /* "../../cython/cython/persistence_graphical_tools.py":47
 *         for interval in reversed(persistence):
 *             if float(interval[1][1]) != float('inf'):
 *                 if float(interval[1][1]) > max_death:             # <<<<<<<<<<<<<<
 *                     max_death = float(interval[1][1])
 *             if float(interval[1][0]) > max_death:
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 47, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyNumber_Float(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 47, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_v_max_death, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_8) {

        /* "../../cython/cython/persistence_graphical_tools.py":48
 *             if float(interval[1][1]) != float('inf'):
 *                 if float(interval[1][1]) > max_death:
 *                     max_death = float(interval[1][1])             # <<<<<<<<<<<<<<
 *             if float(interval[1][0]) > max_death:
 *                 max_death = float(interval[1][0])
 */
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 48, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF_SET(__pyx_v_max_death, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "../../cython/cython/persistence_graphical_tools.py":47
 *         for interval in reversed(persistence):
 *             if float(interval[1][1]) != float('inf'):
 *                 if float(interval[1][1]) > max_death:             # <<<<<<<<<<<<<<
 *                     max_death = float(interval[1][1])
 *             if float(interval[1][0]) > max_death:
 */
      }

      /* "../../cython/cython/persistence_graphical_tools.py":46
 *         min_birth = persistence[0][1][0]
 *         for interval in reversed(persistence):
 *             if float(interval[1][1]) != float('inf'):             # <<<<<<<<<<<<<<
 *                 if float(interval[1][1]) > max_death:
 *                     max_death = float(interval[1][1])
 */
    }

    /* "../../cython/cython/persistence_graphical_tools.py":49
 *                 if float(interval[1][1]) > max_death:
 *                     max_death = float(interval[1][1])
 *             if float(interval[1][0]) > max_death:             # <<<<<<<<<<<<<<
 *                 max_death = float(interval[1][0])
 *             if float(interval[1][0]) < min_birth:
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_v_max_death, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_8) {

      /* "../../cython/cython/persistence_graphical_tools.py":50
 *                     max_death = float(interval[1][1])
 *             if float(interval[1][0]) > max_death:
 *                 max_death = float(interval[1][0])             # <<<<<<<<<<<<<<
 *             if float(interval[1][0]) < min_birth:
 *                 min_birth = float(interval[1][0])
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 50, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyNumber_Float(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 50, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_max_death, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":49
 *                 if float(interval[1][1]) > max_death:
 *                     max_death = float(interval[1][1])
 *             if float(interval[1][0]) > max_death:             # <<<<<<<<<<<<<<
 *                 max_death = float(interval[1][0])
 *             if float(interval[1][0]) < min_birth:
 */
    }

    /* "../../cython/cython/persistence_graphical_tools.py":51
 *             if float(interval[1][0]) > max_death:
 *                 max_death = float(interval[1][0])
 *             if float(interval[1][0]) < min_birth:             # <<<<<<<<<<<<<<
 *                 min_birth = float(interval[1][0])
 *         if band > 0.:
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Float(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_v_min_birth, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_8) {

      /* "../../cython/cython/persistence_graphical_tools.py":52
 *                 max_death = float(interval[1][0])
 *             if float(interval[1][0]) < min_birth:
 *                 min_birth = float(interval[1][0])             # <<<<<<<<<<<<<<
 *         if band > 0.:
 *             max_death += band
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_min_birth, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":51
 *             if float(interval[1][0]) > max_death:
 *                 max_death = float(interval[1][0])
 *             if float(interval[1][0]) < min_birth:             # <<<<<<<<<<<<<<
 *                 min_birth = float(interval[1][0])
 *         if band > 0.:
 */
    }

    /* "../../cython/cython/persistence_graphical_tools.py":45
 *         max_death = 0
 *         min_birth = persistence[0][1][0]
 *         for interval in reversed(persistence):             # <<<<<<<<<<<<<<
 *             if float(interval[1][1]) != float('inf'):
 *                 if float(interval[1][1]) > max_death:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":53
 *             if float(interval[1][0]) < min_birth:
 *                 min_birth = float(interval[1][0])
 *         if band > 0.:             # <<<<<<<<<<<<<<
 *             max_death += band
 *         return (min_birth, max_death)
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_band, __pyx_float_0_, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_8) {

    /* "../../cython/cython/persistence_graphical_tools.py":54
 *                 min_birth = float(interval[1][0])
 *         if band > 0.:
 *             max_death += band             # <<<<<<<<<<<<<<
 *         return (min_birth, max_death)
 * 
 */
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_max_death, __pyx_v_band); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_max_death, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":53
 *             if float(interval[1][0]) < min_birth:
 *                 min_birth = float(interval[1][0])
 *         if band > 0.:             # <<<<<<<<<<<<<<
 *             max_death += band
 *         return (min_birth, max_death)
 */
  }

  /* "../../cython/cython/persistence_graphical_tools.py":55
 *         if band > 0.:
 *             max_death += band
 *         return (min_birth, max_death)             # <<<<<<<<<<<<<<
 * 
 *     """
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_min_birth);
  __Pyx_GIVEREF(__pyx_v_min_birth);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_min_birth);
  __Pyx_INCREF(__pyx_v_max_death);
  __Pyx_GIVEREF(__pyx_v_max_death);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_max_death);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/persistence_graphical_tools.py":33
 *     import os
 * 
 *     def __min_birth_max_death(persistence, band=0.):             # <<<<<<<<<<<<<<
 *         """This function returns (min_birth, max_death) from the persistence.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gudhi.__min_birth_max_death", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_max_death);
  __Pyx_XDECREF(__pyx_v_min_birth);
  __Pyx_XDECREF(__pyx_v_interval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/persistence_graphical_tools.py":64
 *                '#008888']
 * 
 *     def plot_persistence_barcode(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             max_barcodes=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence bar code from persistence values list
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_5plot_persistence_barcode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_4plot_persistence_barcode[] = "This function plots the persistence bar code from persistence values list\n        or from a :doc:`persistence file <fileformats>`.\n\n        :param persistence: Persistence values list.\n        :type persistence: list of tuples(dimension, tuple(birth, death)).\n        :param persistence_file: A :doc:`persistence file <fileformats>` style name\n            (reset persistence if both are set).\n        :type persistence_file: string\n        :param alpha: barcode transparency value (0.0 transparent through 1.0 opaque - default is 0.6).\n        :type alpha: float.\n        :param max_barcodes: number of maximal barcodes to be displayed.\n            Set it to 0 to see all, Default value is 1000.\n            (persistence will be sorted by life time if max_barcodes is set)\n        :type max_barcodes: int.\n        :param inf_delta: Infinity is placed at ((max_death - min_birth) x inf_delta).\n            A reasonable value is between 0.05 and 0.5 - default is 0.1.\n        :type inf_delta: float.\n        :returns: A matplotlib object containing horizontal bar plot of persistence\n            (launch `show()` method on it to display it).\n        ";
static PyMethodDef __pyx_mdef_5gudhi_5plot_persistence_barcode = {"plot_persistence_barcode", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_5plot_persistence_barcode, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_4plot_persistence_barcode};
static PyObject *__pyx_pw_5gudhi_5plot_persistence_barcode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_persistence = 0;
  PyObject *__pyx_v_persistence_file = 0;
  PyObject *__pyx_v_alpha = 0;
  PyObject *__pyx_v_max_barcodes = 0;
  PyObject *__pyx_v_inf_delta = 0;
  PyObject *__pyx_v_legend = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plot_persistence_barcode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_persistence,&__pyx_n_s_persistence_file,&__pyx_n_s_alpha,&__pyx_n_s_max_barcodes,&__pyx_n_s_inf_delta,&__pyx_n_s_legend,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[0] = __pyx_k__12;
    values[1] = ((PyObject *)__pyx_kp_s_);
    values[2] = ((PyObject *)__pyx_float_0_6);
    values[3] = ((PyObject *)__pyx_int_1000);
    values[4] = ((PyObject *)__pyx_float_0_1);

    /* "../../cython/cython/persistence_graphical_tools.py":65
 * 
 *     def plot_persistence_barcode(persistence=[], persistence_file='', alpha=0.6,
 *             max_barcodes=1000, inf_delta=0.1, legend=False):             # <<<<<<<<<<<<<<
 *         """This function plots the persistence bar code from persistence values list
 *         or from a :doc:`persistence file <fileformats>`.
 */
    values[5] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_persistence);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_persistence_file);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_barcodes);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inf_delta);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_legend);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "plot_persistence_barcode") < 0)) __PYX_ERR(0, 64, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_persistence = values[0];
    __pyx_v_persistence_file = values[1];
    __pyx_v_alpha = values[2];
    __pyx_v_max_barcodes = values[3];
    __pyx_v_inf_delta = values[4];
    __pyx_v_legend = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("plot_persistence_barcode", 0, 0, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 64, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.plot_persistence_barcode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_4plot_persistence_barcode(__pyx_self, __pyx_v_persistence, __pyx_v_persistence_file, __pyx_v_alpha, __pyx_v_max_barcodes, __pyx_v_inf_delta, __pyx_v_legend);

  /* "../../cython/cython/persistence_graphical_tools.py":64
 *                '#008888']
 * 
 *     def plot_persistence_barcode(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             max_barcodes=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence bar code from persistence values list
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/persistence_graphical_tools.py":100
 *         if max_barcodes > 0 and max_barcodes < len(persistence):
 *             # Sort by life time, then takes only the max_plots elements
 *             persistence = sorted(persistence, key=lambda life_time: life_time[1][1]-life_time[1][0], reverse=True)[:max_barcodes]             # <<<<<<<<<<<<<<
 * 
 *         persistence = sorted(persistence, key=lambda birth: birth[1][0])
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_24plot_persistence_barcode_lambda(PyObject *__pyx_self, PyObject *__pyx_v_life_time); /*proto*/
static PyMethodDef __pyx_mdef_5gudhi_24plot_persistence_barcode_lambda = {"lambda", (PyCFunction)__pyx_pw_5gudhi_24plot_persistence_barcode_lambda, METH_O, 0};
static PyObject *__pyx_pw_5gudhi_24plot_persistence_barcode_lambda(PyObject *__pyx_self, PyObject *__pyx_v_life_time) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, ((PyObject *)__pyx_v_life_time));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_life_time) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("lambda", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_life_time, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_life_time, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gudhi.plot_persistence_barcode.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/persistence_graphical_tools.py":102
 *             persistence = sorted(persistence, key=lambda life_time: life_time[1][1]-life_time[1][0], reverse=True)[:max_barcodes]
 * 
 *         persistence = sorted(persistence, key=lambda birth: birth[1][0])             # <<<<<<<<<<<<<<
 * 
 *         (min_birth, max_death) = __min_birth_max_death(persistence)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_24plot_persistence_barcode_1lambda1(PyObject *__pyx_self, PyObject *__pyx_v_birth); /*proto*/
static PyMethodDef __pyx_mdef_5gudhi_24plot_persistence_barcode_1lambda1 = {"lambda1", (PyCFunction)__pyx_pw_5gudhi_24plot_persistence_barcode_1lambda1, METH_O, 0};
static PyObject *__pyx_pw_5gudhi_24plot_persistence_barcode_1lambda1(PyObject *__pyx_self, PyObject *__pyx_v_birth) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, ((PyObject *)__pyx_v_birth));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_birth) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_birth, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gudhi.plot_persistence_barcode.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5gudhi_24plot_persistence_barcode_4generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "../../cython/cython/persistence_graphical_tools.py":128
 * 
 *         if legend:
 *             dimensions = list(set(item[0] for item in persistence))             # <<<<<<<<<<<<<<
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim],
 *                                                label=str(dim)) for dim in dimensions],
 */

static PyObject *__pyx_pf_5gudhi_24plot_persistence_barcode_2genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr *)__pyx_tp_new_5gudhi___pyx_scope_struct_1_genexpr(__pyx_ptype_5gudhi___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 128, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5gudhi_24plot_persistence_barcode_4generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_plot_persistence_barcode_locals, __pyx_n_s_gudhi); if (unlikely(!gen)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gudhi.plot_persistence_barcode.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5gudhi_24plot_persistence_barcode_4generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_r = PySet_New(NULL); if (unlikely(!__pyx_r)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_persistence)) { __Pyx_RaiseClosureNameError("persistence"); __PYX_ERR(0, 128, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_persistence)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_persistence)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_persistence; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_persistence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 128, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_item);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_item, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PySet_Add(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/persistence_graphical_tools.py":64
 *                '#008888']
 * 
 *     def plot_persistence_barcode(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             max_barcodes=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence bar code from persistence values list
 */

static PyObject *__pyx_pf_5gudhi_4plot_persistence_barcode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_persistence, PyObject *__pyx_v_persistence_file, PyObject *__pyx_v_alpha, PyObject *__pyx_v_max_barcodes, PyObject *__pyx_v_inf_delta, PyObject *__pyx_v_legend) {
  struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *__pyx_cur_scope;
  PyObject *__pyx_v_diag = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_persistence_interval = NULL;
  PyObject *__pyx_v_min_birth = NULL;
  PyObject *__pyx_v_max_death = NULL;
  PyObject *__pyx_v_ind = NULL;
  PyObject *__pyx_v_delta = NULL;
  PyObject *__pyx_v_infinity = NULL;
  PyObject *__pyx_v_axis_start = NULL;
  PyObject *__pyx_v_interval = NULL;
  PyObject *__pyx_v_dimensions = NULL;
  PyObject *__pyx_v_dim = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  double __pyx_t_13;
  double __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_RefNannySetupContext("plot_persistence_barcode", 0);
  __pyx_cur_scope = (struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *)__pyx_tp_new_5gudhi___pyx_scope_struct__plot_persistence_barcode(__pyx_ptype_5gudhi___pyx_scope_struct__plot_persistence_barcode, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 64, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_persistence = __pyx_v_persistence;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_persistence);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_persistence);

  /* "../../cython/cython/persistence_graphical_tools.py":86
 *             (launch `show()` method on it to display it).
 *         """
 *         if persistence_file is not '':             # <<<<<<<<<<<<<<
 *             if os.path.isfile(persistence_file):
 *                 # Reset persistence
 */
  __pyx_t_1 = (__pyx_v_persistence_file != __pyx_kp_s_);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../cython/cython/persistence_graphical_tools.py":87
 *         """
 *         if persistence_file is not '':
 *             if os.path.isfile(persistence_file):             # <<<<<<<<<<<<<<
 *                 # Reset persistence
 *                 persistence = []
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_isfile); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_persistence_file) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_persistence_file);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "../../cython/cython/persistence_graphical_tools.py":89
 *             if os.path.isfile(persistence_file):
 *                 # Reset persistence
 *                 persistence = []             # <<<<<<<<<<<<<<
 *                 diag = read_persistence_intervals_grouped_by_dimension(persistence_file=persistence_file)
 *                 for key in diag.keys():
 */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_persistence);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_persistence, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":90
 *                 # Reset persistence
 *                 persistence = []
 *                 diag = read_persistence_intervals_grouped_by_dimension(persistence_file=persistence_file)             # <<<<<<<<<<<<<<
 *                 for key in diag.keys():
 *                     for persistence_interval in diag[key]:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_read_persistence_intervals_group); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_persistence_file, __pyx_v_persistence_file) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_diag = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":91
 *                 persistence = []
 *                 diag = read_persistence_intervals_grouped_by_dimension(persistence_file=persistence_file)
 *                 for key in diag.keys():             # <<<<<<<<<<<<<<
 *                     for persistence_interval in diag[key]:
 *                         persistence.append((key, persistence_interval))
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_diag, __pyx_n_s_keys); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 91, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 91, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 91, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 91, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 91, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_7(__pyx_t_4);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 91, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "../../cython/cython/persistence_graphical_tools.py":92
 *                 diag = read_persistence_intervals_grouped_by_dimension(persistence_file=persistence_file)
 *                 for key in diag.keys():
 *                     for persistence_interval in diag[key]:             # <<<<<<<<<<<<<<
 *                         persistence.append((key, persistence_interval))
 *             else:
 */
        __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_diag, __pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 92, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 92, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_3))) {
              if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 92, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 92, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 92, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 92, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_9(__pyx_t_3);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 92, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          __Pyx_XDECREF_SET(__pyx_v_persistence_interval, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "../../cython/cython/persistence_graphical_tools.py":93
 *                 for key in diag.keys():
 *                     for persistence_interval in diag[key]:
 *                         persistence.append((key, persistence_interval))             # <<<<<<<<<<<<<<
 *             else:
 *                 print("file " + persistence_file + " not found.")
 */
          __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 93, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_v_key);
          __Pyx_GIVEREF(__pyx_v_key);
          PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_key);
          __Pyx_INCREF(__pyx_v_persistence_interval);
          __Pyx_GIVEREF(__pyx_v_persistence_interval);
          PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_persistence_interval);
          __pyx_t_10 = __Pyx_PyObject_Append(__pyx_cur_scope->__pyx_v_persistence, __pyx_t_5); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 93, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "../../cython/cython/persistence_graphical_tools.py":92
 *                 diag = read_persistence_intervals_grouped_by_dimension(persistence_file=persistence_file)
 *                 for key in diag.keys():
 *                     for persistence_interval in diag[key]:             # <<<<<<<<<<<<<<
 *                         persistence.append((key, persistence_interval))
 *             else:
 */
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "../../cython/cython/persistence_graphical_tools.py":91
 *                 persistence = []
 *                 diag = read_persistence_intervals_grouped_by_dimension(persistence_file=persistence_file)
 *                 for key in diag.keys():             # <<<<<<<<<<<<<<
 *                     for persistence_interval in diag[key]:
 *                         persistence.append((key, persistence_interval))
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":87
 *         """
 *         if persistence_file is not '':
 *             if os.path.isfile(persistence_file):             # <<<<<<<<<<<<<<
 *                 # Reset persistence
 *                 persistence = []
 */
      goto __pyx_L4;
    }

    /* "../../cython/cython/persistence_graphical_tools.py":95
 *                         persistence.append((key, persistence_interval))
 *             else:
 *                 print("file " + persistence_file + " not found.")             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
    /*else*/ {
      __pyx_t_4 = PyNumber_Add(__pyx_kp_s_file, __pyx_v_persistence_file); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_not_found); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_3) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":96
 *             else:
 *                 print("file " + persistence_file + " not found.")
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         if max_barcodes > 0 and max_barcodes < len(persistence):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;
    }
    __pyx_L4:;

    /* "../../cython/cython/persistence_graphical_tools.py":86
 *             (launch `show()` method on it to display it).
 *         """
 *         if persistence_file is not '':             # <<<<<<<<<<<<<<
 *             if os.path.isfile(persistence_file):
 *                 # Reset persistence
 */
  }

  /* "../../cython/cython/persistence_graphical_tools.py":98
 *                 return None
 * 
 *         if max_barcodes > 0 and max_barcodes < len(persistence):             # <<<<<<<<<<<<<<
 *             # Sort by life time, then takes only the max_plots elements
 *             persistence = sorted(persistence, key=lambda life_time: life_time[1][1]-life_time[1][0], reverse=True)[:max_barcodes]
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_barcodes, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_persistence;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_6 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_max_barcodes, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __pyx_t_1;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_2) {

    /* "../../cython/cython/persistence_graphical_tools.py":100
 *         if max_barcodes > 0 and max_barcodes < len(persistence):
 *             # Sort by life time, then takes only the max_plots elements
 *             persistence = sorted(persistence, key=lambda life_time: life_time[1][1]-life_time[1][0], reverse=True)[:max_barcodes]             # <<<<<<<<<<<<<<
 * 
 *         persistence = sorted(persistence, key=lambda birth: birth[1][0])
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_persistence);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_persistence);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_persistence);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5gudhi_24plot_persistence_barcode_lambda, 0, __pyx_n_s_plot_persistence_barcode_locals_2, NULL, __pyx_n_s_gudhi, __pyx_d, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_key, __pyx_t_5) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_reverse, Py_True) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_5, 0, 0, NULL, &__pyx_v_max_barcodes, NULL, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_persistence);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_persistence, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":98
 *                 return None
 * 
 *         if max_barcodes > 0 and max_barcodes < len(persistence):             # <<<<<<<<<<<<<<
 *             # Sort by life time, then takes only the max_plots elements
 *             persistence = sorted(persistence, key=lambda life_time: life_time[1][1]-life_time[1][0], reverse=True)[:max_barcodes]
 */
  }

  /* "../../cython/cython/persistence_graphical_tools.py":102
 *             persistence = sorted(persistence, key=lambda life_time: life_time[1][1]-life_time[1][0], reverse=True)[:max_barcodes]
 * 
 *         persistence = sorted(persistence, key=lambda birth: birth[1][0])             # <<<<<<<<<<<<<<
 * 
 *         (min_birth, max_death) = __min_birth_max_death(persistence)
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_persistence);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_persistence);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_persistence);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5gudhi_24plot_persistence_barcode_1lambda1, 0, __pyx_n_s_plot_persistence_barcode_locals_2, NULL, __pyx_n_s_gudhi, __pyx_d, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_key, __pyx_t_4) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_persistence);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_persistence, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":104
 *         persistence = sorted(persistence, key=lambda birth: birth[1][0])
 * 
 *         (min_birth, max_death) = __min_birth_max_death(persistence)             # <<<<<<<<<<<<<<
 *         ind = 0
 *         delta = ((max_death - min_birth) * inf_delta)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_min_birth_max_death); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_cur_scope->__pyx_v_persistence) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_persistence);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
    PyObject* sequence = __pyx_t_4;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 104, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
    index = 0; __pyx_t_5 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_5)) goto __pyx_L12_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 1; __pyx_t_3 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_3)) goto __pyx_L12_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
    __pyx_t_12 = NULL;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    goto __pyx_L13_unpacking_done;
    __pyx_L12_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_12 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 104, __pyx_L1_error)
    __pyx_L13_unpacking_done:;
  }
  __pyx_v_min_birth = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_max_death = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":105
 * 
 *         (min_birth, max_death) = __min_birth_max_death(persistence)
 *         ind = 0             # <<<<<<<<<<<<<<
 *         delta = ((max_death - min_birth) * inf_delta)
 *         # Replace infinity values with max_death + delta for bar code to be more
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_ind = __pyx_int_0;

  /* "../../cython/cython/persistence_graphical_tools.py":106
 *         (min_birth, max_death) = __min_birth_max_death(persistence)
 *         ind = 0
 *         delta = ((max_death - min_birth) * inf_delta)             # <<<<<<<<<<<<<<
 *         # Replace infinity values with max_death + delta for bar code to be more
 *         # readable
 */
  __pyx_t_4 = PyNumber_Subtract(__pyx_v_max_death, __pyx_v_min_birth); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_4, __pyx_v_inf_delta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_delta = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":109
 *         # Replace infinity values with max_death + delta for bar code to be more
 *         # readable
 *         infinity = max_death + delta             # <<<<<<<<<<<<<<
 *         axis_start = min_birth - delta
 *         # Draw horizontal bars in loop
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_max_death, __pyx_v_delta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_infinity = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":110
 *         # readable
 *         infinity = max_death + delta
 *         axis_start = min_birth - delta             # <<<<<<<<<<<<<<
 *         # Draw horizontal bars in loop
 *         for interval in reversed(persistence):
 */
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_min_birth, __pyx_v_delta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_axis_start = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":112
 *         axis_start = min_birth - delta
 *         # Draw horizontal bars in loop
 *         for interval in reversed(persistence):             # <<<<<<<<<<<<<<
 *             if float(interval[1][1]) != float('inf'):
 *                 # Finite death case
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_reversed, __pyx_cur_scope->__pyx_v_persistence); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 112, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 112, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 112, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 112, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_interval, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":113
 *         # Draw horizontal bars in loop
 *         for interval in reversed(persistence):
 *             if float(interval[1][1]) != float('inf'):             # <<<<<<<<<<<<<<
 *                 # Finite death case
 *                 plt.barh(ind, (interval[1][1] - interval[1][0]), height=0.8,
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_13 = __Pyx_PyObject_AsDouble(__pyx_t_5); if (unlikely(__pyx_t_13 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_n_s_inf); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 113, __pyx_L1_error)
    __pyx_t_2 = ((__pyx_t_13 != __pyx_t_14) != 0);
    if (__pyx_t_2) {

      /* "../../cython/cython/persistence_graphical_tools.py":115
 *             if float(interval[1][1]) != float('inf'):
 *                 # Finite death case
 *                 plt.barh(ind, (interval[1][1] - interval[1][0]), height=0.8,             # <<<<<<<<<<<<<<
 *                          left = interval[1][0], alpha=alpha,
 *                          color = palette[interval[0]],
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_plt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_barh); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Subtract(__pyx_t_11, __pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_INCREF(__pyx_v_ind);
      __Pyx_GIVEREF(__pyx_v_ind);
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_v_ind);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_height, __pyx_float_0_8) < 0) __PYX_ERR(0, 115, __pyx_L1_error)

      /* "../../cython/cython/persistence_graphical_tools.py":116
 *                 # Finite death case
 *                 plt.barh(ind, (interval[1][1] - interval[1][0]), height=0.8,
 *                          left = interval[1][0], alpha=alpha,             # <<<<<<<<<<<<<<
 *                          color = palette[interval[0]],
 *                          linewidth=0)
 */
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_11, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_left, __pyx_t_16) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_alpha, __pyx_v_alpha) < 0) __PYX_ERR(0, 115, __pyx_L1_error)

      /* "../../cython/cython/persistence_graphical_tools.py":117
 *                 plt.barh(ind, (interval[1][1] - interval[1][0]), height=0.8,
 *                          left = interval[1][0], alpha=alpha,
 *                          color = palette[interval[0]],             # <<<<<<<<<<<<<<
 *                          linewidth=0)
 *             else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_palette); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_interval, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_17 = __Pyx_PyObject_GetItem(__pyx_t_16, __pyx_t_11); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_color, __pyx_t_17) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_linewidth, __pyx_int_0) < 0) __PYX_ERR(0, 115, __pyx_L1_error)

      /* "../../cython/cython/persistence_graphical_tools.py":115
 *             if float(interval[1][1]) != float('inf'):
 *                 # Finite death case
 *                 plt.barh(ind, (interval[1][1] - interval[1][0]), height=0.8,             # <<<<<<<<<<<<<<
 *                          left = interval[1][0], alpha=alpha,
 *                          color = palette[interval[0]],
 */
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_15, __pyx_t_5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":113
 *         # Draw horizontal bars in loop
 *         for interval in reversed(persistence):
 *             if float(interval[1][1]) != float('inf'):             # <<<<<<<<<<<<<<
 *                 # Finite death case
 *                 plt.barh(ind, (interval[1][1] - interval[1][0]), height=0.8,
 */
      goto __pyx_L16;
    }

    /* "../../cython/cython/persistence_graphical_tools.py":121
 *             else:
 *                 # Infinite death case for diagram to be nicer
 *                 plt.barh(ind, (infinity - interval[1][0]), height=0.8,             # <<<<<<<<<<<<<<
 *                          left = interval[1][0], alpha=alpha,
 *                          color = palette[interval[0]],
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_plt); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_barh); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_17, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = PyNumber_Subtract(__pyx_v_infinity, __pyx_t_15); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_INCREF(__pyx_v_ind);
      __Pyx_GIVEREF(__pyx_v_ind);
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_v_ind);
      __Pyx_GIVEREF(__pyx_t_17);
      PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_17);
      __pyx_t_17 = 0;
      __pyx_t_17 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_height, __pyx_float_0_8) < 0) __PYX_ERR(0, 121, __pyx_L1_error)

      /* "../../cython/cython/persistence_graphical_tools.py":122
 *                 # Infinite death case for diagram to be nicer
 *                 plt.barh(ind, (infinity - interval[1][0]), height=0.8,
 *                          left = interval[1][0], alpha=alpha,             # <<<<<<<<<<<<<<
 *                          color = palette[interval[0]],
 *                          linewidth=0)
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_left, __pyx_t_11) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_alpha, __pyx_v_alpha) < 0) __PYX_ERR(0, 121, __pyx_L1_error)

      /* "../../cython/cython/persistence_graphical_tools.py":123
 *                 plt.barh(ind, (infinity - interval[1][0]), height=0.8,
 *                          left = interval[1][0], alpha=alpha,
 *                          color = palette[interval[0]],             # <<<<<<<<<<<<<<
 *                          linewidth=0)
 *             ind = ind + 1
 */
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_palette); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_interval, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_16 = __Pyx_PyObject_GetItem(__pyx_t_11, __pyx_t_3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_color, __pyx_t_16) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_linewidth, __pyx_int_0) < 0) __PYX_ERR(0, 121, __pyx_L1_error)

      /* "../../cython/cython/persistence_graphical_tools.py":121
 *             else:
 *                 # Infinite death case for diagram to be nicer
 *                 plt.barh(ind, (infinity - interval[1][0]), height=0.8,             # <<<<<<<<<<<<<<
 *                          left = interval[1][0], alpha=alpha,
 *                          color = palette[interval[0]],
 */
      __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_15, __pyx_t_17); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __pyx_L16:;

    /* "../../cython/cython/persistence_graphical_tools.py":125
 *                          color = palette[interval[0]],
 *                          linewidth=0)
 *             ind = ind + 1             # <<<<<<<<<<<<<<
 * 
 *         if legend:
 */
    __pyx_t_16 = __Pyx_PyInt_AddObjC(__pyx_v_ind, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF_SET(__pyx_v_ind, __pyx_t_16);
    __pyx_t_16 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":112
 *         axis_start = min_birth - delta
 *         # Draw horizontal bars in loop
 *         for interval in reversed(persistence):             # <<<<<<<<<<<<<<
 *             if float(interval[1][1]) != float('inf'):
 *                 # Finite death case
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":127
 *             ind = ind + 1
 * 
 *         if legend:             # <<<<<<<<<<<<<<
 *             dimensions = list(set(item[0] for item in persistence))
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim],
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_legend); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 127, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "../../cython/cython/persistence_graphical_tools.py":128
 * 
 *         if legend:
 *             dimensions = list(set(item[0] for item in persistence))             # <<<<<<<<<<<<<<
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim],
 *                                                label=str(dim)) for dim in dimensions],
 */
    __pyx_t_4 = __pyx_pf_5gudhi_24plot_persistence_barcode_2genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_16 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PySequence_List(__pyx_t_16); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_dimensions = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":129
 *         if legend:
 *             dimensions = list(set(item[0] for item in persistence))
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim],             # <<<<<<<<<<<<<<
 *                                                label=str(dim)) for dim in dimensions],
 *                        loc='lower right')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_plt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_legend); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_17 = PyList_New(0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);

    /* "../../cython/cython/persistence_graphical_tools.py":130
 *             dimensions = list(set(item[0] for item in persistence))
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim],
 *                                                label=str(dim)) for dim in dimensions],             # <<<<<<<<<<<<<<
 *                        loc='lower right')
 *         plt.title('Persistence barcode')
 */
    __pyx_t_15 = __pyx_v_dimensions; __Pyx_INCREF(__pyx_t_15); __pyx_t_6 = 0;
    for (;;) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_15)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 130, __pyx_L1_error)
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_15, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_dim, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":129
 *         if legend:
 *             dimensions = list(set(item[0] for item in persistence))
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim],             # <<<<<<<<<<<<<<
 *                                                label=str(dim)) for dim in dimensions],
 *                        loc='lower right')
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_mpatches); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Patch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_palette); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_18 = __Pyx_PyObject_GetItem(__pyx_t_11, __pyx_v_dim); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_color, __pyx_t_18) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":130
 *             dimensions = list(set(item[0] for item in persistence))
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim],
 *                                                label=str(dim)) for dim in dimensions],             # <<<<<<<<<<<<<<
 *                        loc='lower right')
 *         plt.title('Persistence barcode')
 */
      __pyx_t_18 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_dim); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_label, __pyx_t_18) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":129
 *         if legend:
 *             dimensions = list(set(item[0] for item in persistence))
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim],             # <<<<<<<<<<<<<<
 *                                                label=str(dim)) for dim in dimensions],
 *                        loc='lower right')
 */
      __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_17, (PyObject*)__pyx_t_18))) __PYX_ERR(0, 129, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":130
 *             dimensions = list(set(item[0] for item in persistence))
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim],
 *                                                label=str(dim)) for dim in dimensions],             # <<<<<<<<<<<<<<
 *                        loc='lower right')
 *         plt.title('Persistence barcode')
 */
    }
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_handles, __pyx_t_17) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_loc, __pyx_kp_s_lower_right) < 0) __PYX_ERR(0, 129, __pyx_L1_error)

    /* "../../cython/cython/persistence_graphical_tools.py":129
 *         if legend:
 *             dimensions = list(set(item[0] for item in persistence))
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim],             # <<<<<<<<<<<<<<
 *                                                label=str(dim)) for dim in dimensions],
 *                        loc='lower right')
 */
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":127
 *             ind = ind + 1
 * 
 *         if legend:             # <<<<<<<<<<<<<<
 *             dimensions = list(set(item[0] for item in persistence))
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim],
 */
  }

  /* "../../cython/cython/persistence_graphical_tools.py":132
 *                                                label=str(dim)) for dim in dimensions],
 *                        loc='lower right')
 *         plt.title('Persistence barcode')             # <<<<<<<<<<<<<<
 *         # Ends plot on infinity value and starts a little bit before min_birth
 *         plt.axis([axis_start, infinity, 0, ind])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_plt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_title); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_16);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_16, function);
    }
  }
  __pyx_t_17 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_4, __pyx_kp_s_Persistence_barcode) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_kp_s_Persistence_barcode);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":134
 *         plt.title('Persistence barcode')
 *         # Ends plot on infinity value and starts a little bit before min_birth
 *         plt.axis([axis_start, infinity, 0, ind])             # <<<<<<<<<<<<<<
 *         return plt
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_plt); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_axis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyList_New(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_v_axis_start);
  __Pyx_GIVEREF(__pyx_v_axis_start);
  PyList_SET_ITEM(__pyx_t_16, 0, __pyx_v_axis_start);
  __Pyx_INCREF(__pyx_v_infinity);
  __Pyx_GIVEREF(__pyx_v_infinity);
  PyList_SET_ITEM(__pyx_t_16, 1, __pyx_v_infinity);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_16, 2, __pyx_int_0);
  __Pyx_INCREF(__pyx_v_ind);
  __Pyx_GIVEREF(__pyx_v_ind);
  PyList_SET_ITEM(__pyx_t_16, 3, __pyx_v_ind);
  __pyx_t_15 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_17 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_15, __pyx_t_16) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_16);
  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":135
 *         # Ends plot on infinity value and starts a little bit before min_birth
 *         plt.axis([axis_start, infinity, 0, ind])
 *         return plt             # <<<<<<<<<<<<<<
 * 
 *     def plot_persistence_diagram(persistence=[], persistence_file='', alpha=0.6,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_plt); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_r = __pyx_t_17;
  __pyx_t_17 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/persistence_graphical_tools.py":64
 *                '#008888']
 * 
 *     def plot_persistence_barcode(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             max_barcodes=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence bar code from persistence values list
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("gudhi.plot_persistence_barcode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_diag);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_persistence_interval);
  __Pyx_XDECREF(__pyx_v_min_birth);
  __Pyx_XDECREF(__pyx_v_max_death);
  __Pyx_XDECREF(__pyx_v_ind);
  __Pyx_XDECREF(__pyx_v_delta);
  __Pyx_XDECREF(__pyx_v_infinity);
  __Pyx_XDECREF(__pyx_v_axis_start);
  __Pyx_XDECREF(__pyx_v_interval);
  __Pyx_XDECREF(__pyx_v_dimensions);
  __Pyx_XDECREF(__pyx_v_dim);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/persistence_graphical_tools.py":137
 *         return plt
 * 
 *     def plot_persistence_diagram(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             band=0., max_plots=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence diagram from persistence values list
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_7plot_persistence_diagram(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_6plot_persistence_diagram[] = "This function plots the persistence diagram from persistence values list\n        or from a :doc:`persistence file <fileformats>`.\n\n        :param persistence: Persistence values list.\n        :type persistence: list of tuples(dimension, tuple(birth, death)).\n        :param persistence_file: A :doc:`persistence file <fileformats>` style name\n            (reset persistence if both are set).\n        :type persistence_file: string\n        :param alpha: plot transparency value (0.0 transparent through 1.0 opaque - default is 0.6).\n        :type alpha: float.\n        :param band: band (not displayed if :math:`\\leq` 0. - default is 0.)\n        :type band: float.\n        :param max_plots: number of maximal plots to be displayed\n            Set it to 0 to see all, Default value is 1000.\n            (persistence will be sorted by life time if max_plots is set)\n        :type max_plots: int.\n        :param inf_delta: Infinity is placed at ((max_death - min_birth) x inf_delta).\n            A reasonable value is between 0.05 and 0.5 - default is 0.1.\n        :type inf_delta: float.\n        :returns: A matplotlib object containing diagram plot of persistence\n            (launch `show()` method on it to display it).\n        ";
static PyMethodDef __pyx_mdef_5gudhi_7plot_persistence_diagram = {"plot_persistence_diagram", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_7plot_persistence_diagram, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_6plot_persistence_diagram};
static PyObject *__pyx_pw_5gudhi_7plot_persistence_diagram(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_persistence = 0;
  PyObject *__pyx_v_persistence_file = 0;
  PyObject *__pyx_v_alpha = 0;
  PyObject *__pyx_v_band = 0;
  PyObject *__pyx_v_max_plots = 0;
  PyObject *__pyx_v_inf_delta = 0;
  PyObject *__pyx_v_legend = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plot_persistence_diagram (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_persistence,&__pyx_n_s_persistence_file,&__pyx_n_s_alpha,&__pyx_n_s_band,&__pyx_n_s_max_plots,&__pyx_n_s_inf_delta,&__pyx_n_s_legend,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[0] = __pyx_k__13;
    values[1] = ((PyObject *)__pyx_kp_s_);
    values[2] = ((PyObject *)__pyx_float_0_6);
    values[3] = ((PyObject *)__pyx_float_0_);
    values[4] = ((PyObject *)__pyx_int_1000);
    values[5] = ((PyObject *)__pyx_float_0_1);

    /* "../../cython/cython/persistence_graphical_tools.py":138
 * 
 *     def plot_persistence_diagram(persistence=[], persistence_file='', alpha=0.6,
 *             band=0., max_plots=1000, inf_delta=0.1, legend=False):             # <<<<<<<<<<<<<<
 *         """This function plots the persistence diagram from persistence values list
 *         or from a :doc:`persistence file <fileformats>`.
 */
    values[6] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_persistence);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_persistence_file);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_band);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_plots);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inf_delta);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_legend);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "plot_persistence_diagram") < 0)) __PYX_ERR(0, 137, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_persistence = values[0];
    __pyx_v_persistence_file = values[1];
    __pyx_v_alpha = values[2];
    __pyx_v_band = values[3];
    __pyx_v_max_plots = values[4];
    __pyx_v_inf_delta = values[5];
    __pyx_v_legend = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("plot_persistence_diagram", 0, 0, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 137, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.plot_persistence_diagram", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_6plot_persistence_diagram(__pyx_self, __pyx_v_persistence, __pyx_v_persistence_file, __pyx_v_alpha, __pyx_v_band, __pyx_v_max_plots, __pyx_v_inf_delta, __pyx_v_legend);

  /* "../../cython/cython/persistence_graphical_tools.py":137
 *         return plt
 * 
 *     def plot_persistence_diagram(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             band=0., max_plots=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence diagram from persistence values list
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/persistence_graphical_tools.py":175
 *         if max_plots > 0 and max_plots < len(persistence):
 *             # Sort by life time, then takes only the max_plots elements
 *             persistence = sorted(persistence, key=lambda life_time: life_time[1][1]-life_time[1][0], reverse=True)[:max_plots]             # <<<<<<<<<<<<<<
 * 
 *         (min_birth, max_death) = __min_birth_max_death(persistence, band)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_24plot_persistence_diagram_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_life_time); /*proto*/
static PyMethodDef __pyx_mdef_5gudhi_24plot_persistence_diagram_lambda3 = {"lambda3", (PyCFunction)__pyx_pw_5gudhi_24plot_persistence_diagram_lambda3, METH_O, 0};
static PyObject *__pyx_pw_5gudhi_24plot_persistence_diagram_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_life_time) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda3 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda3(__pyx_self, ((PyObject *)__pyx_v_life_time));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_life_time) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("lambda3", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_life_time, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_life_time, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gudhi.plot_persistence_diagram.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5gudhi_24plot_persistence_diagram_3generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "../../cython/cython/persistence_graphical_tools.py":208
 * 
 *         if legend:
 *             dimensions = list(set(item[0] for item in persistence))             # <<<<<<<<<<<<<<
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim], label=str(dim)) for dim in dimensions])
 * 
 */

static PyObject *__pyx_pf_5gudhi_24plot_persistence_diagram_1genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr *)__pyx_tp_new_5gudhi___pyx_scope_struct_3_genexpr(__pyx_ptype_5gudhi___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 208, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5gudhi_24plot_persistence_diagram_3generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_plot_persistence_diagram_locals, __pyx_n_s_gudhi); if (unlikely(!gen)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gudhi.plot_persistence_diagram.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5gudhi_24plot_persistence_diagram_3generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 208, __pyx_L1_error)
  __pyx_r = PySet_New(NULL); if (unlikely(!__pyx_r)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_persistence)) { __Pyx_RaiseClosureNameError("persistence"); __PYX_ERR(0, 208, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_persistence)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_persistence)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_persistence; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_persistence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 208, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 208, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 208, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_item);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_item, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PySet_Add(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/persistence_graphical_tools.py":137
 *         return plt
 * 
 *     def plot_persistence_diagram(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             band=0., max_plots=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence diagram from persistence values list
 */

static PyObject *__pyx_pf_5gudhi_6plot_persistence_diagram(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_persistence, PyObject *__pyx_v_persistence_file, PyObject *__pyx_v_alpha, PyObject *__pyx_v_band, PyObject *__pyx_v_max_plots, PyObject *__pyx_v_inf_delta, PyObject *__pyx_v_legend) {
  struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *__pyx_cur_scope;
  PyObject *__pyx_v_diag = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_persistence_interval = NULL;
  PyObject *__pyx_v_min_birth = NULL;
  PyObject *__pyx_v_max_death = NULL;
  PyObject *__pyx_v_ind = NULL;
  PyObject *__pyx_v_delta = NULL;
  PyObject *__pyx_v_infinity = NULL;
  PyObject *__pyx_v_axis_start = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_interval = NULL;
  PyObject *__pyx_v_dimensions = NULL;
  PyObject *__pyx_v_dim = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  double __pyx_t_14;
  double __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_RefNannySetupContext("plot_persistence_diagram", 0);
  __pyx_cur_scope = (struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *)__pyx_tp_new_5gudhi___pyx_scope_struct_2_plot_persistence_diagram(__pyx_ptype_5gudhi___pyx_scope_struct_2_plot_persistence_diagram, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 137, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_persistence = __pyx_v_persistence;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_persistence);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_persistence);

  /* "../../cython/cython/persistence_graphical_tools.py":161
 *             (launch `show()` method on it to display it).
 *         """
 *         if persistence_file is not '':             # <<<<<<<<<<<<<<
 *             if os.path.isfile(persistence_file):
 *                 # Reset persistence
 */
  __pyx_t_1 = (__pyx_v_persistence_file != __pyx_kp_s_);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../cython/cython/persistence_graphical_tools.py":162
 *         """
 *         if persistence_file is not '':
 *             if os.path.isfile(persistence_file):             # <<<<<<<<<<<<<<
 *                 # Reset persistence
 *                 persistence = []
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_isfile); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_persistence_file) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_persistence_file);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "../../cython/cython/persistence_graphical_tools.py":164
 *             if os.path.isfile(persistence_file):
 *                 # Reset persistence
 *                 persistence = []             # <<<<<<<<<<<<<<
 *                 diag = read_persistence_intervals_grouped_by_dimension(persistence_file=persistence_file)
 *                 for key in diag.keys():
 */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_persistence);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_persistence, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":165
 *                 # Reset persistence
 *                 persistence = []
 *                 diag = read_persistence_intervals_grouped_by_dimension(persistence_file=persistence_file)             # <<<<<<<<<<<<<<
 *                 for key in diag.keys():
 *                     for persistence_interval in diag[key]:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_read_persistence_intervals_group); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_persistence_file, __pyx_v_persistence_file) < 0) __PYX_ERR(0, 165, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_diag = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":166
 *                 persistence = []
 *                 diag = read_persistence_intervals_grouped_by_dimension(persistence_file=persistence_file)
 *                 for key in diag.keys():             # <<<<<<<<<<<<<<
 *                     for persistence_interval in diag[key]:
 *                         persistence.append((key, persistence_interval))
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_diag, __pyx_n_s_keys); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 166, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 166, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 166, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 166, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 166, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_7(__pyx_t_4);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 166, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "../../cython/cython/persistence_graphical_tools.py":167
 *                 diag = read_persistence_intervals_grouped_by_dimension(persistence_file=persistence_file)
 *                 for key in diag.keys():
 *                     for persistence_interval in diag[key]:             # <<<<<<<<<<<<<<
 *                         persistence.append((key, persistence_interval))
 *             else:
 */
        __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_diag, __pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 167, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_3))) {
              if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 167, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 167, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_9(__pyx_t_3);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 167, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          __Pyx_XDECREF_SET(__pyx_v_persistence_interval, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "../../cython/cython/persistence_graphical_tools.py":168
 *                 for key in diag.keys():
 *                     for persistence_interval in diag[key]:
 *                         persistence.append((key, persistence_interval))             # <<<<<<<<<<<<<<
 *             else:
 *                 print("file " + persistence_file + " not found.")
 */
          __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 168, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_v_key);
          __Pyx_GIVEREF(__pyx_v_key);
          PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_key);
          __Pyx_INCREF(__pyx_v_persistence_interval);
          __Pyx_GIVEREF(__pyx_v_persistence_interval);
          PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_persistence_interval);
          __pyx_t_10 = __Pyx_PyObject_Append(__pyx_cur_scope->__pyx_v_persistence, __pyx_t_5); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 168, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "../../cython/cython/persistence_graphical_tools.py":167
 *                 diag = read_persistence_intervals_grouped_by_dimension(persistence_file=persistence_file)
 *                 for key in diag.keys():
 *                     for persistence_interval in diag[key]:             # <<<<<<<<<<<<<<
 *                         persistence.append((key, persistence_interval))
 *             else:
 */
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "../../cython/cython/persistence_graphical_tools.py":166
 *                 persistence = []
 *                 diag = read_persistence_intervals_grouped_by_dimension(persistence_file=persistence_file)
 *                 for key in diag.keys():             # <<<<<<<<<<<<<<
 *                     for persistence_interval in diag[key]:
 *                         persistence.append((key, persistence_interval))
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":162
 *         """
 *         if persistence_file is not '':
 *             if os.path.isfile(persistence_file):             # <<<<<<<<<<<<<<
 *                 # Reset persistence
 *                 persistence = []
 */
      goto __pyx_L4;
    }

    /* "../../cython/cython/persistence_graphical_tools.py":170
 *                         persistence.append((key, persistence_interval))
 *             else:
 *                 print("file " + persistence_file + " not found.")             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
    /*else*/ {
      __pyx_t_4 = PyNumber_Add(__pyx_kp_s_file, __pyx_v_persistence_file); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_not_found); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_3) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":171
 *             else:
 *                 print("file " + persistence_file + " not found.")
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         if max_plots > 0 and max_plots < len(persistence):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;
    }
    __pyx_L4:;

    /* "../../cython/cython/persistence_graphical_tools.py":161
 *             (launch `show()` method on it to display it).
 *         """
 *         if persistence_file is not '':             # <<<<<<<<<<<<<<
 *             if os.path.isfile(persistence_file):
 *                 # Reset persistence
 */
  }

  /* "../../cython/cython/persistence_graphical_tools.py":173
 *                 return None
 * 
 *         if max_plots > 0 and max_plots < len(persistence):             # <<<<<<<<<<<<<<
 *             # Sort by life time, then takes only the max_plots elements
 *             persistence = sorted(persistence, key=lambda life_time: life_time[1][1]-life_time[1][0], reverse=True)[:max_plots]
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_plots, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_persistence;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_6 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_max_plots, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __pyx_t_1;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_2) {

    /* "../../cython/cython/persistence_graphical_tools.py":175
 *         if max_plots > 0 and max_plots < len(persistence):
 *             # Sort by life time, then takes only the max_plots elements
 *             persistence = sorted(persistence, key=lambda life_time: life_time[1][1]-life_time[1][0], reverse=True)[:max_plots]             # <<<<<<<<<<<<<<
 * 
 *         (min_birth, max_death) = __min_birth_max_death(persistence, band)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_persistence);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_persistence);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_persistence);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5gudhi_24plot_persistence_diagram_lambda3, 0, __pyx_n_s_plot_persistence_diagram_locals_2, NULL, __pyx_n_s_gudhi, __pyx_d, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_key, __pyx_t_5) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_reverse, Py_True) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_5, 0, 0, NULL, &__pyx_v_max_plots, NULL, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_persistence);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_persistence, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":173
 *                 return None
 * 
 *         if max_plots > 0 and max_plots < len(persistence):             # <<<<<<<<<<<<<<
 *             # Sort by life time, then takes only the max_plots elements
 *             persistence = sorted(persistence, key=lambda life_time: life_time[1][1]-life_time[1][0], reverse=True)[:max_plots]
 */
  }

  /* "../../cython/cython/persistence_graphical_tools.py":177
 *             persistence = sorted(persistence, key=lambda life_time: life_time[1][1]-life_time[1][0], reverse=True)[:max_plots]
 * 
 *         (min_birth, max_death) = __min_birth_max_death(persistence, band)             # <<<<<<<<<<<<<<
 *         ind = 0
 *         delta = ((max_death - min_birth) * inf_delta)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_min_birth_max_death); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_cur_scope->__pyx_v_persistence, __pyx_v_band};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_cur_scope->__pyx_v_persistence, __pyx_v_band};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_persistence);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_persistence);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_cur_scope->__pyx_v_persistence);
    __Pyx_INCREF(__pyx_v_band);
    __Pyx_GIVEREF(__pyx_v_band);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_v_band);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 177, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_12);
    #else
    __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_5 = __pyx_t_13(__pyx_t_4); if (unlikely(!__pyx_t_5)) goto __pyx_L12_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 1; __pyx_t_12 = __pyx_t_13(__pyx_t_4); if (unlikely(!__pyx_t_12)) goto __pyx_L12_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_12);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_4), 2) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
    __pyx_t_13 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L13_unpacking_done;
    __pyx_L12_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_13 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 177, __pyx_L1_error)
    __pyx_L13_unpacking_done:;
  }
  __pyx_v_min_birth = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_max_death = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":178
 * 
 *         (min_birth, max_death) = __min_birth_max_death(persistence, band)
 *         ind = 0             # <<<<<<<<<<<<<<
 *         delta = ((max_death - min_birth) * inf_delta)
 *         # Replace infinity values with max_death + delta for diagram to be more
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_ind = __pyx_int_0;

  /* "../../cython/cython/persistence_graphical_tools.py":179
 *         (min_birth, max_death) = __min_birth_max_death(persistence, band)
 *         ind = 0
 *         delta = ((max_death - min_birth) * inf_delta)             # <<<<<<<<<<<<<<
 *         # Replace infinity values with max_death + delta for diagram to be more
 *         # readable
 */
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_max_death, __pyx_v_min_birth); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = PyNumber_Multiply(__pyx_t_3, __pyx_v_inf_delta); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_delta = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":182
 *         # Replace infinity values with max_death + delta for diagram to be more
 *         # readable
 *         infinity = max_death + delta             # <<<<<<<<<<<<<<
 *         axis_start = min_birth - delta
 * 
 */
  __pyx_t_12 = PyNumber_Add(__pyx_v_max_death, __pyx_v_delta); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_infinity = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":183
 *         # readable
 *         infinity = max_death + delta
 *         axis_start = min_birth - delta             # <<<<<<<<<<<<<<
 * 
 *         # line display of equation : birth = death
 */
  __pyx_t_12 = PyNumber_Subtract(__pyx_v_min_birth, __pyx_v_delta); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_axis_start = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":186
 * 
 *         # line display of equation : birth = death
 *         x = np.linspace(axis_start, infinity, 1000)             # <<<<<<<<<<<<<<
 *         # infinity line and text
 *         plt.plot(x, x, color='k', linewidth=1.0)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_linspace); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_axis_start, __pyx_v_infinity, __pyx_int_1000};
    __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_12);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_axis_start, __pyx_v_infinity, __pyx_int_1000};
    __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_12);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(3+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_axis_start);
    __Pyx_GIVEREF(__pyx_v_axis_start);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_11, __pyx_v_axis_start);
    __Pyx_INCREF(__pyx_v_infinity);
    __Pyx_GIVEREF(__pyx_v_infinity);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_11, __pyx_v_infinity);
    __Pyx_INCREF(__pyx_int_1000);
    __Pyx_GIVEREF(__pyx_int_1000);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_11, __pyx_int_1000);
    __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_x = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":188
 *         x = np.linspace(axis_start, infinity, 1000)
 *         # infinity line and text
 *         plt.plot(x, x, color='k', linewidth=1.0)             # <<<<<<<<<<<<<<
 *         plt.plot(x, [infinity] * len(x), linewidth=1.0, color='k', alpha=alpha)
 *         plt.text(axis_start, infinity, r'$\infty$', color='k', alpha=alpha)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_plt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_plot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_x);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_v_x);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_color, __pyx_n_s_k) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_linewidth, __pyx_float_1_0) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":189
 *         # infinity line and text
 *         plt.plot(x, x, color='k', linewidth=1.0)
 *         plt.plot(x, [infinity] * len(x), linewidth=1.0, color='k', alpha=alpha)             # <<<<<<<<<<<<<<
 *         plt.text(axis_start, infinity, r'$\infty$', color='k', alpha=alpha)
 *         # bootstrap band
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_plt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_plot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 189, __pyx_L1_error)
  __pyx_t_3 = PyList_New(1 * ((__pyx_t_6<0) ? 0:__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_6; __pyx_temp++) {
      __Pyx_INCREF(__pyx_v_infinity);
      __Pyx_GIVEREF(__pyx_v_infinity);
      PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_v_infinity);
    }
  }
  __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_x);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_linewidth, __pyx_float_1_0) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_color, __pyx_n_s_k) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_alpha, __pyx_v_alpha) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_12, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":190
 *         plt.plot(x, x, color='k', linewidth=1.0)
 *         plt.plot(x, [infinity] * len(x), linewidth=1.0, color='k', alpha=alpha)
 *         plt.text(axis_start, infinity, r'$\infty$', color='k', alpha=alpha)             # <<<<<<<<<<<<<<
 *         # bootstrap band
 *         if band > 0.:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_plt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_axis_start);
  __Pyx_GIVEREF(__pyx_v_axis_start);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_axis_start);
  __Pyx_INCREF(__pyx_v_infinity);
  __Pyx_GIVEREF(__pyx_v_infinity);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_infinity);
  __Pyx_INCREF(__pyx_kp_s_infty);
  __Pyx_GIVEREF(__pyx_kp_s_infty);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_s_infty);
  __pyx_t_12 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_color, __pyx_n_s_k) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_alpha, __pyx_v_alpha) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":192
 *         plt.text(axis_start, infinity, r'$\infty$', color='k', alpha=alpha)
 *         # bootstrap band
 *         if band > 0.:             # <<<<<<<<<<<<<<
 *             plt.fill_between(x, x, x+band, alpha=alpha, facecolor='red')
 * 
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_band, __pyx_float_0_, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "../../cython/cython/persistence_graphical_tools.py":193
 *         # bootstrap band
 *         if band > 0.:
 *             plt.fill_between(x, x, x+band, alpha=alpha, facecolor='red')             # <<<<<<<<<<<<<<
 * 
 *         # Draw points in loop
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_plt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_fill_between); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_v_band); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_x);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_alpha, __pyx_v_alpha) < 0) __PYX_ERR(0, 193, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_facecolor, __pyx_n_s_red) < 0) __PYX_ERR(0, 193, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":192
 *         plt.text(axis_start, infinity, r'$\infty$', color='k', alpha=alpha)
 *         # bootstrap band
 *         if band > 0.:             # <<<<<<<<<<<<<<
 *             plt.fill_between(x, x, x+band, alpha=alpha, facecolor='red')
 * 
 */
  }

  /* "../../cython/cython/persistence_graphical_tools.py":196
 * 
 *         # Draw points in loop
 *         for interval in reversed(persistence):             # <<<<<<<<<<<<<<
 *             if float(interval[1][1]) != float('inf'):
 *                 # Finite death case
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_reversed, __pyx_cur_scope->__pyx_v_persistence); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 196, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 196, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 196, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 196, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_interval, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":197
 *         # Draw points in loop
 *         for interval in reversed(persistence):
 *             if float(interval[1][1]) != float('inf'):             # <<<<<<<<<<<<<<
 *                 # Finite death case
 *                 plt.scatter(interval[1][0], interval[1][1], alpha=alpha,
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_5); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_15 = __Pyx_PyObject_AsDouble(__pyx_n_s_inf); if (unlikely(__pyx_t_15 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L1_error)
    __pyx_t_2 = ((__pyx_t_14 != __pyx_t_15) != 0);
    if (__pyx_t_2) {

      /* "../../cython/cython/persistence_graphical_tools.py":199
 *             if float(interval[1][1]) != float('inf'):
 *                 # Finite death case
 *                 plt.scatter(interval[1][0], interval[1][1], alpha=alpha,             # <<<<<<<<<<<<<<
 *                             color = palette[interval[0]])
 *             else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_plt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_scatter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_16);
      __pyx_t_12 = 0;
      __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_alpha, __pyx_v_alpha) < 0) __PYX_ERR(0, 199, __pyx_L1_error)

      /* "../../cython/cython/persistence_graphical_tools.py":200
 *                 # Finite death case
 *                 plt.scatter(interval[1][0], interval[1][1], alpha=alpha,
 *                             color = palette[interval[0]])             # <<<<<<<<<<<<<<
 *             else:
 *                 # Infinite death case for diagram to be nicer
 */
      __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_palette); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_interval, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_18 = __Pyx_PyObject_GetItem(__pyx_t_12, __pyx_t_17); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_color, __pyx_t_18) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":199
 *             if float(interval[1][1]) != float('inf'):
 *                 # Finite death case
 *                 plt.scatter(interval[1][0], interval[1][1], alpha=alpha,             # <<<<<<<<<<<<<<
 *                             color = palette[interval[0]])
 *             else:
 */
      __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_16); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":197
 *         # Draw points in loop
 *         for interval in reversed(persistence):
 *             if float(interval[1][1]) != float('inf'):             # <<<<<<<<<<<<<<
 *                 # Finite death case
 *                 plt.scatter(interval[1][0], interval[1][1], alpha=alpha,
 */
      goto __pyx_L17;
    }

    /* "../../cython/cython/persistence_graphical_tools.py":203
 *             else:
 *                 # Infinite death case for diagram to be nicer
 *                 plt.scatter(interval[1][0], infinity, alpha=alpha,             # <<<<<<<<<<<<<<
 *                             color = palette[interval[0]])
 *             ind = ind + 1
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_plt); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_scatter); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = __Pyx_GetItemInt(__pyx_v_interval, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_18, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_5);
      __Pyx_INCREF(__pyx_v_infinity);
      __Pyx_GIVEREF(__pyx_v_infinity);
      PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_v_infinity);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_alpha, __pyx_v_alpha) < 0) __PYX_ERR(0, 203, __pyx_L1_error)

      /* "../../cython/cython/persistence_graphical_tools.py":204
 *                 # Infinite death case for diagram to be nicer
 *                 plt.scatter(interval[1][0], infinity, alpha=alpha,
 *                             color = palette[interval[0]])             # <<<<<<<<<<<<<<
 *             ind = ind + 1
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_palette); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_interval, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_17); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_color, __pyx_t_12) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":203
 *             else:
 *                 # Infinite death case for diagram to be nicer
 *                 plt.scatter(interval[1][0], infinity, alpha=alpha,             # <<<<<<<<<<<<<<
 *                             color = palette[interval[0]])
 *             ind = ind + 1
 */
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_18, __pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __pyx_L17:;

    /* "../../cython/cython/persistence_graphical_tools.py":205
 *                 plt.scatter(interval[1][0], infinity, alpha=alpha,
 *                             color = palette[interval[0]])
 *             ind = ind + 1             # <<<<<<<<<<<<<<
 * 
 *         if legend:
 */
    __pyx_t_12 = __Pyx_PyInt_AddObjC(__pyx_v_ind, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF_SET(__pyx_v_ind, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":196
 * 
 *         # Draw points in loop
 *         for interval in reversed(persistence):             # <<<<<<<<<<<<<<
 *             if float(interval[1][1]) != float('inf'):
 *                 # Finite death case
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":207
 *             ind = ind + 1
 * 
 *         if legend:             # <<<<<<<<<<<<<<
 *             dimensions = list(set(item[0] for item in persistence))
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim], label=str(dim)) for dim in dimensions])
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_legend); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "../../cython/cython/persistence_graphical_tools.py":208
 * 
 *         if legend:
 *             dimensions = list(set(item[0] for item in persistence))             # <<<<<<<<<<<<<<
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim], label=str(dim)) for dim in dimensions])
 * 
 */
    __pyx_t_4 = __pyx_pf_5gudhi_24plot_persistence_diagram_1genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = __Pyx_Generator_Next(__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PySequence_List(__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_dimensions = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":209
 *         if legend:
 *             dimensions = list(set(item[0] for item in persistence))
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim], label=str(dim)) for dim in dimensions])             # <<<<<<<<<<<<<<
 * 
 *         plt.title('Persistence diagram')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_plt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_legend); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_18 = __pyx_v_dimensions; __Pyx_INCREF(__pyx_t_18); __pyx_t_6 = 0;
    for (;;) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_18)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_16 = PyList_GET_ITEM(__pyx_t_18, __pyx_t_6); __Pyx_INCREF(__pyx_t_16); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 209, __pyx_L1_error)
      #else
      __pyx_t_16 = PySequence_ITEM(__pyx_t_18, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_dim, __pyx_t_16);
      __pyx_t_16 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_mpatches); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_Patch); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_palette); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_19 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_dim); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_color, __pyx_t_19) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_19 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_dim); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_label, __pyx_t_19) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_empty_tuple, __pyx_t_16); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_19))) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_handles, __pyx_t_5) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":207
 *             ind = ind + 1
 * 
 *         if legend:             # <<<<<<<<<<<<<<
 *             dimensions = list(set(item[0] for item in persistence))
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim], label=str(dim)) for dim in dimensions])
 */
  }

  /* "../../cython/cython/persistence_graphical_tools.py":211
 *             plt.legend(handles=[mpatches.Patch(color=palette[dim], label=str(dim)) for dim in dimensions])
 * 
 *         plt.title('Persistence diagram')             # <<<<<<<<<<<<<<
 *         plt.xlabel('Birth')
 *         plt.ylabel('Death')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_plt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_title); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_4, __pyx_kp_s_Persistence_diagram) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_kp_s_Persistence_diagram);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":212
 * 
 *         plt.title('Persistence diagram')
 *         plt.xlabel('Birth')             # <<<<<<<<<<<<<<
 *         plt.ylabel('Death')
 *         # Ends plot on infinity value and starts a little bit before min_birth
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_plt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_xlabel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_12, __pyx_n_s_Birth) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_s_Birth);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":213
 *         plt.title('Persistence diagram')
 *         plt.xlabel('Birth')
 *         plt.ylabel('Death')             # <<<<<<<<<<<<<<
 *         # Ends plot on infinity value and starts a little bit before min_birth
 *         plt.axis([axis_start, infinity, axis_start, infinity + delta])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_plt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ylabel); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_4, __pyx_n_s_Death) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_n_s_Death);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":215
 *         plt.ylabel('Death')
 *         # Ends plot on infinity value and starts a little bit before min_birth
 *         plt.axis([axis_start, infinity, axis_start, infinity + delta])             # <<<<<<<<<<<<<<
 *         return plt
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_plt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_axis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyNumber_Add(__pyx_v_infinity, __pyx_v_delta); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_18 = PyList_New(4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_INCREF(__pyx_v_axis_start);
  __Pyx_GIVEREF(__pyx_v_axis_start);
  PyList_SET_ITEM(__pyx_t_18, 0, __pyx_v_axis_start);
  __Pyx_INCREF(__pyx_v_infinity);
  __Pyx_GIVEREF(__pyx_v_infinity);
  PyList_SET_ITEM(__pyx_t_18, 1, __pyx_v_infinity);
  __Pyx_INCREF(__pyx_v_axis_start);
  __Pyx_GIVEREF(__pyx_v_axis_start);
  PyList_SET_ITEM(__pyx_t_18, 2, __pyx_v_axis_start);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_18, 3, __pyx_t_12);
  __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_12, __pyx_t_18) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_18);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "../../cython/cython/persistence_graphical_tools.py":216
 *         # Ends plot on infinity value and starts a little bit before min_birth
 *         plt.axis([axis_start, infinity, axis_start, infinity + delta])
 *         return plt             # <<<<<<<<<<<<<<
 * 
 * except ImportError:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_plt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/persistence_graphical_tools.py":137
 *         return plt
 * 
 *     def plot_persistence_diagram(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             band=0., max_plots=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence diagram from persistence values list
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("gudhi.plot_persistence_diagram", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_diag);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_persistence_interval);
  __Pyx_XDECREF(__pyx_v_min_birth);
  __Pyx_XDECREF(__pyx_v_max_death);
  __Pyx_XDECREF(__pyx_v_ind);
  __Pyx_XDECREF(__pyx_v_delta);
  __Pyx_XDECREF(__pyx_v_infinity);
  __Pyx_XDECREF(__pyx_v_axis_start);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_interval);
  __Pyx_XDECREF(__pyx_v_dimensions);
  __Pyx_XDECREF(__pyx_v_dim);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/reader_utils.pyx":39
 *     vector[pair[double, double]] read_pers_intervals_in_dimension(string filename, int only_this_dim)
 * 
 * def read_lower_triangular_matrix_from_csv_file(csv_file='', separator=';'):             # <<<<<<<<<<<<<<
 *     """Read lower triangular matrix from a CSV style file.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_9read_lower_triangular_matrix_from_csv_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_8read_lower_triangular_matrix_from_csv_file[] = "Read lower triangular matrix from a CSV style file.\n\n    :param csv_file: A CSV file style name.\n    :type csv_file: string\n    :param separator: The value separator in the CSV file. Default value is ';'\n    :type separator: char\n\n    :returns:  The lower triangular matrix.\n    :rtype: vector[vector[double]]\n    ";
static PyMethodDef __pyx_mdef_5gudhi_9read_lower_triangular_matrix_from_csv_file = {"read_lower_triangular_matrix_from_csv_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_9read_lower_triangular_matrix_from_csv_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_8read_lower_triangular_matrix_from_csv_file};
static PyObject *__pyx_pw_5gudhi_9read_lower_triangular_matrix_from_csv_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_csv_file = 0;
  PyObject *__pyx_v_separator = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_lower_triangular_matrix_from_csv_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_csv_file,&__pyx_n_s_separator,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_kp_s_);
    values[1] = ((PyObject *)__pyx_kp_s__14);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csv_file);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_separator);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_lower_triangular_matrix_from_csv_file") < 0)) __PYX_ERR(7, 39, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_csv_file = values[0];
    __pyx_v_separator = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_lower_triangular_matrix_from_csv_file", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 39, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.read_lower_triangular_matrix_from_csv_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_8read_lower_triangular_matrix_from_csv_file(__pyx_self, __pyx_v_csv_file, __pyx_v_separator);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_8read_lower_triangular_matrix_from_csv_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_csv_file, PyObject *__pyx_v_separator) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  long __pyx_t_7;
  __Pyx_RefNannySetupContext("read_lower_triangular_matrix_from_csv_file", 0);

  /* "../../cython/cython/reader_utils.pyx":50
 *     :rtype: vector[vector[double]]
 *     """
 *     if csv_file is not '':             # <<<<<<<<<<<<<<
 *         if os.path.isfile(csv_file):
 *             return read_matrix_from_csv_file(str.encode(csv_file), ord(separator[0]))
 */
  __pyx_t_1 = (__pyx_v_csv_file != __pyx_kp_s_);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../cython/cython/reader_utils.pyx":51
 *     """
 *     if csv_file is not '':
 *         if os.path.isfile(csv_file):             # <<<<<<<<<<<<<<
 *             return read_matrix_from_csv_file(str.encode(csv_file), ord(separator[0]))
 *     print("file " + csv_file + " not set or not found.")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_isfile); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_csv_file) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_csv_file);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "../../cython/cython/reader_utils.pyx":52
 *     if csv_file is not '':
 *         if os.path.isfile(csv_file):
 *             return read_matrix_from_csv_file(str.encode(csv_file), ord(separator[0]))             # <<<<<<<<<<<<<<
 *     print("file " + csv_file + " not set or not found.")
 *     return []
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyString_Type)), __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_csv_file) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_csv_file);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 52, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_separator, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_Ord(__pyx_t_3); if (unlikely(__pyx_t_7 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(7, 52, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(Gudhi::read_matrix_from_csv_file(__pyx_t_6, __pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "../../cython/cython/reader_utils.pyx":51
 *     """
 *     if csv_file is not '':
 *         if os.path.isfile(csv_file):             # <<<<<<<<<<<<<<
 *             return read_matrix_from_csv_file(str.encode(csv_file), ord(separator[0]))
 *     print("file " + csv_file + " not set or not found.")
 */
    }

    /* "../../cython/cython/reader_utils.pyx":50
 *     :rtype: vector[vector[double]]
 *     """
 *     if csv_file is not '':             # <<<<<<<<<<<<<<
 *         if os.path.isfile(csv_file):
 *             return read_matrix_from_csv_file(str.encode(csv_file), ord(separator[0]))
 */
  }

  /* "../../cython/cython/reader_utils.pyx":53
 *         if os.path.isfile(csv_file):
 *             return read_matrix_from_csv_file(str.encode(csv_file), ord(separator[0]))
 *     print("file " + csv_file + " not set or not found.")             # <<<<<<<<<<<<<<
 *     return []
 * 
 */
  __pyx_t_3 = PyNumber_Add(__pyx_kp_s_file, __pyx_v_csv_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_not_set_or_not_found); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(7, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../../cython/cython/reader_utils.pyx":54
 *             return read_matrix_from_csv_file(str.encode(csv_file), ord(separator[0]))
 *     print("file " + csv_file + " not set or not found.")
 *     return []             # <<<<<<<<<<<<<<
 * 
 * def read_persistence_intervals_grouped_by_dimension(persistence_file=''):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/reader_utils.pyx":39
 *     vector[pair[double, double]] read_pers_intervals_in_dimension(string filename, int only_this_dim)
 * 
 * def read_lower_triangular_matrix_from_csv_file(csv_file='', separator=';'):             # <<<<<<<<<<<<<<
 *     """Read lower triangular matrix from a CSV style file.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gudhi.read_lower_triangular_matrix_from_csv_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/reader_utils.pyx":56
 *     return []
 * 
 * def read_persistence_intervals_grouped_by_dimension(persistence_file=''):             # <<<<<<<<<<<<<<
 *     """Reads a file containing persistence intervals.
 *     Each line might contain 2, 3 or 4 values: [[field] dimension] birth death
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_11read_persistence_intervals_grouped_by_dimension(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_10read_persistence_intervals_grouped_by_dimension[] = "Reads a file containing persistence intervals.\n    Each line might contain 2, 3 or 4 values: [[field] dimension] birth death\n    The return value is an `map[dim, vector[pair[birth, death]]]`\n    where `dim` is an `int`, `birth` a `double`, and `death` a `double`.\n    Note: the function does not check that birth <= death.\n\n    :param persistence_file: A persistence file style name.\n    :type persistence_file: string\n\n    :returns:  The persistence pairs grouped by dimension.\n    :rtype: map[int, vector[pair[double, double]]]\n    ";
static PyMethodDef __pyx_mdef_5gudhi_11read_persistence_intervals_grouped_by_dimension = {"read_persistence_intervals_grouped_by_dimension", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_11read_persistence_intervals_grouped_by_dimension, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_10read_persistence_intervals_grouped_by_dimension};
static PyObject *__pyx_pw_5gudhi_11read_persistence_intervals_grouped_by_dimension(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_persistence_file = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_persistence_intervals_grouped_by_dimension (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_persistence_file,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_persistence_file);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_persistence_intervals_grouped_by_dimension") < 0)) __PYX_ERR(7, 56, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_persistence_file = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_persistence_intervals_grouped_by_dimension", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 56, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.read_persistence_intervals_grouped_by_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_10read_persistence_intervals_grouped_by_dimension(__pyx_self, __pyx_v_persistence_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_10read_persistence_intervals_grouped_by_dimension(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_persistence_file) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  __Pyx_RefNannySetupContext("read_persistence_intervals_grouped_by_dimension", 0);

  /* "../../cython/cython/reader_utils.pyx":69
 *     :rtype: map[int, vector[pair[double, double]]]
 *     """
 *     if persistence_file is not '':             # <<<<<<<<<<<<<<
 *         if os.path.isfile(persistence_file):
 *             return read_pers_intervals_grouped_by_dimension(str.encode(persistence_file))
 */
  __pyx_t_1 = (__pyx_v_persistence_file != __pyx_kp_s_);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../cython/cython/reader_utils.pyx":70
 *     """
 *     if persistence_file is not '':
 *         if os.path.isfile(persistence_file):             # <<<<<<<<<<<<<<
 *             return read_pers_intervals_grouped_by_dimension(str.encode(persistence_file))
 *     print("file " + persistence_file + " not set or not found.")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_isfile); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_persistence_file) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_persistence_file);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 70, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "../../cython/cython/reader_utils.pyx":71
 *     if persistence_file is not '':
 *         if os.path.isfile(persistence_file):
 *             return read_pers_intervals_grouped_by_dimension(str.encode(persistence_file))             # <<<<<<<<<<<<<<
 *     print("file " + persistence_file + " not set or not found.")
 *     return []
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyString_Type)), __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_persistence_file) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_persistence_file);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 71, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(Gudhi::read_pers_intervals_grouped_by_dimension(__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "../../cython/cython/reader_utils.pyx":70
 *     """
 *     if persistence_file is not '':
 *         if os.path.isfile(persistence_file):             # <<<<<<<<<<<<<<
 *             return read_pers_intervals_grouped_by_dimension(str.encode(persistence_file))
 *     print("file " + persistence_file + " not set or not found.")
 */
    }

    /* "../../cython/cython/reader_utils.pyx":69
 *     :rtype: map[int, vector[pair[double, double]]]
 *     """
 *     if persistence_file is not '':             # <<<<<<<<<<<<<<
 *         if os.path.isfile(persistence_file):
 *             return read_pers_intervals_grouped_by_dimension(str.encode(persistence_file))
 */
  }

  /* "../../cython/cython/reader_utils.pyx":72
 *         if os.path.isfile(persistence_file):
 *             return read_pers_intervals_grouped_by_dimension(str.encode(persistence_file))
 *     print("file " + persistence_file + " not set or not found.")             # <<<<<<<<<<<<<<
 *     return []
 * 
 */
  __pyx_t_3 = PyNumber_Add(__pyx_kp_s_file, __pyx_v_persistence_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_not_set_or_not_found); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(7, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../../cython/cython/reader_utils.pyx":73
 *             return read_pers_intervals_grouped_by_dimension(str.encode(persistence_file))
 *     print("file " + persistence_file + " not set or not found.")
 *     return []             # <<<<<<<<<<<<<<
 * 
 * def read_persistence_intervals_in_dimension(persistence_file='', only_this_dim=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/reader_utils.pyx":56
 *     return []
 * 
 * def read_persistence_intervals_grouped_by_dimension(persistence_file=''):             # <<<<<<<<<<<<<<
 *     """Reads a file containing persistence intervals.
 *     Each line might contain 2, 3 or 4 values: [[field] dimension] birth death
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gudhi.read_persistence_intervals_grouped_by_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/reader_utils.pyx":75
 *     return []
 * 
 * def read_persistence_intervals_in_dimension(persistence_file='', only_this_dim=-1):             # <<<<<<<<<<<<<<
 *     """Reads a file containing persistence intervals.
 *     Each line might contain 2, 3 or 4 values: [[field] dimension] birth death
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_13read_persistence_intervals_in_dimension(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_12read_persistence_intervals_in_dimension[] = "Reads a file containing persistence intervals.\n    Each line might contain 2, 3 or 4 values: [[field] dimension] birth death\n    If `only_this_dim` = -1, dimension is ignored and all lines are returned.\n    If `only_this_dim` is >= 0, only the lines where dimension = `only_this_dim`\n    (or where dimension is not specified) are returned.\n    The return value is an `vector[pair[birth, death]]`\n    where `birth` a `double`, and `death` a `double`.\n    Note: the function does not check that birth <= death.\n\n    :param persistence_file: A persistence file style name.\n    :type persistence_file: string\n\n    :returns:  The persistence pairs grouped by dimension.\n    :rtype: map[int, vector[pair[double, double]]]\n    ";
static PyMethodDef __pyx_mdef_5gudhi_13read_persistence_intervals_in_dimension = {"read_persistence_intervals_in_dimension", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_13read_persistence_intervals_in_dimension, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_12read_persistence_intervals_in_dimension};
static PyObject *__pyx_pw_5gudhi_13read_persistence_intervals_in_dimension(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_persistence_file = 0;
  PyObject *__pyx_v_only_this_dim = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_persistence_intervals_in_dimension (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_persistence_file,&__pyx_n_s_only_this_dim,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_kp_s_);
    values[1] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_persistence_file);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_only_this_dim);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_persistence_intervals_in_dimension") < 0)) __PYX_ERR(7, 75, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_persistence_file = values[0];
    __pyx_v_only_this_dim = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_persistence_intervals_in_dimension", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 75, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.read_persistence_intervals_in_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_12read_persistence_intervals_in_dimension(__pyx_self, __pyx_v_persistence_file, __pyx_v_only_this_dim);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_12read_persistence_intervals_in_dimension(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_persistence_file, PyObject *__pyx_v_only_this_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("read_persistence_intervals_in_dimension", 0);

  /* "../../cython/cython/reader_utils.pyx":91
 *     :rtype: map[int, vector[pair[double, double]]]
 *     """
 *     if persistence_file is not '':             # <<<<<<<<<<<<<<
 *         if os.path.isfile(persistence_file):
 *             return read_pers_intervals_in_dimension(str.encode(persistence_file), only_this_dim)
 */
  __pyx_t_1 = (__pyx_v_persistence_file != __pyx_kp_s_);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../cython/cython/reader_utils.pyx":92
 *     """
 *     if persistence_file is not '':
 *         if os.path.isfile(persistence_file):             # <<<<<<<<<<<<<<
 *             return read_pers_intervals_in_dimension(str.encode(persistence_file), only_this_dim)
 *     print("file " + persistence_file + " not set or not found.")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_isfile); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_persistence_file) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_persistence_file);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 92, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "../../cython/cython/reader_utils.pyx":93
 *     if persistence_file is not '':
 *         if os.path.isfile(persistence_file):
 *             return read_pers_intervals_in_dimension(str.encode(persistence_file), only_this_dim)             # <<<<<<<<<<<<<<
 *     print("file " + persistence_file + " not set or not found.")
 *     return []
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyString_Type)), __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 93, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_persistence_file) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_persistence_file);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 93, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 93, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_only_this_dim); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 93, __pyx_L1_error)
      __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(Gudhi::read_pers_intervals_in_dimension(__pyx_t_6, __pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 93, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "../../cython/cython/reader_utils.pyx":92
 *     """
 *     if persistence_file is not '':
 *         if os.path.isfile(persistence_file):             # <<<<<<<<<<<<<<
 *             return read_pers_intervals_in_dimension(str.encode(persistence_file), only_this_dim)
 *     print("file " + persistence_file + " not set or not found.")
 */
    }

    /* "../../cython/cython/reader_utils.pyx":91
 *     :rtype: map[int, vector[pair[double, double]]]
 *     """
 *     if persistence_file is not '':             # <<<<<<<<<<<<<<
 *         if os.path.isfile(persistence_file):
 *             return read_pers_intervals_in_dimension(str.encode(persistence_file), only_this_dim)
 */
  }

  /* "../../cython/cython/reader_utils.pyx":94
 *         if os.path.isfile(persistence_file):
 *             return read_pers_intervals_in_dimension(str.encode(persistence_file), only_this_dim)
 *     print("file " + persistence_file + " not set or not found.")             # <<<<<<<<<<<<<<
 *     return []
 */
  __pyx_t_3 = PyNumber_Add(__pyx_kp_s_file, __pyx_v_persistence_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_not_set_or_not_found); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(7, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../../cython/cython/reader_utils.pyx":95
 *             return read_pers_intervals_in_dimension(str.encode(persistence_file), only_this_dim)
 *     print("file " + persistence_file + " not set or not found.")
 *     return []             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/reader_utils.pyx":75
 *     return []
 * 
 * def read_persistence_intervals_in_dimension(persistence_file='', only_this_dim=-1):             # <<<<<<<<<<<<<<
 *     """Reads a file containing persistence intervals.
 *     Each line might contain 2, 3 or 4 values: [[field] dimension] birth death
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gudhi.read_persistence_intervals_in_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/witness_complex.pyx":47
 * 
 *     # Fake constructor that does nothing but documenting the constructor
 *     def __init__(self, nearest_landmark_table=None):             # <<<<<<<<<<<<<<
 *         """WitnessComplex constructor.
 * 
 */

/* Python wrapper */
static int __pyx_pw_5gudhi_14WitnessComplex_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_14WitnessComplex___init__[] = "WitnessComplex constructor.\n\n        :param nearest_landmark_table: A list of nearest landmark.\n        :type nearest_landmark_table: list of list of pair of unsigned and double\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5gudhi_14WitnessComplex___init__;
#endif
static int __pyx_pw_5gudhi_14WitnessComplex_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_nearest_landmark_table = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nearest_landmark_table,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nearest_landmark_table);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(8, 47, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nearest_landmark_table = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 47, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.WitnessComplex.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_14WitnessComplex___init__(((struct __pyx_obj_5gudhi_WitnessComplex *)__pyx_v_self), __pyx_v_nearest_landmark_table);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5gudhi_14WitnessComplex___init__(CYTHON_UNUSED struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_nearest_landmark_table) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/witness_complex.pyx":55
 * 
 *     # The real cython constructor
 *     def __cinit__(self, nearest_landmark_table=None):             # <<<<<<<<<<<<<<
 *         if nearest_landmark_table is not None:
 *             self.thisptr = new Witness_complex_interface(nearest_landmark_table)
 */

/* Python wrapper */
static int __pyx_pw_5gudhi_14WitnessComplex_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5gudhi_14WitnessComplex_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nearest_landmark_table = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nearest_landmark_table,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nearest_landmark_table);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(8, 55, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nearest_landmark_table = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 55, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.WitnessComplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_14WitnessComplex_2__cinit__(((struct __pyx_obj_5gudhi_WitnessComplex *)__pyx_v_self), __pyx_v_nearest_landmark_table);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5gudhi_14WitnessComplex_2__cinit__(struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self, PyObject *__pyx_v_nearest_landmark_table) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<std::vector<std::pair<size_t,double> > >  __pyx_t_3;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../../cython/cython/witness_complex.pyx":56
 *     # The real cython constructor
 *     def __cinit__(self, nearest_landmark_table=None):
 *         if nearest_landmark_table is not None:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Witness_complex_interface(nearest_landmark_table)
 * 
 */
  __pyx_t_1 = (__pyx_v_nearest_landmark_table != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../cython/cython/witness_complex.pyx":57
 *     def __cinit__(self, nearest_landmark_table=None):
 *         if nearest_landmark_table is not None:
 *             self.thisptr = new Witness_complex_interface(nearest_landmark_table)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_size_t_2c_double_3e____3e___(__pyx_v_nearest_landmark_table); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 57, __pyx_L1_error)
    __pyx_v_self->thisptr = new Gudhi::witness_complex::Witness_complex_interface(__pyx_t_3);

    /* "../../cython/cython/witness_complex.pyx":56
 *     # The real cython constructor
 *     def __cinit__(self, nearest_landmark_table=None):
 *         if nearest_landmark_table is not None:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Witness_complex_interface(nearest_landmark_table)
 * 
 */
  }

  /* "../../cython/cython/witness_complex.pyx":55
 * 
 *     # The real cython constructor
 *     def __cinit__(self, nearest_landmark_table=None):             # <<<<<<<<<<<<<<
 *         if nearest_landmark_table is not None:
 *             self.thisptr = new Witness_complex_interface(nearest_landmark_table)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gudhi.WitnessComplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/witness_complex.pyx":59
 *             self.thisptr = new Witness_complex_interface(nearest_landmark_table)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_5gudhi_14WitnessComplex_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5gudhi_14WitnessComplex_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5gudhi_14WitnessComplex_4__dealloc__(((struct __pyx_obj_5gudhi_WitnessComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5gudhi_14WitnessComplex_4__dealloc__(struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../../cython/cython/witness_complex.pyx":60
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/witness_complex.pyx":61
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __is_defined(self):
 */
    delete __pyx_v_self->thisptr;

    /* "../../cython/cython/witness_complex.pyx":60
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "../../cython/cython/witness_complex.pyx":59
 *             self.thisptr = new Witness_complex_interface(nearest_landmark_table)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../cython/cython/witness_complex.pyx":63
 *             del self.thisptr
 * 
 *     def __is_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if WitnessComplex pointer is not NULL.
 *          """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14WitnessComplex_7__is_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_14WitnessComplex_6__is_defined[] = "Returns true if WitnessComplex pointer is not NULL.\n         ";
static PyObject *__pyx_pw_5gudhi_14WitnessComplex_7__is_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__is_defined (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_14WitnessComplex_6__is_defined(((struct __pyx_obj_5gudhi_WitnessComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14WitnessComplex_6__is_defined(struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__is_defined", 0);

  /* "../../cython/cython/witness_complex.pyx":66
 *         """Returns true if WitnessComplex pointer is not NULL.
 *          """
 *         return self.thisptr != NULL             # <<<<<<<<<<<<<<
 * 
 *     def create_simplex_tree(self, max_alpha_square, limit_dimension = -1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr != NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/witness_complex.pyx":63
 *             del self.thisptr
 * 
 *     def __is_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if WitnessComplex pointer is not NULL.
 *          """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.WitnessComplex.__is_defined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/witness_complex.pyx":68
 *         return self.thisptr != NULL
 * 
 *     def create_simplex_tree(self, max_alpha_square, limit_dimension = -1):             # <<<<<<<<<<<<<<
 *         """
 *         :param max_alpha_square: The maximum alpha square threshold the
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14WitnessComplex_9create_simplex_tree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_14WitnessComplex_8create_simplex_tree[] = "\n        :param max_alpha_square: The maximum alpha square threshold the\n            simplices shall not exceed. Default is set to infinity.\n        :type max_alpha_square: float\n        :returns: A simplex tree created from the Delaunay Triangulation.\n        :rtype: SimplexTree\n        ";
static PyObject *__pyx_pw_5gudhi_14WitnessComplex_9create_simplex_tree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_max_alpha_square = 0;
  PyObject *__pyx_v_limit_dimension = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_simplex_tree (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_alpha_square,&__pyx_n_s_limit_dimension,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_alpha_square)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_limit_dimension);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_simplex_tree") < 0)) __PYX_ERR(8, 68, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_max_alpha_square = values[0];
    __pyx_v_limit_dimension = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_simplex_tree", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 68, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.WitnessComplex.create_simplex_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_14WitnessComplex_8create_simplex_tree(((struct __pyx_obj_5gudhi_WitnessComplex *)__pyx_v_self), __pyx_v_max_alpha_square, __pyx_v_limit_dimension);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14WitnessComplex_8create_simplex_tree(struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self, PyObject *__pyx_v_max_alpha_square, PyObject *__pyx_v_limit_dimension) {
  struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_simplex_tree = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  unsigned int __pyx_t_5;
  __Pyx_RefNannySetupContext("create_simplex_tree", 0);

  /* "../../cython/cython/witness_complex.pyx":76
 *         :rtype: SimplexTree
 *         """
 *         simplex_tree = SimplexTree()             # <<<<<<<<<<<<<<
 *         if limit_dimension is not -1:
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square, limit_dimension)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5gudhi_SimplexTree)); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_simplex_tree = ((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../cython/cython/witness_complex.pyx":77
 *         """
 *         simplex_tree = SimplexTree()
 *         if limit_dimension is not -1:             # <<<<<<<<<<<<<<
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square, limit_dimension)
 *         else:
 */
  __pyx_t_2 = (__pyx_v_limit_dimension != __pyx_int_neg_1);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "../../cython/cython/witness_complex.pyx":78
 *         simplex_tree = SimplexTree()
 *         if limit_dimension is not -1:
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square, limit_dimension)             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square)
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_max_alpha_square); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 78, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_int(__pyx_v_limit_dimension); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(8, 78, __pyx_L1_error)
    __pyx_v_self->thisptr->create_simplex_tree(__pyx_v_simplex_tree->thisptr, __pyx_t_4, __pyx_t_5);

    /* "../../cython/cython/witness_complex.pyx":77
 *         """
 *         simplex_tree = SimplexTree()
 *         if limit_dimension is not -1:             # <<<<<<<<<<<<<<
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square, limit_dimension)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/witness_complex.pyx":80
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square, limit_dimension)
 *         else:
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square)             # <<<<<<<<<<<<<<
 *         return simplex_tree
 */
  /*else*/ {
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_max_alpha_square); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 80, __pyx_L1_error)
    __pyx_v_self->thisptr->create_simplex_tree(__pyx_v_simplex_tree->thisptr, __pyx_t_4);
  }
  __pyx_L3:;

  /* "../../cython/cython/witness_complex.pyx":81
 *         else:
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square)
 *         return simplex_tree             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_simplex_tree));
  __pyx_r = ((PyObject *)__pyx_v_simplex_tree);
  goto __pyx_L0;

  /* "../../cython/cython/witness_complex.pyx":68
 *         return self.thisptr != NULL
 * 
 *     def create_simplex_tree(self, max_alpha_square, limit_dimension = -1):             # <<<<<<<<<<<<<<
 *         """
 *         :param max_alpha_square: The maximum alpha square threshold the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.WitnessComplex.create_simplex_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_simplex_tree);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14WitnessComplex_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5gudhi_14WitnessComplex_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_14WitnessComplex_10__reduce_cython__(((struct __pyx_obj_5gudhi_WitnessComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14WitnessComplex_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.WitnessComplex.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_14WitnessComplex_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5gudhi_14WitnessComplex_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_14WitnessComplex_12__setstate_cython__(((struct __pyx_obj_5gudhi_WitnessComplex *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_14WitnessComplex_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_WitnessComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.WitnessComplex.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/strong_witness_complex.pyx":47
 * 
 *     # Fake constructor that does nothing but documenting the constructor
 *     def __init__(self, nearest_landmark_table=None):             # <<<<<<<<<<<<<<
 *         """StrongWitnessComplex constructor.
 * 
 */

/* Python wrapper */
static int __pyx_pw_5gudhi_20StrongWitnessComplex_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_20StrongWitnessComplex___init__[] = "StrongWitnessComplex constructor.\n\n        :param nearest_landmark_table: A list of nearest landmark.\n        :type nearest_landmark_table: list of list of pair of unsigned and double\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_5gudhi_20StrongWitnessComplex___init__;
#endif
static int __pyx_pw_5gudhi_20StrongWitnessComplex_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_nearest_landmark_table = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nearest_landmark_table,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nearest_landmark_table);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(9, 47, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nearest_landmark_table = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(9, 47, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.StrongWitnessComplex.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_20StrongWitnessComplex___init__(((struct __pyx_obj_5gudhi_StrongWitnessComplex *)__pyx_v_self), __pyx_v_nearest_landmark_table);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5gudhi_20StrongWitnessComplex___init__(CYTHON_UNUSED struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_nearest_landmark_table) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/strong_witness_complex.pyx":55
 * 
 *     # The real cython constructor
 *     def __cinit__(self, nearest_landmark_table=None):             # <<<<<<<<<<<<<<
 *         if nearest_landmark_table is not None:
 *             self.thisptr = new Strong_witness_complex_interface(nearest_landmark_table)
 */

/* Python wrapper */
static int __pyx_pw_5gudhi_20StrongWitnessComplex_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5gudhi_20StrongWitnessComplex_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nearest_landmark_table = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nearest_landmark_table,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nearest_landmark_table);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(9, 55, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nearest_landmark_table = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(9, 55, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.StrongWitnessComplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_20StrongWitnessComplex_2__cinit__(((struct __pyx_obj_5gudhi_StrongWitnessComplex *)__pyx_v_self), __pyx_v_nearest_landmark_table);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5gudhi_20StrongWitnessComplex_2__cinit__(struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self, PyObject *__pyx_v_nearest_landmark_table) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<std::vector<std::pair<size_t,double> > >  __pyx_t_3;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../../cython/cython/strong_witness_complex.pyx":56
 *     # The real cython constructor
 *     def __cinit__(self, nearest_landmark_table=None):
 *         if nearest_landmark_table is not None:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Strong_witness_complex_interface(nearest_landmark_table)
 * 
 */
  __pyx_t_1 = (__pyx_v_nearest_landmark_table != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../cython/cython/strong_witness_complex.pyx":57
 *     def __cinit__(self, nearest_landmark_table=None):
 *         if nearest_landmark_table is not None:
 *             self.thisptr = new Strong_witness_complex_interface(nearest_landmark_table)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_size_t_2c_double_3e____3e___(__pyx_v_nearest_landmark_table); if (unlikely(PyErr_Occurred())) __PYX_ERR(9, 57, __pyx_L1_error)
    __pyx_v_self->thisptr = new Gudhi::witness_complex::Strong_witness_complex_interface(__pyx_t_3);

    /* "../../cython/cython/strong_witness_complex.pyx":56
 *     # The real cython constructor
 *     def __cinit__(self, nearest_landmark_table=None):
 *         if nearest_landmark_table is not None:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Strong_witness_complex_interface(nearest_landmark_table)
 * 
 */
  }

  /* "../../cython/cython/strong_witness_complex.pyx":55
 * 
 *     # The real cython constructor
 *     def __cinit__(self, nearest_landmark_table=None):             # <<<<<<<<<<<<<<
 *         if nearest_landmark_table is not None:
 *             self.thisptr = new Strong_witness_complex_interface(nearest_landmark_table)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gudhi.StrongWitnessComplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/strong_witness_complex.pyx":59
 *             self.thisptr = new Strong_witness_complex_interface(nearest_landmark_table)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_5gudhi_20StrongWitnessComplex_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5gudhi_20StrongWitnessComplex_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5gudhi_20StrongWitnessComplex_4__dealloc__(((struct __pyx_obj_5gudhi_StrongWitnessComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5gudhi_20StrongWitnessComplex_4__dealloc__(struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../../cython/cython/strong_witness_complex.pyx":60
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../cython/cython/strong_witness_complex.pyx":61
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __is_defined(self):
 */
    delete __pyx_v_self->thisptr;

    /* "../../cython/cython/strong_witness_complex.pyx":60
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "../../cython/cython/strong_witness_complex.pyx":59
 *             self.thisptr = new Strong_witness_complex_interface(nearest_landmark_table)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../cython/cython/strong_witness_complex.pyx":63
 *             del self.thisptr
 * 
 *     def __is_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if StrongWitnessComplex pointer is not NULL.
 *          """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_20StrongWitnessComplex_7__is_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5gudhi_20StrongWitnessComplex_6__is_defined[] = "Returns true if StrongWitnessComplex pointer is not NULL.\n         ";
static PyObject *__pyx_pw_5gudhi_20StrongWitnessComplex_7__is_defined(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__is_defined (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_20StrongWitnessComplex_6__is_defined(((struct __pyx_obj_5gudhi_StrongWitnessComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_20StrongWitnessComplex_6__is_defined(struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__is_defined", 0);

  /* "../../cython/cython/strong_witness_complex.pyx":66
 *         """Returns true if StrongWitnessComplex pointer is not NULL.
 *          """
 *         return self.thisptr != NULL             # <<<<<<<<<<<<<<
 * 
 *     def create_simplex_tree(self, max_alpha_square, limit_dimension = -1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr != NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../cython/cython/strong_witness_complex.pyx":63
 *             del self.thisptr
 * 
 *     def __is_defined(self):             # <<<<<<<<<<<<<<
 *         """Returns true if StrongWitnessComplex pointer is not NULL.
 *          """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.StrongWitnessComplex.__is_defined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../cython/cython/strong_witness_complex.pyx":68
 *         return self.thisptr != NULL
 * 
 *     def create_simplex_tree(self, max_alpha_square, limit_dimension = -1):             # <<<<<<<<<<<<<<
 *         """
 *         :param max_alpha_square: The maximum alpha square threshold the
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_20StrongWitnessComplex_9create_simplex_tree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5gudhi_20StrongWitnessComplex_8create_simplex_tree[] = "\n        :param max_alpha_square: The maximum alpha square threshold the\n            simplices shall not exceed. Default is set to infinity.\n        :type max_alpha_square: float\n        :returns: A simplex tree created from the Delaunay Triangulation.\n        :rtype: SimplexTree\n        ";
static PyObject *__pyx_pw_5gudhi_20StrongWitnessComplex_9create_simplex_tree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_max_alpha_square = 0;
  PyObject *__pyx_v_limit_dimension = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_simplex_tree (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_alpha_square,&__pyx_n_s_limit_dimension,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_alpha_square)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_limit_dimension);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_simplex_tree") < 0)) __PYX_ERR(9, 68, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_max_alpha_square = values[0];
    __pyx_v_limit_dimension = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_simplex_tree", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(9, 68, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gudhi.StrongWitnessComplex.create_simplex_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5gudhi_20StrongWitnessComplex_8create_simplex_tree(((struct __pyx_obj_5gudhi_StrongWitnessComplex *)__pyx_v_self), __pyx_v_max_alpha_square, __pyx_v_limit_dimension);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_20StrongWitnessComplex_8create_simplex_tree(struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self, PyObject *__pyx_v_max_alpha_square, PyObject *__pyx_v_limit_dimension) {
  struct __pyx_obj_5gudhi_SimplexTree *__pyx_v_simplex_tree = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  unsigned int __pyx_t_5;
  __Pyx_RefNannySetupContext("create_simplex_tree", 0);

  /* "../../cython/cython/strong_witness_complex.pyx":76
 *         :rtype: SimplexTree
 *         """
 *         simplex_tree = SimplexTree()             # <<<<<<<<<<<<<<
 *         if limit_dimension is not -1:
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square, limit_dimension)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5gudhi_SimplexTree)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_simplex_tree = ((struct __pyx_obj_5gudhi_SimplexTree *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../cython/cython/strong_witness_complex.pyx":77
 *         """
 *         simplex_tree = SimplexTree()
 *         if limit_dimension is not -1:             # <<<<<<<<<<<<<<
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square, limit_dimension)
 *         else:
 */
  __pyx_t_2 = (__pyx_v_limit_dimension != __pyx_int_neg_1);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "../../cython/cython/strong_witness_complex.pyx":78
 *         simplex_tree = SimplexTree()
 *         if limit_dimension is not -1:
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square, limit_dimension)             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square)
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_max_alpha_square); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 78, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_int(__pyx_v_limit_dimension); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(9, 78, __pyx_L1_error)
    __pyx_v_self->thisptr->create_simplex_tree(__pyx_v_simplex_tree->thisptr, __pyx_t_4, __pyx_t_5);

    /* "../../cython/cython/strong_witness_complex.pyx":77
 *         """
 *         simplex_tree = SimplexTree()
 *         if limit_dimension is not -1:             # <<<<<<<<<<<<<<
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square, limit_dimension)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "../../cython/cython/strong_witness_complex.pyx":80
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square, limit_dimension)
 *         else:
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square)             # <<<<<<<<<<<<<<
 *         return simplex_tree
 */
  /*else*/ {
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_max_alpha_square); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 80, __pyx_L1_error)
    __pyx_v_self->thisptr->create_simplex_tree(__pyx_v_simplex_tree->thisptr, __pyx_t_4);
  }
  __pyx_L3:;

  /* "../../cython/cython/strong_witness_complex.pyx":81
 *         else:
 *             self.thisptr.create_simplex_tree(simplex_tree.thisptr, max_alpha_square)
 *         return simplex_tree             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_simplex_tree));
  __pyx_r = ((PyObject *)__pyx_v_simplex_tree);
  goto __pyx_L0;

  /* "../../cython/cython/strong_witness_complex.pyx":68
 *         return self.thisptr != NULL
 * 
 *     def create_simplex_tree(self, max_alpha_square, limit_dimension = -1):             # <<<<<<<<<<<<<<
 *         """
 *         :param max_alpha_square: The maximum alpha square threshold the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.StrongWitnessComplex.create_simplex_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_simplex_tree);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_20StrongWitnessComplex_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5gudhi_20StrongWitnessComplex_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_20StrongWitnessComplex_10__reduce_cython__(((struct __pyx_obj_5gudhi_StrongWitnessComplex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_20StrongWitnessComplex_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.StrongWitnessComplex.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5gudhi_20StrongWitnessComplex_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_5gudhi_20StrongWitnessComplex_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5gudhi_20StrongWitnessComplex_12__setstate_cython__(((struct __pyx_obj_5gudhi_StrongWitnessComplex *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5gudhi_20StrongWitnessComplex_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5gudhi_StrongWitnessComplex *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gudhi.StrongWitnessComplex.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(const std::vector<std::vector<double> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py_double((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((int)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_double____double")
 * cdef object __pyx_convert_pair_to_py_double____double(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_double____double(std::pair<double,double>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_double____double", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_double____double")
 * cdef object __pyx_convert_pair_to_py_double____double(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_double____double")
 * cdef object __pyx_convert_pair_to_py_double____double(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_double____double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_pair_to_py_int____std_3a__3a_pair_3c_double_2c_double_3e___(std::pair<int,std::pair<double,double> >  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_int____std_3a__3a_pair_3c_double_2c_double_3e___", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_int____std_3a__3a_pair_3c_double_2c_double_3e___")
 * cdef object __pyx_convert_pair_to_py_int____std_3a__3a_pair_3c_double_2c_double_3e___(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_pair_to_py_double____double(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____std_3a__3a_pair_3c_double_2c_double_3e___")
 * cdef object __pyx_convert_pair_to_py_int____std_3a__3a_pair_3c_double_2c_double_3e___(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_int____std_3a__3a_pair_3c_double_2c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(const std::vector<std::pair<int,std::pair<double,double> > >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py_int____std_3a__3a_pair_3c_double_2c_double_3e___((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_std_3a__3a_pair_3c_double_2c_double_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(const std::vector<std::pair<double,double> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py_double____double((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c_int_3e_______std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c_int_3e_______std_3a__3a_vector_3c_int_3e___(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c_int_3e_______std_3a__3a_vector_3c_int_3e___(std::pair<std::vector<int> ,std::vector<int> >  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_vector_3c_int_3e_______std_3a__3a_vector_3c_int_3e___", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c_int_3e_______std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c_int_3e_______std_3a__3a_vector_3c_int_3e___(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c_int_3e_______std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c_int_3e_______std_3a__3a_vector_3c_int_3e___(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_vector_3c_int_3e_______std_3a__3a_vector_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_vector_3c_int_3e____2c_std_3a__3a_vector_3c_int_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_vector_3c_int_3e____2c_std_3a__3a_vector_3c_int_3e____3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_vector_3c_int_3e____2c_std_3a__3a_vector_3c_int_3e____3e___(const std::vector<std::pair<std::vector<int> ,std::vector<int> > >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_vector_3c_int_3e____2c_std_3a__3a_vector_3c_int_3e____3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_vector_3c_int_3e____2c_std_3a__3a_vector_3c_int_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_vector_3c_int_3e____2c_std_3a__3a_vector_3c_int_3e____3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py_std_3a__3a_vector_3c_int_3e_______std_3a__3a_vector_3c_int_3e___((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_vector_3c_int_3e____2c_std_3a__3a_vector_3c_int_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_vector_3c_int_3e____2c_std_3a__3a_vector_3c_int_3e____3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_vector_3c_int_3e____2c_std_3a__3a_vector_3c_int_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((double)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::vector<double> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<double> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<double> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<double>  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_double(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<double> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<unsigned int>  __pyx_convert_vector_from_py_unsigned_int(PyObject *__pyx_v_o) {
  std::vector<unsigned int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<unsigned int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_unsigned_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((unsigned int)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_unsigned_int")
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_unsigned_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<bool>  __pyx_convert_vector_from_py_bool(PyObject *__pyx_v_o) {
  std::vector<bool>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<bool>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_bool", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_item); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((bool)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_bool")
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_bool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_double_2c_double_3e____3e___")
 * cdef object __pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(std::map<int,std::vector<std::pair<double,double> > >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<int,std::vector<std::pair<double,double> > > ::value_type const *__pyx_v_key_value;
  std::map<int,std::vector<std::pair<double,double> > > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_double_2c_double_3e____3e___", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_double_2c_double_3e____3e___")
 * cdef object __pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_double_2c_double_3e___(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(1, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_double_2c_double_3e____3e___")
 * cdef object __pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_double_2c_double_3e____3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_pair_3c_double_2c_double_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_size_t__and_double")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_size_t__and_double(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<size_t,double>  __pyx_convert_pair_from_py_size_t__and_double(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<size_t,double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  size_t __pyx_t_5;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_size_t__and_double", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_size_t__and_double")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_size_t__and_double(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_size_t__and_double(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_r = std::pair<size_t,double> (((size_t)__pyx_t_5), ((double)__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_size_t__and_double")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_size_t__and_double(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_size_t__and_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_size_t_2c_double_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_size_t_2c_double_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::pair<size_t,double> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c_size_t_2c_double_3e___(PyObject *__pyx_v_o) {
  std::vector<std::pair<size_t,double> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::pair<size_t,double> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::pair<size_t,double>  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_size_t_2c_double_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_size_t_2c_double_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_pair_from_py_size_t__and_double(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::pair<size_t,double> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_size_t_2c_double_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_size_t_2c_double_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_size_t_2c_double_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_pair_3c_size_t_2c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::vector<std::pair<size_t,double> > >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_size_t_2c_double_3e____3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<std::pair<size_t,double> > >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<std::pair<size_t,double> > >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<std::pair<size_t,double> >  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_size_t_2c_double_3e____3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_size_t_2c_double_3e____3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_size_t_2c_double_3e___(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<std::pair<size_t,double> > )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_size_t_2c_double_3e____3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_size_t_2c_double_3e____3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_size_t_2c_double_3e____3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_size_t_2c_double_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5gudhi_SimplexTree(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5gudhi_11SimplexTree_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5gudhi_SimplexTree(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5gudhi_11SimplexTree_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5gudhi_SimplexTree[] = {
  {"__is_defined", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_7__is_defined, METH_NOARGS, __pyx_doc_5gudhi_11SimplexTree_6__is_defined},
  {"__is_persistence_defined", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_9__is_persistence_defined, METH_NOARGS, __pyx_doc_5gudhi_11SimplexTree_8__is_persistence_defined},
  {"filtration", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_11filtration, METH_O, __pyx_doc_5gudhi_11SimplexTree_10filtration},
  {"assign_filtration", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_11SimplexTree_13assign_filtration, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_11SimplexTree_12assign_filtration},
  {"initialize_filtration", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_15initialize_filtration, METH_NOARGS, __pyx_doc_5gudhi_11SimplexTree_14initialize_filtration},
  {"num_vertices", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_17num_vertices, METH_NOARGS, __pyx_doc_5gudhi_11SimplexTree_16num_vertices},
  {"num_simplices", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_19num_simplices, METH_NOARGS, __pyx_doc_5gudhi_11SimplexTree_18num_simplices},
  {"dimension", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_21dimension, METH_NOARGS, __pyx_doc_5gudhi_11SimplexTree_20dimension},
  {"upper_bound_dimension", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_23upper_bound_dimension, METH_NOARGS, __pyx_doc_5gudhi_11SimplexTree_22upper_bound_dimension},
  {"set_dimension", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_25set_dimension, METH_O, __pyx_doc_5gudhi_11SimplexTree_24set_dimension},
  {"find", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_27find, METH_O, __pyx_doc_5gudhi_11SimplexTree_26find},
  {"insert", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_11SimplexTree_29insert, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_11SimplexTree_28insert},
  {"get_filtration", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_31get_filtration, METH_NOARGS, __pyx_doc_5gudhi_11SimplexTree_30get_filtration},
  {"get_skeleton", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_33get_skeleton, METH_O, __pyx_doc_5gudhi_11SimplexTree_32get_skeleton},
  {"get_star", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_35get_star, METH_O, __pyx_doc_5gudhi_11SimplexTree_34get_star},
  {"get_cofaces", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_11SimplexTree_37get_cofaces, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_11SimplexTree_36get_cofaces},
  {"remove_maximal_simplex", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_39remove_maximal_simplex, METH_O, __pyx_doc_5gudhi_11SimplexTree_38remove_maximal_simplex},
  {"prune_above_filtration", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_41prune_above_filtration, METH_O, __pyx_doc_5gudhi_11SimplexTree_40prune_above_filtration},
  {"expansion", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_43expansion, METH_O, __pyx_doc_5gudhi_11SimplexTree_42expansion},
  {"make_filtration_non_decreasing", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_45make_filtration_non_decreasing, METH_NOARGS, __pyx_doc_5gudhi_11SimplexTree_44make_filtration_non_decreasing},
  {"persistence", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_11SimplexTree_47persistence, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_11SimplexTree_46persistence},
  {"betti_numbers", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_49betti_numbers, METH_NOARGS, __pyx_doc_5gudhi_11SimplexTree_48betti_numbers},
  {"persistent_betti_numbers", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_11SimplexTree_51persistent_betti_numbers, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_11SimplexTree_50persistent_betti_numbers},
  {"persistence_intervals_in_dimension", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_53persistence_intervals_in_dimension, METH_O, __pyx_doc_5gudhi_11SimplexTree_52persistence_intervals_in_dimension},
  {"persistence_pairs", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_55persistence_pairs, METH_NOARGS, __pyx_doc_5gudhi_11SimplexTree_54persistence_pairs},
  {"write_persistence_diagram", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_11SimplexTree_57write_persistence_diagram, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_11SimplexTree_56write_persistence_diagram},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_59__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5gudhi_11SimplexTree_61__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5gudhi_SimplexTree = {
  PyVarObject_HEAD_INIT(0, 0)
  "gudhi.SimplexTree", /*tp_name*/
  sizeof(struct __pyx_obj_5gudhi_SimplexTree), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5gudhi_SimplexTree, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "The simplex tree is an efficient and flexible data structure for\n    representing general (filtered) simplicial complexes. The data structure\n    is described in Jean-Daniel Boissonnat and Cl\303\251ment Maria. The Simplex\n    Tree: An Efficient Data Structure for General Simplicial Complexes.\n    Algorithmica, pages 1\342\200\22322, 2014.\n\n    This class is a filtered, with keys, and non contiguous vertices version\n    of the simplex tree.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5gudhi_SimplexTree, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5gudhi_11SimplexTree_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5gudhi_SimplexTree, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5gudhi_RipsComplex(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5gudhi_11RipsComplex_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5gudhi_RipsComplex(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5gudhi_11RipsComplex_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5gudhi_RipsComplex[] = {
  {"__is_defined", (PyCFunction)__pyx_pw_5gudhi_11RipsComplex_7__is_defined, METH_NOARGS, __pyx_doc_5gudhi_11RipsComplex_6__is_defined},
  {"create_simplex_tree", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_11RipsComplex_9create_simplex_tree, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_11RipsComplex_8create_simplex_tree},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5gudhi_11RipsComplex_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5gudhi_11RipsComplex_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5gudhi_RipsComplex = {
  PyVarObject_HEAD_INIT(0, 0)
  "gudhi.RipsComplex", /*tp_name*/
  sizeof(struct __pyx_obj_5gudhi_RipsComplex), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5gudhi_RipsComplex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "The data structure is a one skeleton graph, or Rips graph, containing\n    edges when the edge length is less or equal to a given threshold. Edge\n    length is computed from a user given point cloud with a given distance\n    function, or a distance matrix.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5gudhi_RipsComplex, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5gudhi_11RipsComplex_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5gudhi_RipsComplex, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5gudhi_CubicalComplex(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5gudhi_14CubicalComplex_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5gudhi_CubicalComplex(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5gudhi_14CubicalComplex_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5gudhi_CubicalComplex[] = {
  {"__is_defined", (PyCFunction)__pyx_pw_5gudhi_14CubicalComplex_7__is_defined, METH_NOARGS, __pyx_doc_5gudhi_14CubicalComplex_6__is_defined},
  {"__is_persistence_defined", (PyCFunction)__pyx_pw_5gudhi_14CubicalComplex_9__is_persistence_defined, METH_NOARGS, __pyx_doc_5gudhi_14CubicalComplex_8__is_persistence_defined},
  {"num_simplices", (PyCFunction)__pyx_pw_5gudhi_14CubicalComplex_11num_simplices, METH_NOARGS, __pyx_doc_5gudhi_14CubicalComplex_10num_simplices},
  {"dimension", (PyCFunction)__pyx_pw_5gudhi_14CubicalComplex_13dimension, METH_NOARGS, __pyx_doc_5gudhi_14CubicalComplex_12dimension},
  {"persistence", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_14CubicalComplex_15persistence, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_14CubicalComplex_14persistence},
  {"betti_numbers", (PyCFunction)__pyx_pw_5gudhi_14CubicalComplex_17betti_numbers, METH_NOARGS, __pyx_doc_5gudhi_14CubicalComplex_16betti_numbers},
  {"persistent_betti_numbers", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_14CubicalComplex_19persistent_betti_numbers, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_14CubicalComplex_18persistent_betti_numbers},
  {"persistence_intervals_in_dimension", (PyCFunction)__pyx_pw_5gudhi_14CubicalComplex_21persistence_intervals_in_dimension, METH_O, __pyx_doc_5gudhi_14CubicalComplex_20persistence_intervals_in_dimension},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5gudhi_14CubicalComplex_23__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5gudhi_14CubicalComplex_25__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5gudhi_CubicalComplex = {
  PyVarObject_HEAD_INIT(0, 0)
  "gudhi.CubicalComplex", /*tp_name*/
  sizeof(struct __pyx_obj_5gudhi_CubicalComplex), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5gudhi_CubicalComplex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "The CubicalComplex is an example of a structured complex useful in\n    computational mathematics (specially rigorous numerics) and image\n    analysis.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5gudhi_CubicalComplex, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5gudhi_14CubicalComplex_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5gudhi_CubicalComplex, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5gudhi_PeriodicCubicalComplex(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5gudhi_22PeriodicCubicalComplex_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5gudhi_PeriodicCubicalComplex(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5gudhi_22PeriodicCubicalComplex_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5gudhi_PeriodicCubicalComplex[] = {
  {"__is_defined", (PyCFunction)__pyx_pw_5gudhi_22PeriodicCubicalComplex_7__is_defined, METH_NOARGS, __pyx_doc_5gudhi_22PeriodicCubicalComplex_6__is_defined},
  {"__is_persistence_defined", (PyCFunction)__pyx_pw_5gudhi_22PeriodicCubicalComplex_9__is_persistence_defined, METH_NOARGS, __pyx_doc_5gudhi_22PeriodicCubicalComplex_8__is_persistence_defined},
  {"num_simplices", (PyCFunction)__pyx_pw_5gudhi_22PeriodicCubicalComplex_11num_simplices, METH_NOARGS, __pyx_doc_5gudhi_22PeriodicCubicalComplex_10num_simplices},
  {"dimension", (PyCFunction)__pyx_pw_5gudhi_22PeriodicCubicalComplex_13dimension, METH_NOARGS, __pyx_doc_5gudhi_22PeriodicCubicalComplex_12dimension},
  {"persistence", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_22PeriodicCubicalComplex_15persistence, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_22PeriodicCubicalComplex_14persistence},
  {"betti_numbers", (PyCFunction)__pyx_pw_5gudhi_22PeriodicCubicalComplex_17betti_numbers, METH_NOARGS, __pyx_doc_5gudhi_22PeriodicCubicalComplex_16betti_numbers},
  {"persistent_betti_numbers", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_22PeriodicCubicalComplex_19persistent_betti_numbers, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_22PeriodicCubicalComplex_18persistent_betti_numbers},
  {"persistence_intervals_in_dimension", (PyCFunction)__pyx_pw_5gudhi_22PeriodicCubicalComplex_21persistence_intervals_in_dimension, METH_O, __pyx_doc_5gudhi_22PeriodicCubicalComplex_20persistence_intervals_in_dimension},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5gudhi_22PeriodicCubicalComplex_23__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5gudhi_22PeriodicCubicalComplex_25__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5gudhi_PeriodicCubicalComplex = {
  PyVarObject_HEAD_INIT(0, 0)
  "gudhi.PeriodicCubicalComplex", /*tp_name*/
  sizeof(struct __pyx_obj_5gudhi_PeriodicCubicalComplex), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5gudhi_PeriodicCubicalComplex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "The PeriodicCubicalComplex is an example of a structured complex useful\n    in computational mathematics (specially rigorous numerics) and image\n    analysis.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5gudhi_PeriodicCubicalComplex, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5gudhi_22PeriodicCubicalComplex_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5gudhi_PeriodicCubicalComplex, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5gudhi_WitnessComplex(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5gudhi_14WitnessComplex_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5gudhi_WitnessComplex(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5gudhi_14WitnessComplex_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5gudhi_WitnessComplex[] = {
  {"__is_defined", (PyCFunction)__pyx_pw_5gudhi_14WitnessComplex_7__is_defined, METH_NOARGS, __pyx_doc_5gudhi_14WitnessComplex_6__is_defined},
  {"create_simplex_tree", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_14WitnessComplex_9create_simplex_tree, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_14WitnessComplex_8create_simplex_tree},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5gudhi_14WitnessComplex_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5gudhi_14WitnessComplex_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5gudhi_WitnessComplex = {
  PyVarObject_HEAD_INIT(0, 0)
  "gudhi.WitnessComplex", /*tp_name*/
  sizeof(struct __pyx_obj_5gudhi_WitnessComplex), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5gudhi_WitnessComplex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Constructs (weak) witness complex for a given table of nearest landmarks\n    with respect to witnesses.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5gudhi_WitnessComplex, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5gudhi_14WitnessComplex_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5gudhi_WitnessComplex, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5gudhi_StrongWitnessComplex(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5gudhi_20StrongWitnessComplex_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5gudhi_StrongWitnessComplex(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5gudhi_20StrongWitnessComplex_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5gudhi_StrongWitnessComplex[] = {
  {"__is_defined", (PyCFunction)__pyx_pw_5gudhi_20StrongWitnessComplex_7__is_defined, METH_NOARGS, __pyx_doc_5gudhi_20StrongWitnessComplex_6__is_defined},
  {"create_simplex_tree", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5gudhi_20StrongWitnessComplex_9create_simplex_tree, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5gudhi_20StrongWitnessComplex_8create_simplex_tree},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5gudhi_20StrongWitnessComplex_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5gudhi_20StrongWitnessComplex_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5gudhi_StrongWitnessComplex = {
  PyVarObject_HEAD_INIT(0, 0)
  "gudhi.StrongWitnessComplex", /*tp_name*/
  sizeof(struct __pyx_obj_5gudhi_StrongWitnessComplex), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5gudhi_StrongWitnessComplex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Constructs (strong) witness complex for a given table of nearest\n    landmarks with respect to witnesses.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5gudhi_StrongWitnessComplex, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5gudhi_20StrongWitnessComplex_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5gudhi_StrongWitnessComplex, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *__pyx_freelist_5gudhi___pyx_scope_struct__plot_persistence_barcode[8];
static int __pyx_freecount_5gudhi___pyx_scope_struct__plot_persistence_barcode = 0;

static PyObject *__pyx_tp_new_5gudhi___pyx_scope_struct__plot_persistence_barcode(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5gudhi___pyx_scope_struct__plot_persistence_barcode > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode)))) {
    o = (PyObject*)__pyx_freelist_5gudhi___pyx_scope_struct__plot_persistence_barcode[--__pyx_freecount_5gudhi___pyx_scope_struct__plot_persistence_barcode];
    memset(o, 0, sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5gudhi___pyx_scope_struct__plot_persistence_barcode(PyObject *o) {
  struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *p = (struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_persistence);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5gudhi___pyx_scope_struct__plot_persistence_barcode < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode)))) {
    __pyx_freelist_5gudhi___pyx_scope_struct__plot_persistence_barcode[__pyx_freecount_5gudhi___pyx_scope_struct__plot_persistence_barcode++] = ((struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5gudhi___pyx_scope_struct__plot_persistence_barcode(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *p = (struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *)o;
  if (p->__pyx_v_persistence) {
    e = (*v)(p->__pyx_v_persistence, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5gudhi___pyx_scope_struct__plot_persistence_barcode(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *p = (struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode *)o;
  tmp = ((PyObject*)p->__pyx_v_persistence);
  p->__pyx_v_persistence = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5gudhi___pyx_scope_struct__plot_persistence_barcode = {
  PyVarObject_HEAD_INIT(0, 0)
  "gudhi.__pyx_scope_struct__plot_persistence_barcode", /*tp_name*/
  sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct__plot_persistence_barcode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5gudhi___pyx_scope_struct__plot_persistence_barcode, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5gudhi___pyx_scope_struct__plot_persistence_barcode, /*tp_traverse*/
  __pyx_tp_clear_5gudhi___pyx_scope_struct__plot_persistence_barcode, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5gudhi___pyx_scope_struct__plot_persistence_barcode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr *__pyx_freelist_5gudhi___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_5gudhi___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_5gudhi___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5gudhi___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5gudhi___pyx_scope_struct_1_genexpr[--__pyx_freecount_5gudhi___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5gudhi___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_item);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5gudhi___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_5gudhi___pyx_scope_struct_1_genexpr[__pyx_freecount_5gudhi___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5gudhi___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_item) {
    e = (*v)(p->__pyx_v_item, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5gudhi___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "gudhi.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5gudhi___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5gudhi___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5gudhi___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *__pyx_freelist_5gudhi___pyx_scope_struct_2_plot_persistence_diagram[8];
static int __pyx_freecount_5gudhi___pyx_scope_struct_2_plot_persistence_diagram = 0;

static PyObject *__pyx_tp_new_5gudhi___pyx_scope_struct_2_plot_persistence_diagram(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5gudhi___pyx_scope_struct_2_plot_persistence_diagram > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram)))) {
    o = (PyObject*)__pyx_freelist_5gudhi___pyx_scope_struct_2_plot_persistence_diagram[--__pyx_freecount_5gudhi___pyx_scope_struct_2_plot_persistence_diagram];
    memset(o, 0, sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5gudhi___pyx_scope_struct_2_plot_persistence_diagram(PyObject *o) {
  struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *p = (struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_persistence);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5gudhi___pyx_scope_struct_2_plot_persistence_diagram < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram)))) {
    __pyx_freelist_5gudhi___pyx_scope_struct_2_plot_persistence_diagram[__pyx_freecount_5gudhi___pyx_scope_struct_2_plot_persistence_diagram++] = ((struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5gudhi___pyx_scope_struct_2_plot_persistence_diagram(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *p = (struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *)o;
  if (p->__pyx_v_persistence) {
    e = (*v)(p->__pyx_v_persistence, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5gudhi___pyx_scope_struct_2_plot_persistence_diagram(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *p = (struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram *)o;
  tmp = ((PyObject*)p->__pyx_v_persistence);
  p->__pyx_v_persistence = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5gudhi___pyx_scope_struct_2_plot_persistence_diagram = {
  PyVarObject_HEAD_INIT(0, 0)
  "gudhi.__pyx_scope_struct_2_plot_persistence_diagram", /*tp_name*/
  sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct_2_plot_persistence_diagram), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5gudhi___pyx_scope_struct_2_plot_persistence_diagram, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5gudhi___pyx_scope_struct_2_plot_persistence_diagram, /*tp_traverse*/
  __pyx_tp_clear_5gudhi___pyx_scope_struct_2_plot_persistence_diagram, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5gudhi___pyx_scope_struct_2_plot_persistence_diagram, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr *__pyx_freelist_5gudhi___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_5gudhi___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_5gudhi___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5gudhi___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5gudhi___pyx_scope_struct_3_genexpr[--__pyx_freecount_5gudhi___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5gudhi___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_item);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5gudhi___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_5gudhi___pyx_scope_struct_3_genexpr[__pyx_freecount_5gudhi___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5gudhi___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_item) {
    e = (*v)(p->__pyx_v_item, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5gudhi___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "gudhi.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5gudhi___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5gudhi___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5gudhi___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5gudhi___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_gudhi(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_gudhi},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "gudhi",
    __pyx_k_This_file_is_part_of_the_Gudhi_L, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_kp_s_000000, __pyx_k_000000, sizeof(__pyx_k_000000), 0, 0, 1, 0},
  {&__pyx_kp_s_000088, __pyx_k_000088, sizeof(__pyx_k_000088), 0, 0, 1, 0},
  {&__pyx_kp_s_0000ff, __pyx_k_0000ff, sizeof(__pyx_k_0000ff), 0, 0, 1, 0},
  {&__pyx_kp_s_008800, __pyx_k_008800, sizeof(__pyx_k_008800), 0, 0, 1, 0},
  {&__pyx_kp_s_008888, __pyx_k_008888, sizeof(__pyx_k_008888), 0, 0, 1, 0},
  {&__pyx_kp_s_00ff00, __pyx_k_00ff00, sizeof(__pyx_k_00ff00), 0, 0, 1, 0},
  {&__pyx_kp_s_00ffff, __pyx_k_00ffff, sizeof(__pyx_k_00ffff), 0, 0, 1, 0},
  {&__pyx_kp_s_2_3_0, __pyx_k_2_3_0, sizeof(__pyx_k_2_3_0), 0, 0, 1, 0},
  {&__pyx_kp_s_880000, __pyx_k_880000, sizeof(__pyx_k_880000), 0, 0, 1, 0},
  {&__pyx_kp_s_880088, __pyx_k_880088, sizeof(__pyx_k_880088), 0, 0, 1, 0},
  {&__pyx_kp_s_888800, __pyx_k_888800, sizeof(__pyx_k_888800), 0, 0, 1, 0},
  {&__pyx_n_s_Birth, __pyx_k_Birth, sizeof(__pyx_k_Birth), 0, 0, 1, 1},
  {&__pyx_kp_s_Copyright_C_2016_Inria, __pyx_k_Copyright_C_2016_Inria, sizeof(__pyx_k_Copyright_C_2016_Inria), 0, 0, 1, 0},
  {&__pyx_kp_s_Copyright_C_2016_Inria_2, __pyx_k_Copyright_C_2016_Inria_2, sizeof(__pyx_k_Copyright_C_2016_Inria_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Copyright_C_2017_Inria, __pyx_k_Copyright_C_2017_Inria, sizeof(__pyx_k_Copyright_C_2017_Inria), 0, 0, 1, 0},
  {&__pyx_n_s_CubicalComplex, __pyx_k_CubicalComplex, sizeof(__pyx_k_CubicalComplex), 0, 0, 1, 1},
  {&__pyx_kp_s_CubicalComplex_can_be_constructe, __pyx_k_CubicalComplex_can_be_constructe, sizeof(__pyx_k_CubicalComplex_can_be_constructe), 0, 0, 1, 0},
  {&__pyx_n_s_Death, __pyx_k_Death, sizeof(__pyx_k_Death), 0, 0, 1, 1},
  {&__pyx_kp_s_GPL_v3, __pyx_k_GPL_v3, sizeof(__pyx_k_GPL_v3), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_Patch, __pyx_k_Patch, sizeof(__pyx_k_Patch), 0, 0, 1, 1},
  {&__pyx_n_s_PeriodicCubicalComplex, __pyx_k_PeriodicCubicalComplex, sizeof(__pyx_k_PeriodicCubicalComplex), 0, 0, 1, 1},
  {&__pyx_kp_s_Persistence_barcode, __pyx_k_Persistence_barcode, sizeof(__pyx_k_Persistence_barcode), 0, 0, 1, 0},
  {&__pyx_kp_s_Persistence_diagram, __pyx_k_Persistence_diagram, sizeof(__pyx_k_Persistence_diagram), 0, 0, 1, 0},
  {&__pyx_kp_s_Python_version_3_6_6_Cython_vers, __pyx_k_Python_version_3_6_6_Cython_vers, sizeof(__pyx_k_Python_version_3_6_6_Cython_vers), 0, 0, 1, 0},
  {&__pyx_n_s_RipsComplex, __pyx_k_RipsComplex, sizeof(__pyx_k_RipsComplex), 0, 0, 1, 1},
  {&__pyx_n_s_SimplexTree, __pyx_k_SimplexTree, sizeof(__pyx_k_SimplexTree), 0, 0, 1, 1},
  {&__pyx_n_s_StrongWitnessComplex, __pyx_k_StrongWitnessComplex, sizeof(__pyx_k_StrongWitnessComplex), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Vincent_Rouvreau, __pyx_k_Vincent_Rouvreau, sizeof(__pyx_k_Vincent_Rouvreau), 0, 0, 1, 0},
  {&__pyx_kp_s_Vincent_Rouvreau_Bertrand_Michel, __pyx_k_Vincent_Rouvreau_Bertrand_Michel, sizeof(__pyx_k_Vincent_Rouvreau_Bertrand_Michel), 0, 0, 1, 0},
  {&__pyx_n_s_WitnessComplex, __pyx_k_WitnessComplex, sizeof(__pyx_k_WitnessComplex), 0, 0, 1, 1},
  {&__pyx_kp_s__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 0, 1, 0},
  {&__pyx_n_s__21, __pyx_k__21, sizeof(__pyx_k__21), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_author, __pyx_k_author, sizeof(__pyx_k_author), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_axis_start, __pyx_k_axis_start, sizeof(__pyx_k_axis_start), 0, 0, 1, 1},
  {&__pyx_n_s_band, __pyx_k_band, sizeof(__pyx_k_band), 0, 0, 1, 1},
  {&__pyx_n_s_barh, __pyx_k_barh, sizeof(__pyx_k_barh), 0, 0, 1, 1},
  {&__pyx_kp_s_betti_numbers_function_requires, __pyx_k_betti_numbers_function_requires, sizeof(__pyx_k_betti_numbers_function_requires), 0, 0, 1, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_codimension, __pyx_k_codimension, sizeof(__pyx_k_codimension), 0, 0, 1, 1},
  {&__pyx_n_s_color, __pyx_k_color, sizeof(__pyx_k_color), 0, 0, 1, 1},
  {&__pyx_n_s_copyright, __pyx_k_copyright, sizeof(__pyx_k_copyright), 0, 0, 1, 1},
  {&__pyx_n_s_csv_file, __pyx_k_csv_file, sizeof(__pyx_k_csv_file), 0, 0, 1, 1},
  {&__pyx_n_s_debug_info, __pyx_k_debug_info, sizeof(__pyx_k_debug_info), 0, 0, 1, 1},
  {&__pyx_n_s_delta, __pyx_k_delta, sizeof(__pyx_k_delta), 0, 0, 1, 1},
  {&__pyx_n_s_diag, __pyx_k_diag, sizeof(__pyx_k_diag), 0, 0, 1, 1},
  {&__pyx_n_s_dim, __pyx_k_dim, sizeof(__pyx_k_dim), 0, 0, 1, 1},
  {&__pyx_n_s_dimensions, __pyx_k_dimensions, sizeof(__pyx_k_dimensions), 0, 0, 1, 1},
  {&__pyx_n_s_distance_matrix, __pyx_k_distance_matrix, sizeof(__pyx_k_distance_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_facecolor, __pyx_k_facecolor, sizeof(__pyx_k_facecolor), 0, 0, 1, 1},
  {&__pyx_kp_s_ff0000, __pyx_k_ff0000, sizeof(__pyx_k_ff0000), 0, 0, 1, 0},
  {&__pyx_kp_s_ff00ff, __pyx_k_ff00ff, sizeof(__pyx_k_ff00ff), 0, 0, 1, 0},
  {&__pyx_kp_s_ffff00, __pyx_k_ffff00, sizeof(__pyx_k_ffff00), 0, 0, 1, 0},
  {&__pyx_kp_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 0},
  {&__pyx_n_s_file_2, __pyx_k_file_2, sizeof(__pyx_k_file_2), 0, 0, 1, 1},
  {&__pyx_n_s_fill_between, __pyx_k_fill_between, sizeof(__pyx_k_fill_between), 0, 0, 1, 1},
  {&__pyx_n_s_filtration, __pyx_k_filtration, sizeof(__pyx_k_filtration), 0, 0, 1, 1},
  {&__pyx_n_s_from_value, __pyx_k_from_value, sizeof(__pyx_k_from_value), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gudhi, __pyx_k_gudhi, sizeof(__pyx_k_gudhi), 0, 0, 1, 1},
  {&__pyx_n_s_handles, __pyx_k_handles, sizeof(__pyx_k_handles), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_kp_s_homes_rhu_Documents_phd_project, __pyx_k_homes_rhu_Documents_phd_project, sizeof(__pyx_k_homes_rhu_Documents_phd_project), 0, 0, 1, 0},
  {&__pyx_kp_s_homes_rhu_Documents_phd_project_2, __pyx_k_homes_rhu_Documents_phd_project_2, sizeof(__pyx_k_homes_rhu_Documents_phd_project_2), 0, 0, 1, 0},
  {&__pyx_kp_s_homes_rhu_Documents_phd_project_3, __pyx_k_homes_rhu_Documents_phd_project_3, sizeof(__pyx_k_homes_rhu_Documents_phd_project_3), 0, 0, 1, 0},
  {&__pyx_kp_s_homes_rhu_Documents_phd_project_4, __pyx_k_homes_rhu_Documents_phd_project_4, sizeof(__pyx_k_homes_rhu_Documents_phd_project_4), 0, 0, 1, 0},
  {&__pyx_n_s_homology_coeff_field, __pyx_k_homology_coeff_field, sizeof(__pyx_k_homology_coeff_field), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_ind, __pyx_k_ind, sizeof(__pyx_k_ind), 0, 0, 1, 1},
  {&__pyx_n_s_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 0, 1, 1},
  {&__pyx_n_s_inf_delta, __pyx_k_inf_delta, sizeof(__pyx_k_inf_delta), 0, 0, 1, 1},
  {&__pyx_n_s_infinity, __pyx_k_infinity, sizeof(__pyx_k_infinity), 0, 0, 1, 1},
  {&__pyx_kp_s_infty, __pyx_k_infty, sizeof(__pyx_k_infty), 0, 0, 1, 0},
  {&__pyx_n_s_interval, __pyx_k_interval, sizeof(__pyx_k_interval), 0, 0, 1, 1},
  {&__pyx_kp_s_intervals_in_dim_function_requir, __pyx_k_intervals_in_dim_function_requir, sizeof(__pyx_k_intervals_in_dim_function_requir), 0, 0, 1, 0},
  {&__pyx_n_s_isfile, __pyx_k_isfile, sizeof(__pyx_k_isfile), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 1},
  {&__pyx_n_s_legend, __pyx_k_legend, sizeof(__pyx_k_legend), 0, 0, 1, 1},
  {&__pyx_n_s_license, __pyx_k_license, sizeof(__pyx_k_license), 0, 0, 1, 1},
  {&__pyx_n_s_limit_dimension, __pyx_k_limit_dimension, sizeof(__pyx_k_limit_dimension), 0, 0, 1, 1},
  {&__pyx_n_s_linewidth, __pyx_k_linewidth, sizeof(__pyx_k_linewidth), 0, 0, 1, 1},
  {&__pyx_n_s_linspace, __pyx_k_linspace, sizeof(__pyx_k_linspace), 0, 0, 1, 1},
  {&__pyx_n_s_loc, __pyx_k_loc, sizeof(__pyx_k_loc), 0, 0, 1, 1},
  {&__pyx_kp_s_lower_right, __pyx_k_lower_right, sizeof(__pyx_k_lower_right), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matplotlib_patches, __pyx_k_matplotlib_patches, sizeof(__pyx_k_matplotlib_patches), 0, 0, 1, 1},
  {&__pyx_n_s_matplotlib_pyplot, __pyx_k_matplotlib_pyplot, sizeof(__pyx_k_matplotlib_pyplot), 0, 0, 1, 1},
  {&__pyx_n_s_max_alpha_square, __pyx_k_max_alpha_square, sizeof(__pyx_k_max_alpha_square), 0, 0, 1, 1},
  {&__pyx_n_s_max_barcodes, __pyx_k_max_barcodes, sizeof(__pyx_k_max_barcodes), 0, 0, 1, 1},
  {&__pyx_n_s_max_death, __pyx_k_max_death, sizeof(__pyx_k_max_death), 0, 0, 1, 1},
  {&__pyx_n_s_max_dimension, __pyx_k_max_dimension, sizeof(__pyx_k_max_dimension), 0, 0, 1, 1},
  {&__pyx_n_s_max_edge_length, __pyx_k_max_edge_length, sizeof(__pyx_k_max_edge_length), 0, 0, 1, 1},
  {&__pyx_n_s_max_plots, __pyx_k_max_plots, sizeof(__pyx_k_max_plots), 0, 0, 1, 1},
  {&__pyx_n_s_min_birth, __pyx_k_min_birth, sizeof(__pyx_k_min_birth), 0, 0, 1, 1},
  {&__pyx_n_s_min_birth_max_death, __pyx_k_min_birth_max_death, sizeof(__pyx_k_min_birth_max_death), 0, 0, 1, 1},
  {&__pyx_n_s_min_persistence, __pyx_k_min_persistence, sizeof(__pyx_k_min_persistence), 0, 0, 1, 1},
  {&__pyx_n_s_mpatches, __pyx_k_mpatches, sizeof(__pyx_k_mpatches), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nearest_landmark_table, __pyx_k_nearest_landmark_table, sizeof(__pyx_k_nearest_landmark_table), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_kp_s_not_found, __pyx_k_not_found, sizeof(__pyx_k_not_found), 0, 0, 1, 0},
  {&__pyx_kp_s_not_set_or_not_found, __pyx_k_not_set_or_not_found, sizeof(__pyx_k_not_set_or_not_found), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_off_file, __pyx_k_off_file, sizeof(__pyx_k_off_file), 0, 0, 1, 1},
  {&__pyx_n_s_only_this_dim, __pyx_k_only_this_dim, sizeof(__pyx_k_only_this_dim), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_palette, __pyx_k_palette, sizeof(__pyx_k_palette), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_periodic_dimensions, __pyx_k_periodic_dimensions, sizeof(__pyx_k_periodic_dimensions), 0, 0, 1, 1},
  {&__pyx_n_s_perseus_file, __pyx_k_perseus_file, sizeof(__pyx_k_perseus_file), 0, 0, 1, 1},
  {&__pyx_n_s_persistence, __pyx_k_persistence, sizeof(__pyx_k_persistence), 0, 0, 1, 1},
  {&__pyx_n_s_persistence_dim_max, __pyx_k_persistence_dim_max, sizeof(__pyx_k_persistence_dim_max), 0, 0, 1, 1},
  {&__pyx_n_s_persistence_file, __pyx_k_persistence_file, sizeof(__pyx_k_persistence_file), 0, 0, 1, 1},
  {&__pyx_kp_s_persistence_file_must_be_specifi, __pyx_k_persistence_file_must_be_specifi, sizeof(__pyx_k_persistence_file_must_be_specifi), 0, 0, 1, 0},
  {&__pyx_n_s_persistence_interval, __pyx_k_persistence_interval, sizeof(__pyx_k_persistence_interval), 0, 0, 1, 1},
  {&__pyx_kp_s_persistence_pairs_function_requi, __pyx_k_persistence_pairs_function_requi, sizeof(__pyx_k_persistence_pairs_function_requi), 0, 0, 1, 0},
  {&__pyx_kp_s_persistent_betti_numbers_functio, __pyx_k_persistent_betti_numbers_functio, sizeof(__pyx_k_persistent_betti_numbers_functio), 0, 0, 1, 0},
  {&__pyx_n_s_plot, __pyx_k_plot, sizeof(__pyx_k_plot), 0, 0, 1, 1},
  {&__pyx_n_s_plot_persistence_barcode, __pyx_k_plot_persistence_barcode, sizeof(__pyx_k_plot_persistence_barcode), 0, 0, 1, 1},
  {&__pyx_n_s_plot_persistence_barcode_locals, __pyx_k_plot_persistence_barcode_locals, sizeof(__pyx_k_plot_persistence_barcode_locals), 0, 0, 1, 1},
  {&__pyx_n_s_plot_persistence_barcode_locals_2, __pyx_k_plot_persistence_barcode_locals_2, sizeof(__pyx_k_plot_persistence_barcode_locals_2), 0, 0, 1, 1},
  {&__pyx_n_s_plot_persistence_diagram, __pyx_k_plot_persistence_diagram, sizeof(__pyx_k_plot_persistence_diagram), 0, 0, 1, 1},
  {&__pyx_n_s_plot_persistence_diagram_locals, __pyx_k_plot_persistence_diagram_locals, sizeof(__pyx_k_plot_persistence_diagram_locals), 0, 0, 1, 1},
  {&__pyx_n_s_plot_persistence_diagram_locals_2, __pyx_k_plot_persistence_diagram_locals_2, sizeof(__pyx_k_plot_persistence_diagram_locals_2), 0, 0, 1, 1},
  {&__pyx_n_s_plt, __pyx_k_plt, sizeof(__pyx_k_plt), 0, 0, 1, 1},
  {&__pyx_n_s_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read_lower_triangular_matrix_fro, __pyx_k_read_lower_triangular_matrix_fro, sizeof(__pyx_k_read_lower_triangular_matrix_fro), 0, 0, 1, 1},
  {&__pyx_n_s_read_off, __pyx_k_read_off, sizeof(__pyx_k_read_off), 0, 0, 1, 1},
  {&__pyx_n_s_read_persistence_intervals_group, __pyx_k_read_persistence_intervals_group, sizeof(__pyx_k_read_persistence_intervals_group), 0, 0, 1, 1},
  {&__pyx_n_s_read_persistence_intervals_in_di, __pyx_k_read_persistence_intervals_in_di, sizeof(__pyx_k_read_persistence_intervals_in_di), 0, 0, 1, 1},
  {&__pyx_n_s_red, __pyx_k_red, sizeof(__pyx_k_red), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_reversed, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
  {&__pyx_n_s_root_source_dir, __pyx_k_root_source_dir, sizeof(__pyx_k_root_source_dir), 0, 0, 1, 1},
  {&__pyx_n_s_scatter, __pyx_k_scatter, sizeof(__pyx_k_scatter), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_separator, __pyx_k_separator, sizeof(__pyx_k_separator), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_simplex, __pyx_k_simplex, sizeof(__pyx_k_simplex), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_title, __pyx_k_title, sizeof(__pyx_k_title), 0, 0, 1, 1},
  {&__pyx_n_s_to_value, __pyx_k_to_value, sizeof(__pyx_k_to_value), 0, 0, 1, 1},
  {&__pyx_n_s_top_dimensional_cells, __pyx_k_top_dimensional_cells, sizeof(__pyx_k_top_dimensional_cells), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xlabel, __pyx_k_xlabel, sizeof(__pyx_k_xlabel), 0, 0, 1, 1},
  {&__pyx_n_s_ylabel, __pyx_k_ylabel, sizeof(__pyx_k_ylabel), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 218, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_reversed = __Pyx_GetBuiltinName(__pyx_n_s_reversed); if (!__pyx_builtin_reversed) __PYX_ERR(0, 45, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 100, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 61, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "../../cython/cython/off_reader.pyx":35
 *     vector[vector[double]] read_points_from_OFF_file(string off_file)
 * 
 * def read_off(off_file=''):             # <<<<<<<<<<<<<<
 *     """Read points from OFF file.
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_n_s_off_file); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(2, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_homes_rhu_Documents_phd_project_2, __pyx_n_s_read_off, 35, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(2, 35, __pyx_L1_error)

  /* "../../cython/cython/persistence_graphical_tools.py":33
 *     import os
 * 
 *     def __min_birth_max_death(persistence, band=0.):             # <<<<<<<<<<<<<<
 *         """This function returns (min_birth, max_death) from the persistence.
 * 
 */
  __pyx_tuple__22 = PyTuple_Pack(5, __pyx_n_s_persistence, __pyx_n_s_band, __pyx_n_s_max_death, __pyx_n_s_min_birth, __pyx_n_s_interval); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_homes_rhu_Documents_phd_project_3, __pyx_n_s_min_birth_max_death, 33, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 33, __pyx_L1_error)

  /* "../../cython/cython/persistence_graphical_tools.py":64
 *                '#008888']
 * 
 *     def plot_persistence_barcode(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             max_barcodes=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence bar code from persistence values list
 */
  __pyx_tuple__24 = PyTuple_Pack(20, __pyx_n_s_persistence, __pyx_n_s_persistence_file, __pyx_n_s_alpha, __pyx_n_s_max_barcodes, __pyx_n_s_inf_delta, __pyx_n_s_legend, __pyx_n_s_diag, __pyx_n_s_key, __pyx_n_s_persistence_interval, __pyx_n_s_min_birth, __pyx_n_s_max_death, __pyx_n_s_ind, __pyx_n_s_delta, __pyx_n_s_infinity, __pyx_n_s_axis_start, __pyx_n_s_interval, __pyx_n_s_dimensions, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(6, 0, 20, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_homes_rhu_Documents_phd_project_3, __pyx_n_s_plot_persistence_barcode, 64, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 64, __pyx_L1_error)

  /* "../../cython/cython/persistence_graphical_tools.py":137
 *         return plt
 * 
 *     def plot_persistence_diagram(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             band=0., max_plots=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence diagram from persistence values list
 */
  __pyx_tuple__26 = PyTuple_Pack(22, __pyx_n_s_persistence, __pyx_n_s_persistence_file, __pyx_n_s_alpha, __pyx_n_s_band, __pyx_n_s_max_plots, __pyx_n_s_inf_delta, __pyx_n_s_legend, __pyx_n_s_diag, __pyx_n_s_key, __pyx_n_s_persistence_interval, __pyx_n_s_min_birth, __pyx_n_s_max_death, __pyx_n_s_ind, __pyx_n_s_delta, __pyx_n_s_infinity, __pyx_n_s_axis_start, __pyx_n_s_x, __pyx_n_s_interval, __pyx_n_s_dimensions, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(7, 0, 22, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_homes_rhu_Documents_phd_project_3, __pyx_n_s_plot_persistence_diagram, 137, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 137, __pyx_L1_error)

  /* "../../cython/cython/reader_utils.pyx":39
 *     vector[pair[double, double]] read_pers_intervals_in_dimension(string filename, int only_this_dim)
 * 
 * def read_lower_triangular_matrix_from_csv_file(csv_file='', separator=';'):             # <<<<<<<<<<<<<<
 *     """Read lower triangular matrix from a CSV style file.
 * 
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_s_csv_file, __pyx_n_s_separator); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(7, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_homes_rhu_Documents_phd_project_4, __pyx_n_s_read_lower_triangular_matrix_fro, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(7, 39, __pyx_L1_error)

  /* "../../cython/cython/reader_utils.pyx":56
 *     return []
 * 
 * def read_persistence_intervals_grouped_by_dimension(persistence_file=''):             # <<<<<<<<<<<<<<
 *     """Reads a file containing persistence intervals.
 *     Each line might contain 2, 3 or 4 values: [[field] dimension] birth death
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_n_s_persistence_file); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(7, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_homes_rhu_Documents_phd_project_4, __pyx_n_s_read_persistence_intervals_group, 56, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(7, 56, __pyx_L1_error)

  /* "../../cython/cython/reader_utils.pyx":75
 *     return []
 * 
 * def read_persistence_intervals_in_dimension(persistence_file='', only_this_dim=-1):             # <<<<<<<<<<<<<<
 *     """Reads a file containing persistence intervals.
 *     Each line might contain 2, 3 or 4 values: [[field] dimension] birth death
 */
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_n_s_persistence_file, __pyx_n_s_only_this_dim); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(7, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_homes_rhu_Documents_phd_project_4, __pyx_n_s_read_persistence_intervals_in_di, 75, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(7, 75, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(10, 1, __pyx_L1_error);
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_float_0_6 = PyFloat_FromDouble(0.6); if (unlikely(!__pyx_float_0_6)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_float_0_8 = PyFloat_FromDouble(0.8); if (unlikely(!__pyx_float_0_8)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(10, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5gudhi_SimplexTree) < 0) __PYX_ERR(3, 71, __pyx_L1_error)
  __pyx_type_5gudhi_SimplexTree.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5gudhi_SimplexTree.tp_dictoffset && __pyx_type_5gudhi_SimplexTree.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5gudhi_SimplexTree.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5gudhi_SimplexTree, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(3, 71, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5gudhi_11SimplexTree___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5gudhi_11SimplexTree___init__.doc = __pyx_doc_5gudhi_11SimplexTree___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5gudhi_11SimplexTree___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SimplexTree, (PyObject *)&__pyx_type_5gudhi_SimplexTree) < 0) __PYX_ERR(3, 71, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5gudhi_SimplexTree) < 0) __PYX_ERR(3, 71, __pyx_L1_error)
  __pyx_ptype_5gudhi_SimplexTree = &__pyx_type_5gudhi_SimplexTree;
  if (PyType_Ready(&__pyx_type_5gudhi_RipsComplex) < 0) __PYX_ERR(4, 40, __pyx_L1_error)
  __pyx_type_5gudhi_RipsComplex.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5gudhi_RipsComplex.tp_dictoffset && __pyx_type_5gudhi_RipsComplex.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5gudhi_RipsComplex.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5gudhi_RipsComplex, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(4, 40, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5gudhi_11RipsComplex___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5gudhi_11RipsComplex___init__.doc = __pyx_doc_5gudhi_11RipsComplex___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5gudhi_11RipsComplex___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RipsComplex, (PyObject *)&__pyx_type_5gudhi_RipsComplex) < 0) __PYX_ERR(4, 40, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5gudhi_RipsComplex) < 0) __PYX_ERR(4, 40, __pyx_L1_error)
  __pyx_ptype_5gudhi_RipsComplex = &__pyx_type_5gudhi_RipsComplex;
  if (PyType_Ready(&__pyx_type_5gudhi_CubicalComplex) < 0) __PYX_ERR(5, 50, __pyx_L1_error)
  __pyx_type_5gudhi_CubicalComplex.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5gudhi_CubicalComplex.tp_dictoffset && __pyx_type_5gudhi_CubicalComplex.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5gudhi_CubicalComplex.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5gudhi_CubicalComplex, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(5, 50, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5gudhi_14CubicalComplex___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5gudhi_14CubicalComplex___init__.doc = __pyx_doc_5gudhi_14CubicalComplex___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5gudhi_14CubicalComplex___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CubicalComplex, (PyObject *)&__pyx_type_5gudhi_CubicalComplex) < 0) __PYX_ERR(5, 50, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5gudhi_CubicalComplex) < 0) __PYX_ERR(5, 50, __pyx_L1_error)
  __pyx_ptype_5gudhi_CubicalComplex = &__pyx_type_5gudhi_CubicalComplex;
  if (PyType_Ready(&__pyx_type_5gudhi_PeriodicCubicalComplex) < 0) __PYX_ERR(6, 50, __pyx_L1_error)
  __pyx_type_5gudhi_PeriodicCubicalComplex.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5gudhi_PeriodicCubicalComplex.tp_dictoffset && __pyx_type_5gudhi_PeriodicCubicalComplex.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5gudhi_PeriodicCubicalComplex.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5gudhi_PeriodicCubicalComplex, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(6, 50, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5gudhi_22PeriodicCubicalComplex___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5gudhi_22PeriodicCubicalComplex___init__.doc = __pyx_doc_5gudhi_22PeriodicCubicalComplex___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5gudhi_22PeriodicCubicalComplex___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PeriodicCubicalComplex, (PyObject *)&__pyx_type_5gudhi_PeriodicCubicalComplex) < 0) __PYX_ERR(6, 50, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5gudhi_PeriodicCubicalComplex) < 0) __PYX_ERR(6, 50, __pyx_L1_error)
  __pyx_ptype_5gudhi_PeriodicCubicalComplex = &__pyx_type_5gudhi_PeriodicCubicalComplex;
  if (PyType_Ready(&__pyx_type_5gudhi_WitnessComplex) < 0) __PYX_ERR(8, 39, __pyx_L1_error)
  __pyx_type_5gudhi_WitnessComplex.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5gudhi_WitnessComplex.tp_dictoffset && __pyx_type_5gudhi_WitnessComplex.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5gudhi_WitnessComplex.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5gudhi_WitnessComplex, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(8, 39, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5gudhi_14WitnessComplex___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5gudhi_14WitnessComplex___init__.doc = __pyx_doc_5gudhi_14WitnessComplex___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5gudhi_14WitnessComplex___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_WitnessComplex, (PyObject *)&__pyx_type_5gudhi_WitnessComplex) < 0) __PYX_ERR(8, 39, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5gudhi_WitnessComplex) < 0) __PYX_ERR(8, 39, __pyx_L1_error)
  __pyx_ptype_5gudhi_WitnessComplex = &__pyx_type_5gudhi_WitnessComplex;
  if (PyType_Ready(&__pyx_type_5gudhi_StrongWitnessComplex) < 0) __PYX_ERR(9, 39, __pyx_L1_error)
  __pyx_type_5gudhi_StrongWitnessComplex.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5gudhi_StrongWitnessComplex.tp_dictoffset && __pyx_type_5gudhi_StrongWitnessComplex.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5gudhi_StrongWitnessComplex.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_5gudhi_StrongWitnessComplex, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(9, 39, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_5gudhi_20StrongWitnessComplex___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_5gudhi_20StrongWitnessComplex___init__.doc = __pyx_doc_5gudhi_20StrongWitnessComplex___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_5gudhi_20StrongWitnessComplex___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StrongWitnessComplex, (PyObject *)&__pyx_type_5gudhi_StrongWitnessComplex) < 0) __PYX_ERR(9, 39, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5gudhi_StrongWitnessComplex) < 0) __PYX_ERR(9, 39, __pyx_L1_error)
  __pyx_ptype_5gudhi_StrongWitnessComplex = &__pyx_type_5gudhi_StrongWitnessComplex;
  if (PyType_Ready(&__pyx_type_5gudhi___pyx_scope_struct__plot_persistence_barcode) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __pyx_type_5gudhi___pyx_scope_struct__plot_persistence_barcode.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5gudhi___pyx_scope_struct__plot_persistence_barcode.tp_dictoffset && __pyx_type_5gudhi___pyx_scope_struct__plot_persistence_barcode.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5gudhi___pyx_scope_struct__plot_persistence_barcode.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5gudhi___pyx_scope_struct__plot_persistence_barcode = &__pyx_type_5gudhi___pyx_scope_struct__plot_persistence_barcode;
  if (PyType_Ready(&__pyx_type_5gudhi___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_type_5gudhi___pyx_scope_struct_1_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5gudhi___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_5gudhi___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5gudhi___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5gudhi___pyx_scope_struct_1_genexpr = &__pyx_type_5gudhi___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_5gudhi___pyx_scope_struct_2_plot_persistence_diagram) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_type_5gudhi___pyx_scope_struct_2_plot_persistence_diagram.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5gudhi___pyx_scope_struct_2_plot_persistence_diagram.tp_dictoffset && __pyx_type_5gudhi___pyx_scope_struct_2_plot_persistence_diagram.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5gudhi___pyx_scope_struct_2_plot_persistence_diagram.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5gudhi___pyx_scope_struct_2_plot_persistence_diagram = &__pyx_type_5gudhi___pyx_scope_struct_2_plot_persistence_diagram;
  if (PyType_Ready(&__pyx_type_5gudhi___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 208, __pyx_L1_error)
  __pyx_type_5gudhi___pyx_scope_struct_3_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5gudhi___pyx_scope_struct_3_genexpr.tp_dictoffset && __pyx_type_5gudhi___pyx_scope_struct_3_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5gudhi___pyx_scope_struct_3_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_5gudhi___pyx_scope_struct_3_genexpr = &__pyx_type_5gudhi___pyx_scope_struct_3_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initgudhi(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initgudhi(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_gudhi(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_gudhi(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_gudhi(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'gudhi' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_gudhi(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(10, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("gudhi", __pyx_methods, __pyx_k_This_file_is_part_of_the_Gudhi_L, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(10, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(10, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(10, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(10, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(10, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_gudhi) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(10, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "gudhi")) {
      if (unlikely(PyDict_SetItemString(modules, "gudhi", __pyx_m) < 0)) __PYX_ERR(10, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  #endif

  /* "gudhi.pyx":23
 * """
 * 
 * __author__ = "Vincent Rouvreau"             # <<<<<<<<<<<<<<
 * __copyright__ = "Copyright (C) 2016  Inria"
 * __license__ = "GPL v3"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Vincent_Rouvreau) < 0) __PYX_ERR(10, 23, __pyx_L1_error)

  /* "gudhi.pyx":24
 * 
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016  Inria"             # <<<<<<<<<<<<<<
 * __license__ = "GPL v3"
 * __version__ = "2.3.0"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyright, __pyx_kp_s_Copyright_C_2016_Inria) < 0) __PYX_ERR(10, 24, __pyx_L1_error)

  /* "gudhi.pyx":25
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016  Inria"
 * __license__ = "GPL v3"             # <<<<<<<<<<<<<<
 * __version__ = "2.3.0"
 * # This variable is used by doctest to find files
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_kp_s_GPL_v3) < 0) __PYX_ERR(10, 25, __pyx_L1_error)

  /* "gudhi.pyx":26
 * __copyright__ = "Copyright (C) 2016  Inria"
 * __license__ = "GPL v3"
 * __version__ = "2.3.0"             # <<<<<<<<<<<<<<
 * # This variable is used by doctest to find files
 * __root_source_dir__ = "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_kp_s_2_3_0) < 0) __PYX_ERR(10, 26, __pyx_L1_error)

  /* "gudhi.pyx":28
 * __version__ = "2.3.0"
 * # This variable is used by doctest to find files
 * __root_source_dir__ = "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0"             # <<<<<<<<<<<<<<
 * __debug_info__ =     "Python version 3.6.6\n" \
 *     "Cython version 0.29\n" \
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_root_source_dir, __pyx_kp_s_homes_rhu_Documents_phd_project) < 0) __PYX_ERR(10, 28, __pyx_L1_error)

  /* "gudhi.pyx":29
 * # This variable is used by doctest to find files
 * __root_source_dir__ = "/homes/rhu/Documents/phd_projects/TdaToolbox/2018-09-04-14-25-00_GUDHI_2.3.0"
 * __debug_info__ =     "Python version 3.6.6\n" \             # <<<<<<<<<<<<<<
 *     "Cython version 0.29\n" \
 *     "Matplotlib version 3.0.0\n" \
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_debug_info, __pyx_kp_s_Python_version_3_6_6_Cython_vers) < 0) __PYX_ERR(10, 29, __pyx_L1_error)

  /* "../../cython/cython/off_reader.pyx":4
 * from libcpp.vector cimport vector
 * from libcpp.string cimport string
 * import os             # <<<<<<<<<<<<<<
 * 
 * """This file is part of the Gudhi Library. The Gudhi library
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/off_reader.pyx":28
 * """
 * 
 * __author__ = "Vincent Rouvreau"             # <<<<<<<<<<<<<<
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Vincent_Rouvreau) < 0) __PYX_ERR(2, 28, __pyx_L1_error)

  /* "../../cython/cython/off_reader.pyx":29
 * 
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"             # <<<<<<<<<<<<<<
 * __license__ = "GPL v3"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyright, __pyx_kp_s_Copyright_C_2016_Inria_2) < 0) __PYX_ERR(2, 29, __pyx_L1_error)

  /* "../../cython/cython/off_reader.pyx":30
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Off_reader_interface.h" namespace "Gudhi":
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_kp_s_GPL_v3) < 0) __PYX_ERR(2, 30, __pyx_L1_error)

  /* "../../cython/cython/off_reader.pyx":35
 *     vector[vector[double]] read_points_from_OFF_file(string off_file)
 * 
 * def read_off(off_file=''):             # <<<<<<<<<<<<<<
 *     """Read points from OFF file.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5gudhi_1read_off, NULL, __pyx_n_s_gudhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_off, __pyx_t_1) < 0) __PYX_ERR(2, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/simplex_tree.pyx":29
 * """
 * 
 * __author__ = "Vincent Rouvreau"             # <<<<<<<<<<<<<<
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Vincent_Rouvreau) < 0) __PYX_ERR(3, 29, __pyx_L1_error)

  /* "../../cython/cython/simplex_tree.pyx":30
 * 
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"             # <<<<<<<<<<<<<<
 * __license__ = "GPL v3"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyright, __pyx_kp_s_Copyright_C_2016_Inria_2) < 0) __PYX_ERR(3, 30, __pyx_L1_error)

  /* "../../cython/cython/simplex_tree.pyx":31
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Simplex_tree_interface.h" namespace "Gudhi":
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_kp_s_GPL_v3) < 0) __PYX_ERR(3, 31, __pyx_L1_error)

  /* "../../cython/cython/rips_complex.pyx":6
 * from libcpp.string cimport string
 * from libcpp cimport bool
 * import os             # <<<<<<<<<<<<<<
 * 
 * """This file is part of the Gudhi Library. The Gudhi library
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/rips_complex.pyx":30
 * """
 * 
 * __author__ = "Vincent Rouvreau"             # <<<<<<<<<<<<<<
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Vincent_Rouvreau) < 0) __PYX_ERR(4, 30, __pyx_L1_error)

  /* "../../cython/cython/rips_complex.pyx":31
 * 
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"             # <<<<<<<<<<<<<<
 * __license__ = "GPL v3"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyright, __pyx_kp_s_Copyright_C_2016_Inria_2) < 0) __PYX_ERR(4, 31, __pyx_L1_error)

  /* "../../cython/cython/rips_complex.pyx":32
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Rips_complex_interface.h" namespace "Gudhi":
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_kp_s_GPL_v3) < 0) __PYX_ERR(4, 32, __pyx_L1_error)

  /* "../../cython/cython/rips_complex.pyx":50
 * 
 *     # Fake constructor that does nothing but documenting the constructor
 *     def __init__(self, points=None, distance_matrix=None, max_edge_length=float('inf')):             # <<<<<<<<<<<<<<
 *         """RipsComplex constructor.
 * 
 */
  __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_n_s_inf); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__4 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../cython/cython/rips_complex.pyx":67
 * 
 *     # The real cython constructor
 *     def __cinit__(self, points=None, distance_matrix=None, max_edge_length=float('inf')):             # <<<<<<<<<<<<<<
 *         if distance_matrix is not None:
 *             self.thisptr = new Rips_complex_interface(distance_matrix, max_edge_length, False)
 */
  __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_n_s_inf); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__5 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../cython/cython/cubical_complex.pyx":6
 * from libcpp.string cimport string
 * from libcpp cimport bool
 * import os             # <<<<<<<<<<<<<<
 * 
 * """This file is part of the Gudhi Library. The Gudhi library
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/cubical_complex.pyx":30
 * """
 * 
 * __author__ = "Vincent Rouvreau"             # <<<<<<<<<<<<<<
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Vincent_Rouvreau) < 0) __PYX_ERR(5, 30, __pyx_L1_error)

  /* "../../cython/cython/cubical_complex.pyx":31
 * 
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"             # <<<<<<<<<<<<<<
 * __license__ = "GPL v3"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyright, __pyx_kp_s_Copyright_C_2016_Inria_2) < 0) __PYX_ERR(5, 31, __pyx_L1_error)

  /* "../../cython/cython/cubical_complex.pyx":32
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Cubical_complex_interface.h" namespace "Gudhi":
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_kp_s_GPL_v3) < 0) __PYX_ERR(5, 32, __pyx_L1_error)

  /* "../../cython/cython/periodic_cubical_complex.pyx":6
 * from libcpp.string cimport string
 * from libcpp cimport bool
 * import os             # <<<<<<<<<<<<<<
 * 
 * """This file is part of the Gudhi Library. The Gudhi library
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(6, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/periodic_cubical_complex.pyx":30
 * """
 * 
 * __author__ = "Vincent Rouvreau"             # <<<<<<<<<<<<<<
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Vincent_Rouvreau) < 0) __PYX_ERR(6, 30, __pyx_L1_error)

  /* "../../cython/cython/periodic_cubical_complex.pyx":31
 * 
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"             # <<<<<<<<<<<<<<
 * __license__ = "GPL v3"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyright, __pyx_kp_s_Copyright_C_2016_Inria_2) < 0) __PYX_ERR(6, 31, __pyx_L1_error)

  /* "../../cython/cython/periodic_cubical_complex.pyx":32
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Cubical_complex_interface.h" namespace "Gudhi":
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_kp_s_GPL_v3) < 0) __PYX_ERR(6, 32, __pyx_L1_error)

  /* "../../cython/cython/persistence_graphical_tools.py":23
 * """
 * 
 * __author__ = "Vincent Rouvreau, Bertrand Michel"             # <<<<<<<<<<<<<<
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Vincent_Rouvreau_Bertrand_Michel) < 0) __PYX_ERR(0, 23, __pyx_L1_error)

  /* "../../cython/cython/persistence_graphical_tools.py":24
 * 
 * __author__ = "Vincent Rouvreau, Bertrand Michel"
 * __copyright__ = "Copyright (C) 2016 Inria"             # <<<<<<<<<<<<<<
 * __license__ = "GPL v3"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyright, __pyx_kp_s_Copyright_C_2016_Inria_2) < 0) __PYX_ERR(0, 24, __pyx_L1_error)

  /* "../../cython/cython/persistence_graphical_tools.py":25
 * __author__ = "Vincent Rouvreau, Bertrand Michel"
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"             # <<<<<<<<<<<<<<
 * 
 * try:
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_kp_s_GPL_v3) < 0) __PYX_ERR(0, 25, __pyx_L1_error)

  /* "../../cython/cython/persistence_graphical_tools.py":27
 * __license__ = "GPL v3"
 * 
 * try:             # <<<<<<<<<<<<<<
 *     import matplotlib.pyplot as plt
 *     import matplotlib.patches as mpatches
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "../../cython/cython/persistence_graphical_tools.py":28
 * 
 * try:
 *     import matplotlib.pyplot as plt             # <<<<<<<<<<<<<<
 *     import matplotlib.patches as mpatches
 *     import numpy as np
 */
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_s__21);
      __Pyx_GIVEREF(__pyx_n_s__21);
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__21);
      __pyx_t_5 = __Pyx_Import(__pyx_n_s_matplotlib_pyplot, __pyx_t_1, -1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 28, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_plt, __pyx_t_5) < 0) __PYX_ERR(0, 28, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":29
 * try:
 *     import matplotlib.pyplot as plt
 *     import matplotlib.patches as mpatches             # <<<<<<<<<<<<<<
 *     import numpy as np
 *     import os
 */
      __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 29, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_n_s__21);
      __Pyx_GIVEREF(__pyx_n_s__21);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s__21);
      __pyx_t_1 = __Pyx_Import(__pyx_n_s_matplotlib_patches, __pyx_t_5, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_mpatches, __pyx_t_1) < 0) __PYX_ERR(0, 29, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":30
 *     import matplotlib.pyplot as plt
 *     import matplotlib.patches as mpatches
 *     import numpy as np             # <<<<<<<<<<<<<<
 *     import os
 * 
 */
      __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 30, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":31
 *     import matplotlib.patches as mpatches
 *     import numpy as np
 *     import os             # <<<<<<<<<<<<<<
 * 
 *     def __min_birth_max_death(persistence, band=0.):
 */
      __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(0, 31, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":33
 *     import os
 * 
 *     def __min_birth_max_death(persistence, band=0.):             # <<<<<<<<<<<<<<
 *         """This function returns (min_birth, max_death) from the persistence.
 * 
 */
      __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5gudhi_3__min_birth_max_death, NULL, __pyx_n_s_gudhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_min_birth_max_death, __pyx_t_1) < 0) __PYX_ERR(0, 33, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":60
 *     Only 13 colors for the palette
 *     """
 *     palette = ['#ff0000', '#00ff00', '#0000ff', '#00ffff', '#ff00ff', '#ffff00',             # <<<<<<<<<<<<<<
 *                '#000000', '#880000', '#008800', '#000088', '#888800', '#880088',
 *                '#008888']
 */
      __pyx_t_1 = PyList_New(13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_s_ff0000);
      __Pyx_GIVEREF(__pyx_kp_s_ff0000);
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_ff0000);
      __Pyx_INCREF(__pyx_kp_s_00ff00);
      __Pyx_GIVEREF(__pyx_kp_s_00ff00);
      PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_s_00ff00);
      __Pyx_INCREF(__pyx_kp_s_0000ff);
      __Pyx_GIVEREF(__pyx_kp_s_0000ff);
      PyList_SET_ITEM(__pyx_t_1, 2, __pyx_kp_s_0000ff);
      __Pyx_INCREF(__pyx_kp_s_00ffff);
      __Pyx_GIVEREF(__pyx_kp_s_00ffff);
      PyList_SET_ITEM(__pyx_t_1, 3, __pyx_kp_s_00ffff);
      __Pyx_INCREF(__pyx_kp_s_ff00ff);
      __Pyx_GIVEREF(__pyx_kp_s_ff00ff);
      PyList_SET_ITEM(__pyx_t_1, 4, __pyx_kp_s_ff00ff);
      __Pyx_INCREF(__pyx_kp_s_ffff00);
      __Pyx_GIVEREF(__pyx_kp_s_ffff00);
      PyList_SET_ITEM(__pyx_t_1, 5, __pyx_kp_s_ffff00);
      __Pyx_INCREF(__pyx_kp_s_000000);
      __Pyx_GIVEREF(__pyx_kp_s_000000);
      PyList_SET_ITEM(__pyx_t_1, 6, __pyx_kp_s_000000);
      __Pyx_INCREF(__pyx_kp_s_880000);
      __Pyx_GIVEREF(__pyx_kp_s_880000);
      PyList_SET_ITEM(__pyx_t_1, 7, __pyx_kp_s_880000);
      __Pyx_INCREF(__pyx_kp_s_008800);
      __Pyx_GIVEREF(__pyx_kp_s_008800);
      PyList_SET_ITEM(__pyx_t_1, 8, __pyx_kp_s_008800);
      __Pyx_INCREF(__pyx_kp_s_000088);
      __Pyx_GIVEREF(__pyx_kp_s_000088);
      PyList_SET_ITEM(__pyx_t_1, 9, __pyx_kp_s_000088);
      __Pyx_INCREF(__pyx_kp_s_888800);
      __Pyx_GIVEREF(__pyx_kp_s_888800);
      PyList_SET_ITEM(__pyx_t_1, 10, __pyx_kp_s_888800);
      __Pyx_INCREF(__pyx_kp_s_880088);
      __Pyx_GIVEREF(__pyx_kp_s_880088);
      PyList_SET_ITEM(__pyx_t_1, 11, __pyx_kp_s_880088);
      __Pyx_INCREF(__pyx_kp_s_008888);
      __Pyx_GIVEREF(__pyx_kp_s_008888);
      PyList_SET_ITEM(__pyx_t_1, 12, __pyx_kp_s_008888);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_palette, __pyx_t_1) < 0) __PYX_ERR(0, 60, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":64
 *                '#008888']
 * 
 *     def plot_persistence_barcode(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             max_barcodes=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence bar code from persistence values list
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_k__12 = __pyx_t_1;
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5gudhi_5plot_persistence_barcode, NULL, __pyx_n_s_gudhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_plot_persistence_barcode, __pyx_t_1) < 0) __PYX_ERR(0, 64, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":137
 *         return plt
 * 
 *     def plot_persistence_diagram(persistence=[], persistence_file='', alpha=0.6,             # <<<<<<<<<<<<<<
 *             band=0., max_plots=1000, inf_delta=0.1, legend=False):
 *         """This function plots the persistence diagram from persistence values list
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_k__13 = __pyx_t_1;
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5gudhi_7plot_persistence_diagram, NULL, __pyx_n_s_gudhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_plot_persistence_diagram, __pyx_t_1) < 0) __PYX_ERR(0, 137, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "../../cython/cython/persistence_graphical_tools.py":27
 * __license__ = "GPL v3"
 * 
 * try:             # <<<<<<<<<<<<<<
 *     import matplotlib.pyplot as plt
 *     import matplotlib.patches as mpatches
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "../../cython/cython/persistence_graphical_tools.py":218
 *         return plt
 * 
 * except ImportError:             # <<<<<<<<<<<<<<
 *     # Continue in case of import error, functions won't be available
 *     pass
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "../../cython/cython/persistence_graphical_tools.py":27
 * __license__ = "GPL v3"
 * 
 * try:             # <<<<<<<<<<<<<<
 *     import matplotlib.pyplot as plt
 *     import matplotlib.patches as mpatches
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    __pyx_L7_try_end:;
  }

  /* "../../cython/cython/reader_utils.pyx":6
 * from libcpp.map cimport map
 * from libcpp.pair cimport pair
 * import os             # <<<<<<<<<<<<<<
 * 
 * """This file is part of the Gudhi Library. The Gudhi library
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/reader_utils.pyx":30
 * """
 * 
 * __author__ = "Vincent Rouvreau"             # <<<<<<<<<<<<<<
 * __copyright__ = "Copyright (C) 2017 Inria"
 * __license__ = "GPL v3"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Vincent_Rouvreau) < 0) __PYX_ERR(7, 30, __pyx_L1_error)

  /* "../../cython/cython/reader_utils.pyx":31
 * 
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2017 Inria"             # <<<<<<<<<<<<<<
 * __license__ = "GPL v3"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyright, __pyx_kp_s_Copyright_C_2017_Inria) < 0) __PYX_ERR(7, 31, __pyx_L1_error)

  /* "../../cython/cython/reader_utils.pyx":32
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2017 Inria"
 * __license__ = "GPL v3"             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Reader_utils_interface.h" namespace "Gudhi":
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_kp_s_GPL_v3) < 0) __PYX_ERR(7, 32, __pyx_L1_error)

  /* "../../cython/cython/reader_utils.pyx":39
 *     vector[pair[double, double]] read_pers_intervals_in_dimension(string filename, int only_this_dim)
 * 
 * def read_lower_triangular_matrix_from_csv_file(csv_file='', separator=';'):             # <<<<<<<<<<<<<<
 *     """Read lower triangular matrix from a CSV style file.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5gudhi_9read_lower_triangular_matrix_from_csv_file, NULL, __pyx_n_s_gudhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_lower_triangular_matrix_fro, __pyx_t_1) < 0) __PYX_ERR(7, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/reader_utils.pyx":56
 *     return []
 * 
 * def read_persistence_intervals_grouped_by_dimension(persistence_file=''):             # <<<<<<<<<<<<<<
 *     """Reads a file containing persistence intervals.
 *     Each line might contain 2, 3 or 4 values: [[field] dimension] birth death
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5gudhi_11read_persistence_intervals_grouped_by_dimension, NULL, __pyx_n_s_gudhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_persistence_intervals_group, __pyx_t_1) < 0) __PYX_ERR(7, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/reader_utils.pyx":75
 *     return []
 * 
 * def read_persistence_intervals_in_dimension(persistence_file='', only_this_dim=-1):             # <<<<<<<<<<<<<<
 *     """Reads a file containing persistence intervals.
 *     Each line might contain 2, 3 or 4 values: [[field] dimension] birth death
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5gudhi_13read_persistence_intervals_in_dimension, NULL, __pyx_n_s_gudhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_persistence_intervals_in_di, __pyx_t_1) < 0) __PYX_ERR(7, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../cython/cython/witness_complex.pyx":27
 * """
 * 
 * __author__ = "Vincent Rouvreau"             # <<<<<<<<<<<<<<
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Vincent_Rouvreau) < 0) __PYX_ERR(8, 27, __pyx_L1_error)

  /* "../../cython/cython/witness_complex.pyx":28
 * 
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"             # <<<<<<<<<<<<<<
 * __license__ = "GPL v3"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyright, __pyx_kp_s_Copyright_C_2016_Inria_2) < 0) __PYX_ERR(8, 28, __pyx_L1_error)

  /* "../../cython/cython/witness_complex.pyx":29
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Witness_complex_interface.h" namespace "Gudhi":
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_kp_s_GPL_v3) < 0) __PYX_ERR(8, 29, __pyx_L1_error)

  /* "../../cython/cython/strong_witness_complex.pyx":27
 * """
 * 
 * __author__ = "Vincent Rouvreau"             # <<<<<<<<<<<<<<
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Vincent_Rouvreau) < 0) __PYX_ERR(9, 27, __pyx_L1_error)

  /* "../../cython/cython/strong_witness_complex.pyx":28
 * 
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"             # <<<<<<<<<<<<<<
 * __license__ = "GPL v3"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyright, __pyx_kp_s_Copyright_C_2016_Inria_2) < 0) __PYX_ERR(9, 28, __pyx_L1_error)

  /* "../../cython/cython/strong_witness_complex.pyx":29
 * __author__ = "Vincent Rouvreau"
 * __copyright__ = "Copyright (C) 2016 Inria"
 * __license__ = "GPL v3"             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Strong_witness_complex_interface.h" namespace "Gudhi":
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_kp_s_GPL_v3) < 0) __PYX_ERR(9, 29, __pyx_L1_error)

  /* "gudhi.pyx":1
 * """This file is part of the Gudhi Library. The Gudhi library             # <<<<<<<<<<<<<<
 *    (Geometric Understanding in Higher Dimensions) is a generic C++
 *    library for computational topology.
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(10, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_size_t_2c_double_3e____3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_pair_3c_size_t_2c_double_3e____3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init gudhi", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init gudhi");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if (0) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* UnicodeAsUCS4 */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
   Py_ssize_t length;
   #if CYTHON_PEP393_ENABLED
   length = PyUnicode_GET_LENGTH(x);
   if (likely(length == 1)) {
       return PyUnicode_READ_CHAR(x, 0);
   }
   #else
   length = PyUnicode_GET_SIZE(x);
   if (likely(length == 1)) {
       return PyUnicode_AS_UNICODE(x)[0];
   }
   #if Py_UNICODE_SIZE == 2
   else if (PyUnicode_GET_SIZE(x) == 2) {
       Py_UCS4 high_val = PyUnicode_AS_UNICODE(x)[0];
       if (high_val >= 0xD800 && high_val <= 0xDBFF) {
           Py_UCS4 low_val = PyUnicode_AS_UNICODE(x)[1];
           if (low_val >= 0xDC00 && low_val <= 0xDFFF) {
               return 0x10000 + (((high_val & ((1<<10)-1)) << 10) | (low_val & ((1<<10)-1)));
           }
       }
   }
   #endif
   #endif
   PyErr_Format(PyExc_ValueError,
                "only single character unicode strings can be converted to Py_UCS4, "
                "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
   return (Py_UCS4)-1;
}

/* object_ord */
static long __Pyx__PyObject_Ord(PyObject* c) {
    Py_ssize_t size;
    if (PyBytes_Check(c)) {
        size = PyBytes_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyBytes_AS_STRING(c)[0];
        }
#if PY_MAJOR_VERSION < 3
    } else if (PyUnicode_Check(c)) {
        return (long)__Pyx_PyUnicode_AsPy_UCS4(c);
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    } else if (PyByteArray_Check(c)) {
        size = PyByteArray_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyByteArray_AS_STRING(c)[0];
        }
#endif
    } else {
        PyErr_Format(PyExc_TypeError,
            "ord() expected string of length 1, but %.200s found", c->ob_type->tp_name);
        return (long)(Py_UCS4)-1;
    }
    PyErr_Format(PyExc_TypeError,
        "ord() expected a character, but string of length %zd found", size);
    return (long)(Py_UCS4)-1;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* Print */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file_2, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* PrintOne */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
